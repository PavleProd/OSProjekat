GAS LISTING /tmp/cciilwih.s 			page 1


   1              		.file	"kernel.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN6Kernel10popSppSpieEv
   9              	_ZN6Kernel10popSppSpieEv:
  10              	.LFB39:
  11              		.file 1 "src/kernel.cpp"
   1:src/kernel.cpp **** #include "../h/kernel.h"
   2:src/kernel.cpp **** #include "../h/PCB.h"
   3:src/kernel.cpp **** #include "../h/MemoryAllocator.h"
   4:src/kernel.cpp **** #include "../h/console.h"
   5:src/kernel.cpp **** #include "../h/print.h"
   6:src/kernel.cpp **** #include "../h/Scheduler.h"
   7:src/kernel.cpp **** #include "../h/SCB.h"
   8:src/kernel.cpp **** #include "../h/SleepingProcesses.h"
   9:src/kernel.cpp **** 
  10:src/kernel.cpp **** void Kernel::popSppSpie() {
  12              		.loc 1 10 27
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  11:src/kernel.cpp ****     asm volatile("csrw sepc, ra"); // da bi se funkcija vratila u wrapper
  20              		.loc 1 11 5
  21              		.loc 1 11 34 is_stmt 0
  22              	#APP
  23              	# 11 "src/kernel.cpp" 1
  12              	    asm volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 12 5 is_stmt 1
  27              		.loc 1 12 25 is_stmt 0
  28              	# 12 "src/kernel.cpp" 1
  13              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 13 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE39:
  42              		.align	2
  43              		.globl	interruptHandler
  45              	interruptHandler:
  46              	.LFB40:
  14:src/kernel.cpp **** 
GAS LISTING /tmp/cciilwih.s 			page 2


  15:src/kernel.cpp **** extern "C" void interruptHandler() { // extern C da kompajler ne bi menjao ime funkcije
  47              		.loc 1 15 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FA 		addi	sp,sp,-96
  50              		.cfi_def_cfa_offset 96
  51 0024 233C1104 		sd	ra,88(sp)
  52 0028 23388104 		sd	s0,80(sp)
  53 002c 23349104 		sd	s1,72(sp)
  54 0030 23302105 		sd	s2,64(sp)
  55              		.cfi_offset 1, -8
  56              		.cfi_offset 8, -16
  57              		.cfi_offset 9, -24
  58              		.cfi_offset 18, -32
  59 0034 13040106 		addi	s0,sp,96
  60              		.cfi_def_cfa 8, 0
  16:src/kernel.cpp ****     size_t volatile scause = Kernel::r_scause();
  61              		.loc 1 16 5
  62              	.LBB41:
  63              	.LBB42:
  64              		.file 2 "src/../h/kernel.h"
   1:src/../h/kernel.h **** #ifndef KERNEL_H
   2:src/../h/kernel.h **** #define KERNEL_H
   3:src/../h/kernel.h **** 
   4:src/../h/kernel.h **** #include "hw.h"
   5:src/../h/kernel.h **** 
   6:src/../h/kernel.h **** class Kernel {
   7:src/../h/kernel.h **** public:
   8:src/../h/kernel.h **** 
   9:src/../h/kernel.h ****     // postavlja code u registar a0
  10:src/../h/kernel.h ****     static size_t setCode(size_t code) {
  11:src/../h/kernel.h ****         return code;
  12:src/../h/kernel.h ****     }
  13:src/../h/kernel.h **** 
  14:src/../h/kernel.h ****     // kodovi po kojima se prepoznaju sistemski pozivi
  15:src/../h/kernel.h ****     enum sysCallCodes {
  16:src/../h/kernel.h ****         mem_alloc = 0x01,
  17:src/../h/kernel.h ****         mem_free = 0x02,
  18:src/../h/kernel.h ****         thread_create = 0x11,
  19:src/../h/kernel.h ****         thread_exit = 0x12,
  20:src/../h/kernel.h ****         thread_dispatch = 0x13,
  21:src/../h/kernel.h ****         thread_start = 0x14,
  22:src/../h/kernel.h ****         sem_open = 0x21,
  23:src/../h/kernel.h ****         sem_close = 0x22,
  24:src/../h/kernel.h ****         sem_wait = 0x23,
  25:src/../h/kernel.h ****         sem_signal = 0x24,
  26:src/../h/kernel.h ****         time_sleep = 0x31,
  27:src/../h/kernel.h ****         getc = 0x41,
  28:src/../h/kernel.h ****         putc = 0x42
  29:src/../h/kernel.h ****     };
  30:src/../h/kernel.h **** 
  31:src/../h/kernel.h ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  32:src/../h/kernel.h ****     static void popSppSpie();
  33:src/../h/kernel.h **** 
  34:src/../h/kernel.h ****     // cita registar scause (uzrok nastanka prekida)
  35:src/../h/kernel.h ****     static size_t r_scause() {
  36:src/../h/kernel.h ****         size_t volatile scause;
  65              		.loc 2 36 9
GAS LISTING /tmp/cciilwih.s 			page 3


  37:src/../h/kernel.h ****         __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  66              		.loc 2 37 9
  67              		.loc 2 37 76 is_stmt 0
  68              	#APP
  69              	# 37 "src/../h/kernel.h" 1
  38              	        return scause;
  70              		csrr a5, scause
  71              	# 0 "" 2
  72              	#NO_APP
  73 003c 2330F4FC 		sd	a5,-64(s0)
  74              		.loc 2 38 9 is_stmt 1
  75              		.loc 2 38 16 is_stmt 0
  76 0040 833704FC 		ld	a5,-64(s0)
  77              	.LBE42:
  78              	.LBE41:
  79              		.loc 1 16 47
  80 0044 233CF4FC 		sd	a5,-40(s0)
  17:src/kernel.cpp ****     size_t volatile sepc = Kernel::r_sepc();
  81              		.loc 1 17 5 is_stmt 1
  82              	.LBB43:
  83              	.LBB44:
  39:src/../h/kernel.h ****     }
  40:src/../h/kernel.h **** 
  41:src/../h/kernel.h ****     // upisuje u registar scause (uzrok nastanka prekida)
  42:src/../h/kernel.h ****     static void w_scause(size_t scause) {
  43:src/../h/kernel.h ****         __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  44:src/../h/kernel.h ****     }
  45:src/../h/kernel.h **** 
  46:src/../h/kernel.h ****     // cita registar sepc
  47:src/../h/kernel.h ****     static size_t r_sepc() {
  48:src/../h/kernel.h ****         size_t volatile sepc;
  84              		.loc 2 48 9
  49:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
  85              		.loc 2 49 9
  86              		.loc 2 49 68 is_stmt 0
  87              	#APP
  88              	# 49 "src/../h/kernel.h" 1
  50              	        return sepc;
  89              		csrr a5, sepc
  90              	# 0 "" 2
  91              	#NO_APP
  92 004c 233CF4FA 		sd	a5,-72(s0)
  93              		.loc 2 50 9 is_stmt 1
  94              		.loc 2 50 16 is_stmt 0
  95 0050 833784FB 		ld	a5,-72(s0)
  96              	.LBE44:
  97              	.LBE43:
  98              		.loc 1 17 43
  99 0054 2338F4FC 		sd	a5,-48(s0)
  18:src/kernel.cpp ****     size_t volatile sstatus = Kernel::r_sstatus();
 100              		.loc 1 18 5 is_stmt 1
 101              	.LBB45:
 102              	.LBB46:
  51:src/../h/kernel.h ****     }
  52:src/../h/kernel.h **** 
  53:src/../h/kernel.h ****     // upisuje u registar sepc
  54:src/../h/kernel.h ****     static void w_sepc(size_t sepc) {
GAS LISTING /tmp/cciilwih.s 			page 4


  55:src/../h/kernel.h ****         __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
  56:src/../h/kernel.h ****     }
  57:src/../h/kernel.h **** 
  58:src/../h/kernel.h ****     // read register stvec
  59:src/../h/kernel.h ****     static size_t r_stvec() {
  60:src/../h/kernel.h ****         size_t volatile stvec;
  61:src/../h/kernel.h ****         __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
  62:src/../h/kernel.h ****         return stvec;
  63:src/../h/kernel.h ****     }
  64:src/../h/kernel.h **** 
  65:src/../h/kernel.h ****     // write register stvec
  66:src/../h/kernel.h ****     static void w_stvec(size_t stvec) {
  67:src/../h/kernel.h ****         __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  68:src/../h/kernel.h ****     }
  69:src/../h/kernel.h **** 
  70:src/../h/kernel.h ****     // read register stval
  71:src/../h/kernel.h ****     static size_t r_stval() {
  72:src/../h/kernel.h ****         size_t volatile stval;
  73:src/../h/kernel.h ****         __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
  74:src/../h/kernel.h ****         return stval;
  75:src/../h/kernel.h ****     }
  76:src/../h/kernel.h **** 
  77:src/../h/kernel.h ****     // write register stval
  78:src/../h/kernel.h ****     static void w_stval(size_t stval) {
  79:src/../h/kernel.h ****         __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
  80:src/../h/kernel.h ****     }
  81:src/../h/kernel.h **** 
  82:src/../h/kernel.h ****     enum BitMaskSip
  83:src/../h/kernel.h ****     {
  84:src/../h/kernel.h ****         SIP_SSIE = (1 << 1), // da li su dozvoljeni softverski prekidi
  85:src/../h/kernel.h ****         SIP_SEIE = (1 << 9), // da li su dozvoljeni spoljasnji hardverski prekidi
  86:src/../h/kernel.h ****     };
  87:src/../h/kernel.h **** 
  88:src/../h/kernel.h ****     // postavljanje odredjenih bitova (BitMaskSip) u registar sip
  89:src/../h/kernel.h ****     static void ms_sip(size_t mask) {
  90:src/../h/kernel.h ****         __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
  91:src/../h/kernel.h ****     }
  92:src/../h/kernel.h **** 
  93:src/../h/kernel.h ****     // brisanje odredjenih bitova (BitMaskSip) iz registra sip
  94:src/../h/kernel.h ****     static void mc_sip(size_t mask) {
  95:src/../h/kernel.h ****         __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
  96:src/../h/kernel.h ****     }
  97:src/../h/kernel.h **** 
  98:src/../h/kernel.h ****     // citanje iz registra sip
  99:src/../h/kernel.h ****     static size_t r_sip() {
 100:src/../h/kernel.h ****         size_t volatile sip;
 101:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 102:src/../h/kernel.h ****         return sip;
 103:src/../h/kernel.h ****     }
 104:src/../h/kernel.h **** 
 105:src/../h/kernel.h ****     // upis u registar sip
 106:src/../h/kernel.h ****     static void w_sip(size_t sip) {
 107:src/../h/kernel.h ****         __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 108:src/../h/kernel.h ****     }
 109:src/../h/kernel.h **** 
 110:src/../h/kernel.h ****     enum BitMaskSstatus
 111:src/../h/kernel.h ****     {
GAS LISTING /tmp/cciilwih.s 			page 5


 112:src/../h/kernel.h ****         SSTATUS_SIE = (1 << 1),
 113:src/../h/kernel.h ****         SSTATUS_SPIE = (1 << 5),
 114:src/../h/kernel.h ****         SSTATUS_SPP = (1 << 8),
 115:src/../h/kernel.h ****     };
 116:src/../h/kernel.h **** 
 117:src/../h/kernel.h ****     // mask set register sstatus
 118:src/../h/kernel.h ****     static void ms_sstatus(size_t mask) {
 119:src/../h/kernel.h ****         __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 120:src/../h/kernel.h ****     }
 121:src/../h/kernel.h **** 
 122:src/../h/kernel.h ****     // mask clear register sstatus
 123:src/../h/kernel.h ****     static void mc_sstatus(size_t mask) {
 124:src/../h/kernel.h ****         __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 125:src/../h/kernel.h ****     }
 126:src/../h/kernel.h **** 
 127:src/../h/kernel.h ****     // read register sstatus
 128:src/../h/kernel.h ****     static size_t r_sstatus() {
 129:src/../h/kernel.h ****         size_t volatile sstatus;
 103              		.loc 2 129 9
 130:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 104              		.loc 2 130 9
 105              		.loc 2 130 80 is_stmt 0
 106              	#APP
 107              	# 130 "src/../h/kernel.h" 1
 131              	        return sstatus;
 108              		csrr a5, sstatus
 109              	# 0 "" 2
 110              	#NO_APP
 111 005c 2338F4FA 		sd	a5,-80(s0)
 112              		.loc 2 131 9 is_stmt 1
 113              		.loc 2 131 16 is_stmt 0
 114 0060 833704FB 		ld	a5,-80(s0)
 115              	.LBE46:
 116              	.LBE45:
 117              		.loc 1 18 49
 118 0064 2334F4FC 		sd	a5,-56(s0)
  19:src/kernel.cpp ****     if(scause == 9 || scause == 8) { // sistemski poziv iz korisnickog(8) ili sistemskog(9) rezima
 119              		.loc 1 19 5 is_stmt 1
 120              	.LBB47:
 121              		.loc 1 19 15 is_stmt 0
 122 0068 033784FD 		ld	a4,-40(s0)
 123              		.loc 1 19 20
 124 006c 93079000 		li	a5,9
 125 0070 6302F704 		beq	a4,a5,.L4
 126              		.loc 1 19 30 discriminator 2
 127 0074 033784FD 		ld	a4,-40(s0)
 128              		.loc 1 19 20 discriminator 2
 129 0078 93078000 		li	a5,8
 130 007c 630CF702 		beq	a4,a5,.L4
  20:src/kernel.cpp ****         sepc += 4; // da bi se sret vratio na pravo mesto
  21:src/kernel.cpp ****         size_t volatile code = PCB::running->registers[10]; // a0
  22:src/kernel.cpp ****         switch(code) {
  23:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_alloc: // mem_alloc(size_t size) a1 - size
  24:src/kernel.cpp ****             {
  25:src/kernel.cpp ****                 size_t size = PCB::running->registers[11];
  26:src/kernel.cpp ****                 size = MemoryAllocator::blocksInSize(size);
  27:src/kernel.cpp **** 
GAS LISTING /tmp/cciilwih.s 			page 6


  28:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)MemoryAllocator::mem_alloc(size);
  29:src/kernel.cpp ****                 break;
  30:src/kernel.cpp ****             }
  31:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_free: // mem_free(void* memSegment) a1 - memSegment
  32:src/kernel.cpp ****             {
  33:src/kernel.cpp ****                 void* memSegment = (void*)PCB::running->registers[11];
  34:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)MemoryAllocator::mem_free(memSegment);
  35:src/kernel.cpp ****                 break;
  36:src/kernel.cpp ****             }
  37:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_dispatch:
  38:src/kernel.cpp ****             {
  39:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
  40:src/kernel.cpp ****                 PCB::dispatch();
  41:src/kernel.cpp ****                 break;
  42:src/kernel.cpp ****             }
  43:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_exit:
  44:src/kernel.cpp ****             {
  45:src/kernel.cpp ****                 PCB::running->finished = true;
  46:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
  47:src/kernel.cpp ****                 PCB::dispatch();
  48:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)0;
  49:src/kernel.cpp ****                 break;
  50:src/kernel.cpp ****             }
  51:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_start: // a1 - handle
  52:src/kernel.cpp ****             {
  53:src/kernel.cpp ****                 PCB **handle = (PCB **) PCB::running->registers[11];
  54:src/kernel.cpp ****                 Scheduler::put(*handle);
  55:src/kernel.cpp ****                 break;
  56:src/kernel.cpp ****             }
  57:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_create: // a1 - handle a2 - startRoutine a3 - arg a4 
  58:src/kernel.cpp ****             {
  59:src/kernel.cpp ****                 // argumenti
  60:src/kernel.cpp ****                 PCB::processMain main = (PCB::processMain)PCB::running->registers[12];
  61:src/kernel.cpp ****                 void *arg = (void*)PCB::running->registers[13];
  62:src/kernel.cpp **** 
  63:src/kernel.cpp ****                 PCB **handle = (PCB**)PCB::running->registers[11];
  64:src/kernel.cpp ****                 *handle = PCB::createProccess(main, arg);
  65:src/kernel.cpp **** 
  66:src/kernel.cpp ****                 // stavljamo handle u a0 (verovatno vec jeste ali za svaki slucaj)
  67:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)handle;
  68:src/kernel.cpp **** 
  69:src/kernel.cpp ****                 if(*handle == nullptr) break;
  70:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
  71:src/kernel.cpp ****                 size_t* stack = (size_t*)PCB::running->registers[14];
  72:src/kernel.cpp ****                 (*handle)->stack = stack;
  73:src/kernel.cpp ****                 (*handle)->registers[2] = (size_t)&stack[DEFAULT_STACK_SIZE]; // sp(x2)
  74:src/kernel.cpp **** 
  75:src/kernel.cpp ****                 break;
  76:src/kernel.cpp ****             }
  77:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_open: // a1 = handle a2 = init
  78:src/kernel.cpp ****             {
  79:src/kernel.cpp ****                 SCB **handle = (SCB**) PCB::running->registers[11];
  80:src/kernel.cpp ****                 size_t init = (int) PCB::running->registers[12];
  81:src/kernel.cpp **** 
  82:src/kernel.cpp ****                 (*handle) = SCB::createSemaphore(init);
  83:src/kernel.cpp **** 
  84:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)handle;
GAS LISTING /tmp/cciilwih.s 			page 7


  85:src/kernel.cpp ****                 break;
  86:src/kernel.cpp ****             }
  87:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_wait: // a1 = sem
  88:src/kernel.cpp ****             {
  89:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
  90:src/kernel.cpp **** 
  91:src/kernel.cpp ****                 PCB::running->registers[10] = sem->wait(); // true kao proces treba da se blokira, 
  92:src/kernel.cpp ****                 break;
  93:src/kernel.cpp ****             }
  94:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_signal: // a1 = sem
  95:src/kernel.cpp ****             {
  96:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
  97:src/kernel.cpp **** 
  98:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)sem->signal(); // vraca pokazivac na PCB ako 
  99:src/kernel.cpp ****                 break;
 100:src/kernel.cpp ****             }
 101:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_close: // a1 = sem
 102:src/kernel.cpp ****             {
 103:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 104:src/kernel.cpp **** 
 105:src/kernel.cpp ****                 sem->signalClosing();
 106:src/kernel.cpp ****                 delete sem; // destruktor ce signalizirati svim procesima da je obrisan
 107:src/kernel.cpp **** 
 108:src/kernel.cpp ****                 break;
 109:src/kernel.cpp ****             }
 110:src/kernel.cpp ****             case Kernel::sysCallCodes::time_sleep: // a1 = time
 111:src/kernel.cpp ****             {
 112:src/kernel.cpp ****                 size_t time = (size_t)PCB::running->registers[11];
 113:src/kernel.cpp ****                 PCB::running->timeSleeping = time;
 114:src/kernel.cpp ****                 SleepingProcesses::putToSleep(PCB::running);
 115:src/kernel.cpp ****                 break;
 116:src/kernel.cpp ****             }
 117:src/kernel.cpp ****             default:
 118:src/kernel.cpp ****                 printError();
 119:src/kernel.cpp ****                 break;
 120:src/kernel.cpp ****         }
 121:src/kernel.cpp ****         Kernel::w_sepc(sepc);
 122:src/kernel.cpp ****         Kernel::w_sstatus(sstatus);
 123:src/kernel.cpp ****         return;
 124:src/kernel.cpp ****     }
 125:src/kernel.cpp ****     else if(scause == (1UL << 63 | 1)) { // softverski prekid od tajmera
 131              		.loc 1 125 10 is_stmt 1
 132              		.loc 1 125 20 is_stmt 0
 133 0080 033784FD 		ld	a4,-40(s0)
 134              		.loc 1 125 10
 135 0084 9307F0FF 		li	a5,-1
 136 0088 9397F703 		slli	a5,a5,63
 137 008c 93871700 		addi	a5,a5,1
 138 0090 6300F726 		beq	a4,a5,.L26
 126:src/kernel.cpp ****         PCB::timeSliceCounter++;
 127:src/kernel.cpp ****         SleepingProcesses::wakeUp(); // budi uspavane procese ako su postojali, ako ne smanjuje per
 128:src/kernel.cpp ****         if(PCB::timeSliceCounter >= PCB::running->timeSlice) {
 129:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 130:src/kernel.cpp ****             PCB::dispatch(); // vrsimo promenu konteksta ako je istekao time slice procesa
 131:src/kernel.cpp ****             Kernel::w_sepc(sepc);
 132:src/kernel.cpp ****             Kernel::w_sstatus(sstatus);
 133:src/kernel.cpp ****         }
GAS LISTING /tmp/cciilwih.s 			page 8


 134:src/kernel.cpp ****         Kernel::mc_sip(Kernel::SIP_SSIE); // postavljamo SSIE na 0 jer smo obradili softverski prek
 135:src/kernel.cpp ****     }
 136:src/kernel.cpp ****     else if(scause == (1UL << 63 | 9)) { // spoljasnji prekid od konzole
 139              		.loc 1 136 10 is_stmt 1
 140              		.loc 1 136 20 is_stmt 0
 141 0094 033784FD 		ld	a4,-40(s0)
 142              		.loc 1 136 10
 143 0098 9307F0FF 		li	a5,-1
 144 009c 9397F703 		slli	a5,a5,63
 145 00a0 93879700 		addi	a5,a5,9
 146 00a4 6306F72A 		beq	a4,a5,.L27
 137:src/kernel.cpp ****         console_handler(); // TODO: zameniti sa svojim console_handlerom()
 138:src/kernel.cpp ****     }
 139:src/kernel.cpp ****     else { // neka vrsta greske, neocekivan skok na prekidnu rutinu
 140:src/kernel.cpp ****         printError();
 147              		.loc 1 140 9 is_stmt 1
 148              		.loc 1 140 19 is_stmt 0
 149 00a8 97000000 		call	_Z10printErrorv@plt
 149      E7800000 
 150              	.LVL0:
 151 00b0 6F004008 		j	.L3
 152              	.L4:
 153              	.LBB48:
  20:src/kernel.cpp ****         size_t volatile code = PCB::running->registers[10]; // a0
 154              		.loc 1 20 9 is_stmt 1
  20:src/kernel.cpp ****         size_t volatile code = PCB::running->registers[10]; // a0
 155              		.loc 1 20 14 is_stmt 0
 156 00b4 833704FD 		ld	a5,-48(s0)
 157 00b8 93874700 		addi	a5,a5,4
 158 00bc 2338F4FC 		sd	a5,-48(s0)
  21:src/kernel.cpp ****         switch(code) {
 159              		.loc 1 21 9 is_stmt 1
  21:src/kernel.cpp ****         switch(code) {
 160              		.loc 1 21 46 is_stmt 0
 161 00c0 97070000 		la	a5,_ZN3PCB7runningE
 161      83B70700 
 162 00c8 03B50700 		ld	a0,0(a5)
 163 00cc 03378501 		ld	a4,24(a0)
  21:src/kernel.cpp ****         switch(code) {
 164              		.loc 1 21 25
 165 00d0 83370705 		ld	a5,80(a4)
 166 00d4 2334F4FA 		sd	a5,-88(s0)
  22:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_alloc: // mem_alloc(size_t size) a1 - size
 167              		.loc 1 22 9 is_stmt 1
 168              	.LBB49:
  22:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_alloc: // mem_alloc(size_t size) a1 - size
 169              		.loc 1 22 16 is_stmt 0
 170 00d8 833784FA 		ld	a5,-88(s0)
 171 00dc 93061003 		li	a3,49
 172 00e0 63E2F620 		bgtu	a5,a3,.L7
 173 00e4 93972700 		slli	a5,a5,2
 174 00e8 97060000 		lla	a3,.L9
 174      93860600 
 175 00f0 B387D700 		add	a5,a5,a3
 176 00f4 83A70700 		lw	a5,0(a5)
 177 00f8 B387D700 		add	a5,a5,a3
 178 00fc 67800700 		jr	a5
GAS LISTING /tmp/cciilwih.s 			page 9


 179              		.section	.rodata
 180              		.align	2
 181              		.align	2
 182              	.L9:
 183 0000 00000000 		.word	.L7-.L9
 184 0004 00000000 		.word	.L19-.L9
 185 0008 00000000 		.word	.L18-.L9
 186 000c 00000000 		.word	.L7-.L9
 187 0010 00000000 		.word	.L7-.L9
 188 0014 00000000 		.word	.L7-.L9
 189 0018 00000000 		.word	.L7-.L9
 190 001c 00000000 		.word	.L7-.L9
 191 0020 00000000 		.word	.L7-.L9
 192 0024 00000000 		.word	.L7-.L9
 193 0028 00000000 		.word	.L7-.L9
 194 002c 00000000 		.word	.L7-.L9
 195 0030 00000000 		.word	.L7-.L9
 196 0034 00000000 		.word	.L7-.L9
 197 0038 00000000 		.word	.L7-.L9
 198 003c 00000000 		.word	.L7-.L9
 199 0040 00000000 		.word	.L7-.L9
 200 0044 00000000 		.word	.L17-.L9
 201 0048 00000000 		.word	.L16-.L9
 202 004c 00000000 		.word	.L15-.L9
 203 0050 00000000 		.word	.L14-.L9
 204 0054 00000000 		.word	.L7-.L9
 205 0058 00000000 		.word	.L7-.L9
 206 005c 00000000 		.word	.L7-.L9
 207 0060 00000000 		.word	.L7-.L9
 208 0064 00000000 		.word	.L7-.L9
 209 0068 00000000 		.word	.L7-.L9
 210 006c 00000000 		.word	.L7-.L9
 211 0070 00000000 		.word	.L7-.L9
 212 0074 00000000 		.word	.L7-.L9
 213 0078 00000000 		.word	.L7-.L9
 214 007c 00000000 		.word	.L7-.L9
 215 0080 00000000 		.word	.L7-.L9
 216 0084 00000000 		.word	.L13-.L9
 217 0088 00000000 		.word	.L12-.L9
 218 008c 00000000 		.word	.L11-.L9
 219 0090 00000000 		.word	.L10-.L9
 220 0094 00000000 		.word	.L7-.L9
 221 0098 00000000 		.word	.L7-.L9
 222 009c 00000000 		.word	.L7-.L9
 223 00a0 00000000 		.word	.L7-.L9
 224 00a4 00000000 		.word	.L7-.L9
 225 00a8 00000000 		.word	.L7-.L9
 226 00ac 00000000 		.word	.L7-.L9
 227 00b0 00000000 		.word	.L7-.L9
 228 00b4 00000000 		.word	.L7-.L9
 229 00b8 00000000 		.word	.L7-.L9
 230 00bc 00000000 		.word	.L7-.L9
 231 00c0 00000000 		.word	.L7-.L9
 232 00c4 00000000 		.word	.L8-.L9
 233              		.text
 234              	.L19:
 235              	.LBB50:
GAS LISTING /tmp/cciilwih.s 			page 10


  23:src/kernel.cpp ****             {
 236              		.loc 1 23 13 is_stmt 1
  24:src/kernel.cpp ****                 size_t size = PCB::running->registers[11];
 237              		.loc 1 24 13
 238              	.LBB51:
  25:src/kernel.cpp ****                 size = MemoryAllocator::blocksInSize(size);
 239              		.loc 1 25 17
  25:src/kernel.cpp ****                 size = MemoryAllocator::blocksInSize(size);
 240              		.loc 1 25 24 is_stmt 0
 241 0100 03358705 		ld	a0,88(a4)
 242              	.LVL1:
  26:src/kernel.cpp **** 
 243              		.loc 1 26 17 is_stmt 1
 244              	.LBB52:
 245              	.LBB53:
 246              		.file 3 "src/../h/MemoryAllocator.h"
   1:src/../h/MemoryAllocator.h **** #ifndef PROJECT_BASE_MEMORYALLOCATOR_H
   2:src/../h/MemoryAllocator.h **** #define PROJECT_BASE_MEMORYALLOCATOR_H
   3:src/../h/MemoryAllocator.h **** 
   4:src/../h/MemoryAllocator.h **** #include "hw.h"
   5:src/../h/MemoryAllocator.h **** 
   6:src/../h/MemoryAllocator.h **** class MemoryAllocator {
   7:src/../h/MemoryAllocator.h **** public:
   8:src/../h/MemoryAllocator.h ****     /*
   9:src/../h/MemoryAllocator.h ****     Alocira (najmanje) size bajtova memorije, zaokruženo i poravnato na blokove veličine MEM_BLOC
  10:src/../h/MemoryAllocator.h ****     Svaki alocirani segment ima zaglavlje sa velicinom tog segmenta(vraca se adresa nakon tog zagla
  11:src/../h/MemoryAllocator.h **** 
  12:src/../h/MemoryAllocator.h ****     Vraća:
  13:src/../h/MemoryAllocator.h ****     pokazivač na alocirani deo memorije u slučaju uspeha, nullptr u slučaju neuspeha
  14:src/../h/MemoryAllocator.h **** 
  15:src/../h/MemoryAllocator.h ****     Radi se po algoritmu first fit(alociramo prvi segment koji je >= size). Ako je preostao prostor
  16:src/../h/MemoryAllocator.h ****     jednog bloka, taj preostali prostor se pridruzuje ovom koji smo sad alocirali(jer nema poente d
  17:src/../h/MemoryAllocator.h ****     */
  18:src/../h/MemoryAllocator.h ****     static void* mem_alloc(size_t size);
  19:src/../h/MemoryAllocator.h ****     /*
  20:src/../h/MemoryAllocator.h ****     Oslobađa prostor prethodno zauzet pomoću mem_alloc.
  21:src/../h/MemoryAllocator.h ****     Vraća 0 u slučaju uspeha, BAD_POINTER  flag ako je dostavljen los pokazivac.
  22:src/../h/MemoryAllocator.h ****     Ako je moguce, spaja dva susedna slobodna segmenta u jedan veci
  23:src/../h/MemoryAllocator.h ****     */
  24:src/../h/MemoryAllocator.h ****     static int mem_free(void* memSegment);
  25:src/../h/MemoryAllocator.h **** 
  26:src/../h/MemoryAllocator.h ****     enum memFreeFlags {
  27:src/../h/MemoryAllocator.h ****         BAD_POINTER = -1 // nije koriscen pokazviac iz mem_alloc
  28:src/../h/MemoryAllocator.h ****     };
  29:src/../h/MemoryAllocator.h **** 
  30:src/../h/MemoryAllocator.h ****     // Vraca minimalan potreban broj blokova za alokaciju memorije velicine size bajtova
  31:src/../h/MemoryAllocator.h ****     static inline size_t sizeInBlocks(size_t size) {
  32:src/../h/MemoryAllocator.h ****         return (size / MEM_BLOCK_SIZE) + (size % MEM_BLOCK_SIZE > 0);
  33:src/../h/MemoryAllocator.h ****     }
  34:src/../h/MemoryAllocator.h **** 
  35:src/../h/MemoryAllocator.h ****     // Vraca velicinu numOfBlocks blokova u bajtovima
  36:src/../h/MemoryAllocator.h ****     static inline size_t blocksInSize(size_t numOfBlocks) {
  37:src/../h/MemoryAllocator.h ****         return numOfBlocks * MEM_BLOCK_SIZE;
 247              		.loc 3 37 9
 248              	.LBE53:
 249              	.LBE52:
  28:src/kernel.cpp ****                 break;
GAS LISTING /tmp/cciilwih.s 			page 11


 250              		.loc 1 28 17
  28:src/kernel.cpp ****                 break;
 251              		.loc 1 28 81 is_stmt 0
 252 0104 13156500 		slli	a0,a0,6
 253              	.LVL2:
 254 0108 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 254      E7800000 
 255              	.LVL3:
  28:src/kernel.cpp ****                 break;
 256              		.loc 1 28 31
 257 0110 97070000 		la	a5,_ZN3PCB7runningE
 257      83B70700 
 258 0118 83B70700 		ld	a5,0(a5)
 259 011c 83B78701 		ld	a5,24(a5)
  28:src/kernel.cpp ****                 break;
 260              		.loc 1 28 45
 261 0120 23B8A704 		sd	a0,80(a5)
  29:src/kernel.cpp ****             }
 262              		.loc 1 29 17 is_stmt 1
 263              	.L20:
 264              	.LBE51:
 265              	.LBE50:
 266              	.LBE49:
 121:src/kernel.cpp ****         Kernel::w_sstatus(sstatus);
 267              		.loc 1 121 9
 121:src/kernel.cpp ****         Kernel::w_sstatus(sstatus);
 268              		.loc 1 121 23 is_stmt 0
 269 0124 833704FD 		ld	a5,-48(s0)
 270              	.LVL4:
 271              	.LBB67:
 272              	.LBB68:
  55:src/../h/kernel.h ****     }
 273              		.loc 2 55 9 is_stmt 1
  55:src/../h/kernel.h ****     }
 274              		.loc 2 55 69 is_stmt 0
 275              	#APP
 276              	# 55 "src/../h/kernel.h" 1
 277              		csrw sepc, a5
 278              	# 0 "" 2
 279              	.LVL5:
 280              	#NO_APP
 281              	.LBE68:
 282              	.LBE67:
 122:src/kernel.cpp ****         return;
 283              		.loc 1 122 9 is_stmt 1
 122:src/kernel.cpp ****         return;
 284              		.loc 1 122 26 is_stmt 0
 285 012c 833784FC 		ld	a5,-56(s0)
 286              	.LVL6:
 287              	.LBB69:
 288              	.LBB70:
 132:src/../h/kernel.h ****     }
 133:src/../h/kernel.h **** 
 134:src/../h/kernel.h ****     // write register sstatus
 135:src/../h/kernel.h ****     static void w_sstatus(size_t sstatus) {
 136:src/../h/kernel.h ****         __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 289              		.loc 2 136 9 is_stmt 1
GAS LISTING /tmp/cciilwih.s 			page 12


 290              		.loc 2 136 81 is_stmt 0
 291              	#APP
 292              	# 136 "src/../h/kernel.h" 1
 137              	    }
 293              		csrw sstatus, a5
 294              	# 0 "" 2
 295              	.LVL7:
 296              	#NO_APP
 297              	.LBE70:
 298              	.LBE69:
 123:src/kernel.cpp ****     }
 299              		.loc 1 123 9 is_stmt 1
 300              	.L3:
 301              	.LBE48:
 302              	.LBE47:
 141:src/kernel.cpp ****     }
 142:src/kernel.cpp **** 
 143:src/kernel.cpp **** }
 303              		.loc 1 143 1 is_stmt 0
 304 0134 83308105 		ld	ra,88(sp)
 305              		.cfi_remember_state
 306              		.cfi_restore 1
 307 0138 03340105 		ld	s0,80(sp)
 308              		.cfi_restore 8
 309              		.cfi_def_cfa 2, 96
 310 013c 83348104 		ld	s1,72(sp)
 311              		.cfi_restore 9
 312 0140 03390104 		ld	s2,64(sp)
 313              		.cfi_restore 18
 314 0144 13010106 		addi	sp,sp,96
 315              		.cfi_def_cfa_offset 0
 316 0148 67800000 		jr	ra
 317              	.L18:
 318              		.cfi_restore_state
 319              	.LBB79:
 320              	.LBB72:
 321              	.LBB71:
 322              	.LBB66:
  31:src/kernel.cpp ****             {
 323              		.loc 1 31 13 is_stmt 1
  32:src/kernel.cpp ****                 void* memSegment = (void*)PCB::running->registers[11];
 324              		.loc 1 32 13
 325              	.LBB54:
  33:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)MemoryAllocator::mem_free(memSegment);
 326              		.loc 1 33 17
 327              	.LVL8:
  34:src/kernel.cpp ****                 break;
 328              		.loc 1 34 17
  34:src/kernel.cpp ****                 break;
 329              		.loc 1 34 80 is_stmt 0
 330 014c 03358705 		ld	a0,88(a4)
 331 0150 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 331      E7800000 
 332              	.LVL9:
  34:src/kernel.cpp ****                 break;
 333              		.loc 1 34 31
 334 0158 97070000 		la	a5,_ZN3PCB7runningE
GAS LISTING /tmp/cciilwih.s 			page 13


 334      83B70700 
 335 0160 83B70700 		ld	a5,0(a5)
 336 0164 83B78701 		ld	a5,24(a5)
  34:src/kernel.cpp ****                 break;
 337              		.loc 1 34 45
 338 0168 23B8A704 		sd	a0,80(a5)
  35:src/kernel.cpp ****             }
 339              		.loc 1 35 17 is_stmt 1
 340 016c 6FF09FFB 		j	.L20
 341              	.L15:
 342              	.LBE54:
  37:src/kernel.cpp ****             {
 343              		.loc 1 37 13
  38:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
 344              		.loc 1 38 13
  39:src/kernel.cpp ****                 PCB::dispatch();
 345              		.loc 1 39 17
  39:src/kernel.cpp ****                 PCB::dispatch();
 346              		.loc 1 39 39 is_stmt 0
 347 0170 97070000 		la	a5,_ZN3PCB16timeSliceCounterE
 347      83B70700 
 348 0178 23B00700 		sd	zero,0(a5)
  40:src/kernel.cpp ****                 break;
 349              		.loc 1 40 17 is_stmt 1
  40:src/kernel.cpp ****                 break;
 350              		.loc 1 40 30 is_stmt 0
 351 017c 97000000 		call	_ZN3PCB8dispatchEv@plt
 351      E7800000 
 352              	.LVL10:
  41:src/kernel.cpp ****             }
 353              		.loc 1 41 17 is_stmt 1
 354 0184 6FF01FFA 		j	.L20
 355              	.L16:
  43:src/kernel.cpp ****             {
 356              		.loc 1 43 13
  44:src/kernel.cpp ****                 PCB::running->finished = true;
 357              		.loc 1 44 13
  45:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
 358              		.loc 1 45 17
  45:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
 359              		.loc 1 45 40 is_stmt 0
 360 0188 93071000 		li	a5,1
 361 018c 2304F502 		sb	a5,40(a0)
  46:src/kernel.cpp ****                 PCB::dispatch();
 362              		.loc 1 46 17 is_stmt 1
  46:src/kernel.cpp ****                 PCB::dispatch();
 363              		.loc 1 46 39 is_stmt 0
 364 0190 97070000 		la	a5,_ZN3PCB16timeSliceCounterE
 364      83B70700 
 365 0198 23B00700 		sd	zero,0(a5)
  47:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)0;
 366              		.loc 1 47 17 is_stmt 1
  47:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)0;
 367              		.loc 1 47 30 is_stmt 0
 368 019c 97000000 		call	_ZN3PCB8dispatchEv@plt
 368      E7800000 
 369              	.LVL11:
GAS LISTING /tmp/cciilwih.s 			page 14


  48:src/kernel.cpp ****                 break;
 370              		.loc 1 48 17 is_stmt 1
  48:src/kernel.cpp ****                 break;
 371              		.loc 1 48 31 is_stmt 0
 372 01a4 97070000 		la	a5,_ZN3PCB7runningE
 372      83B70700 
 373 01ac 83B70700 		ld	a5,0(a5)
 374 01b0 83B78701 		ld	a5,24(a5)
  48:src/kernel.cpp ****                 break;
 375              		.loc 1 48 45
 376 01b4 23B80704 		sd	zero,80(a5)
  49:src/kernel.cpp ****             }
 377              		.loc 1 49 17 is_stmt 1
 378 01b8 6FF0DFF6 		j	.L20
 379              	.L14:
  51:src/kernel.cpp ****             {
 380              		.loc 1 51 13
  52:src/kernel.cpp ****                 PCB **handle = (PCB **) PCB::running->registers[11];
 381              		.loc 1 52 13
 382              	.LBB55:
  53:src/kernel.cpp ****                 Scheduler::put(*handle);
 383              		.loc 1 53 17
  53:src/kernel.cpp ****                 Scheduler::put(*handle);
 384              		.loc 1 53 67 is_stmt 0
 385 01bc 83378705 		ld	a5,88(a4)
 386              	.LVL12:
  54:src/kernel.cpp ****                 break;
 387              		.loc 1 54 17 is_stmt 1
  54:src/kernel.cpp ****                 break;
 388              		.loc 1 54 31 is_stmt 0
 389 01c0 03B50700 		ld	a0,0(a5)
 390 01c4 97000000 		call	_ZN9Scheduler3putEP3PCB@plt
 390      E7800000 
 391              	.LVL13:
  55:src/kernel.cpp ****             }
 392              		.loc 1 55 17 is_stmt 1
 393 01cc 6FF09FF5 		j	.L20
 394              	.L17:
 395              	.LBE55:
  57:src/kernel.cpp ****             {
 396              		.loc 1 57 13
  58:src/kernel.cpp ****                 // argumenti
 397              		.loc 1 58 13
 398              	.LBB56:
  60:src/kernel.cpp ****                 void *arg = (void*)PCB::running->registers[13];
 399              		.loc 1 60 17
 400              	.LVL14:
  61:src/kernel.cpp **** 
 401              		.loc 1 61 17
  63:src/kernel.cpp ****                 *handle = PCB::createProccess(main, arg);
 402              		.loc 1 63 17
  63:src/kernel.cpp ****                 *handle = PCB::createProccess(main, arg);
 403              		.loc 1 63 65 is_stmt 0
 404 01d0 83348705 		ld	s1,88(a4)
 405              	.LVL15:
  64:src/kernel.cpp **** 
 406              		.loc 1 64 17 is_stmt 1
GAS LISTING /tmp/cciilwih.s 			page 15


  64:src/kernel.cpp **** 
 407              		.loc 1 64 46 is_stmt 0
 408 01d4 83358706 		ld	a1,104(a4)
 409 01d8 03350706 		ld	a0,96(a4)
 410 01dc 97000000 		call	_ZN3PCB14createProccessEPFvvEPv@plt
 410      E7800000 
 411              	.LVL16:
  64:src/kernel.cpp **** 
 412              		.loc 1 64 25
 413 01e4 23B0A400 		sd	a0,0(s1)
  67:src/kernel.cpp **** 
 414              		.loc 1 67 17 is_stmt 1
  67:src/kernel.cpp **** 
 415              		.loc 1 67 31 is_stmt 0
 416 01e8 97070000 		la	a5,_ZN3PCB7runningE
 416      83B70700 
 417 01f0 83B70700 		ld	a5,0(a5)
 418 01f4 03B78701 		ld	a4,24(a5)
  67:src/kernel.cpp **** 
 419              		.loc 1 67 45
 420 01f8 23389704 		sd	s1,80(a4)
  69:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
 421              		.loc 1 69 17 is_stmt 1
  69:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
 422              		.loc 1 69 20 is_stmt 0
 423 01fc 03B70400 		ld	a4,0(s1)
  69:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
 424              		.loc 1 69 17
 425 0200 E30207F2 		beqz	a4,.L20
  71:src/kernel.cpp ****                 (*handle)->stack = stack;
 426              		.loc 1 71 17 is_stmt 1
  71:src/kernel.cpp ****                 (*handle)->stack = stack;
 427              		.loc 1 71 56 is_stmt 0
 428 0204 83B78701 		ld	a5,24(a5)
  71:src/kernel.cpp ****                 (*handle)->stack = stack;
 429              		.loc 1 71 68
 430 0208 83B70707 		ld	a5,112(a5)
 431              	.LVL17:
  72:src/kernel.cpp ****                 (*handle)->registers[2] = (size_t)&stack[DEFAULT_STACK_SIZE]; // sp(x2)
 432              		.loc 1 72 17 is_stmt 1
  72:src/kernel.cpp ****                 (*handle)->registers[2] = (size_t)&stack[DEFAULT_STACK_SIZE]; // sp(x2)
 433              		.loc 1 72 34 is_stmt 0
 434 020c 2334F700 		sd	a5,8(a4)
  73:src/kernel.cpp **** 
 435              		.loc 1 73 17 is_stmt 1
  73:src/kernel.cpp **** 
 436              		.loc 1 73 51 is_stmt 0
 437 0210 37870000 		li	a4,32768
 438 0214 B387E700 		add	a5,a5,a4
 439              	.LVL18:
  73:src/kernel.cpp **** 
 440              		.loc 1 73 18
 441 0218 03B70400 		ld	a4,0(s1)
  73:src/kernel.cpp **** 
 442              		.loc 1 73 28
 443 021c 03378701 		ld	a4,24(a4)
  73:src/kernel.cpp **** 
GAS LISTING /tmp/cciilwih.s 			page 16


 444              		.loc 1 73 41
 445 0220 2338F700 		sd	a5,16(a4)
  75:src/kernel.cpp ****             }
 446              		.loc 1 75 17 is_stmt 1
 447 0224 6FF01FF0 		j	.L20
 448              	.LVL19:
 449              	.L13:
 450              	.LBE56:
  77:src/kernel.cpp ****             {
 451              		.loc 1 77 13
  78:src/kernel.cpp ****                 SCB **handle = (SCB**) PCB::running->registers[11];
 452              		.loc 1 78 13
 453              	.LBB57:
  79:src/kernel.cpp ****                 size_t init = (int) PCB::running->registers[12];
 454              		.loc 1 79 17
  79:src/kernel.cpp ****                 size_t init = (int) PCB::running->registers[12];
 455              		.loc 1 79 66 is_stmt 0
 456 0228 83348705 		ld	s1,88(a4)
 457              	.LVL20:
  80:src/kernel.cpp **** 
 458              		.loc 1 80 17 is_stmt 1
  80:src/kernel.cpp **** 
 459              		.loc 1 80 31 is_stmt 0
 460 022c 03290706 		lw	s2,96(a4)
 461              	.LVL21:
  82:src/kernel.cpp **** 
 462              		.loc 1 82 17 is_stmt 1
 463              	.LBB58:
 464              	.LBB59:
 465              		.file 4 "src/../h/SCB.h"
   1:src/../h/SCB.h **** #ifndef PROJECT_BASE_SCB_H
   2:src/../h/SCB.h **** #define PROJECT_BASE_SCB_H
   3:src/../h/SCB.h **** 
   4:src/../h/SCB.h **** #include "PCB.h"
   5:src/../h/SCB.h **** #include "Scheduler.h"
   6:src/../h/SCB.h **** 
   7:src/../h/SCB.h **** class SCB { // Semaphore Control Block
   8:src/../h/SCB.h **** public:
   9:src/../h/SCB.h ****     int getSemValue() const {
  10:src/../h/SCB.h ****         return semValue;
  11:src/../h/SCB.h ****     }
  12:src/../h/SCB.h **** 
  13:src/../h/SCB.h ****     // smanjuje vrednost semValue i ako ona padne manje od 0, vraca true(tekuci proces treba da se 
  14:src/../h/SCB.h ****     bool wait();
  15:src/../h/SCB.h **** 
  16:src/../h/SCB.h ****     // povecava vrednost semValue i ako je ona posle povecanja <= 0, vraca se proces koji treba da 
  17:src/../h/SCB.h ****     PCB* signal();
  18:src/../h/SCB.h **** 
  19:src/../h/SCB.h ****     void* operator new(size_t size);
  20:src/../h/SCB.h ****     void operator delete(void* memSegment);
  21:src/../h/SCB.h **** 
  22:src/../h/SCB.h ****     static SCB* createSemaphore(int semValue = 1) {
  23:src/../h/SCB.h ****         return new SCB(semValue);
 466              		.loc 4 23 9
 467              		.loc 4 23 32 is_stmt 0
 468 0230 13058001 		li	a0,24
 469 0234 97000000 		call	_ZN3SCBnwEm@plt
GAS LISTING /tmp/cciilwih.s 			page 17


 469      E7800000 
 470              	.LVL22:
 471              	.LBB60:
 472              	.LBB61:
  24:src/../h/SCB.h ****     }
  25:src/../h/SCB.h **** 
  26:src/../h/SCB.h ****     // Pre zatvaranja svim procesima koji su cekali na semaforu signalizira da je semafor obrisan i
  27:src/../h/SCB.h ****     void signalClosing();
  28:src/../h/SCB.h **** private:
  29:src/../h/SCB.h ****     SCB(int semValue_ = 1) {
 473              		.loc 4 29 28
 474 023c 23300500 		sd	zero,0(a0)
 475 0240 23340500 		sd	zero,8(a0)
  30:src/../h/SCB.h ****         semValue = semValue_;
 476              		.loc 4 30 9 is_stmt 1
 477              		.loc 4 30 18 is_stmt 0
 478 0244 23282501 		sw	s2,16(a0)
 479              	.LVL23:
 480              	.LBE61:
 481              	.LBE60:
 482              	.LBE59:
 483              	.LBE58:
  82:src/kernel.cpp **** 
 484              		.loc 1 82 27
 485 0248 23B0A400 		sd	a0,0(s1)
  84:src/kernel.cpp ****                 break;
 486              		.loc 1 84 17 is_stmt 1
  84:src/kernel.cpp ****                 break;
 487              		.loc 1 84 31 is_stmt 0
 488 024c 97070000 		la	a5,_ZN3PCB7runningE
 488      83B70700 
 489 0254 83B70700 		ld	a5,0(a5)
 490 0258 83B78701 		ld	a5,24(a5)
  84:src/kernel.cpp ****                 break;
 491              		.loc 1 84 45
 492 025c 23B89704 		sd	s1,80(a5)
  85:src/kernel.cpp ****             }
 493              		.loc 1 85 17 is_stmt 1
 494 0260 6FF05FEC 		j	.L20
 495              	.LVL24:
 496              	.L11:
 497              	.LBE57:
  87:src/kernel.cpp ****             {
 498              		.loc 1 87 13
  88:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 499              		.loc 1 88 13
 500              	.LBB62:
  89:src/kernel.cpp **** 
 501              		.loc 1 89 17
  91:src/kernel.cpp ****                 break;
 502              		.loc 1 91 17
  91:src/kernel.cpp ****                 break;
 503              		.loc 1 91 56 is_stmt 0
 504 0264 03358705 		ld	a0,88(a4)
 505 0268 97000000 		call	_ZN3SCB4waitEv@plt
 505      E7800000 
 506              	.LVL25:
GAS LISTING /tmp/cciilwih.s 			page 18


  91:src/kernel.cpp ****                 break;
 507              		.loc 1 91 31
 508 0270 97070000 		la	a5,_ZN3PCB7runningE
 508      83B70700 
 509 0278 83B70700 		ld	a5,0(a5)
 510 027c 83B78701 		ld	a5,24(a5)
  91:src/kernel.cpp ****                 break;
 511              		.loc 1 91 45
 512 0280 23B8A704 		sd	a0,80(a5)
  92:src/kernel.cpp ****             }
 513              		.loc 1 92 17 is_stmt 1
 514 0284 6FF01FEA 		j	.L20
 515              	.L10:
 516              	.LBE62:
  94:src/kernel.cpp ****             {
 517              		.loc 1 94 13
  95:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 518              		.loc 1 95 13
 519              	.LBB63:
  96:src/kernel.cpp **** 
 520              		.loc 1 96 17
 521              	.LVL26:
  98:src/kernel.cpp ****                 break;
 522              		.loc 1 98 17
  98:src/kernel.cpp ****                 break;
 523              		.loc 1 98 66 is_stmt 0
 524 0288 03358705 		ld	a0,88(a4)
 525 028c 97000000 		call	_ZN3SCB6signalEv@plt
 525      E7800000 
 526              	.LVL27:
  98:src/kernel.cpp ****                 break;
 527              		.loc 1 98 31
 528 0294 97070000 		la	a5,_ZN3PCB7runningE
 528      83B70700 
 529 029c 83B70700 		ld	a5,0(a5)
 530 02a0 83B78701 		ld	a5,24(a5)
  98:src/kernel.cpp ****                 break;
 531              		.loc 1 98 45
 532 02a4 23B8A704 		sd	a0,80(a5)
  99:src/kernel.cpp ****             }
 533              		.loc 1 99 17 is_stmt 1
 534 02a8 6FF0DFE7 		j	.L20
 535              	.L12:
 536              	.LBE63:
 101:src/kernel.cpp ****             {
 537              		.loc 1 101 13
 102:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 538              		.loc 1 102 13
 539              	.LBB64:
 103:src/kernel.cpp **** 
 540              		.loc 1 103 17
 103:src/kernel.cpp **** 
 541              		.loc 1 103 61 is_stmt 0
 542 02ac 83348705 		ld	s1,88(a4)
 543              	.LVL28:
 105:src/kernel.cpp ****                 delete sem; // destruktor ce signalizirati svim procesima da je obrisan
 544              		.loc 1 105 17 is_stmt 1
GAS LISTING /tmp/cciilwih.s 			page 19


 105:src/kernel.cpp ****                 delete sem; // destruktor ce signalizirati svim procesima da je obrisan
 545              		.loc 1 105 35 is_stmt 0
 546 02b0 13850400 		mv	a0,s1
 547 02b4 97000000 		call	_ZN3SCB13signalClosingEv@plt
 547      E7800000 
 548              	.LVL29:
 106:src/kernel.cpp **** 
 549              		.loc 1 106 17 is_stmt 1
 106:src/kernel.cpp **** 
 550              		.loc 1 106 27 is_stmt 0
 551 02bc E38404E6 		beqz	s1,.L20
 106:src/kernel.cpp **** 
 552              		.loc 1 106 24 discriminator 1
 553 02c0 13850400 		mv	a0,s1
 554 02c4 97000000 		call	_ZN3SCBdlEPv@plt
 554      E7800000 
 555              	.LVL30:
 556 02cc 6FF09FE5 		j	.L20
 557              	.LVL31:
 558              	.L8:
 559              	.LBE64:
 110:src/kernel.cpp ****             {
 560              		.loc 1 110 13 is_stmt 1
 111:src/kernel.cpp ****                 size_t time = (size_t)PCB::running->registers[11];
 561              		.loc 1 111 13
 562              	.LBB65:
 112:src/kernel.cpp ****                 PCB::running->timeSleeping = time;
 563              		.loc 1 112 17
 112:src/kernel.cpp ****                 PCB::running->timeSleeping = time;
 564              		.loc 1 112 24 is_stmt 0
 565 02d0 83378705 		ld	a5,88(a4)
 566              	.LVL32:
 113:src/kernel.cpp ****                 SleepingProcesses::putToSleep(PCB::running);
 567              		.loc 1 113 17 is_stmt 1
 113:src/kernel.cpp ****                 SleepingProcesses::putToSleep(PCB::running);
 568              		.loc 1 113 44 is_stmt 0
 569 02d4 2338F502 		sd	a5,48(a0)
 114:src/kernel.cpp ****                 break;
 570              		.loc 1 114 17 is_stmt 1
 114:src/kernel.cpp ****                 break;
 571              		.loc 1 114 46 is_stmt 0
 572 02d8 97000000 		call	_ZN17SleepingProcesses10putToSleepEP3PCB@plt
 572      E7800000 
 573              	.LVL33:
 115:src/kernel.cpp ****             }
 574              		.loc 1 115 17 is_stmt 1
 575 02e0 6FF05FE4 		j	.L20
 576              	.L7:
 577              	.LBE65:
 117:src/kernel.cpp ****                 printError();
 578              		.loc 1 117 13
 118:src/kernel.cpp ****                 break;
 579              		.loc 1 118 17
 118:src/kernel.cpp ****                 break;
 580              		.loc 1 118 27 is_stmt 0
 581 02e4 97000000 		call	_Z10printErrorv@plt
 581      E7800000 
GAS LISTING /tmp/cciilwih.s 			page 20


 582              	.LVL34:
 119:src/kernel.cpp ****         }
 583              		.loc 1 119 17 is_stmt 1
 584 02ec 6FF09FE3 		j	.L20
 585              	.L26:
 586              	.LBE66:
 587              	.LBE71:
 588              	.LBE72:
 126:src/kernel.cpp ****         SleepingProcesses::wakeUp(); // budi uspavane procese ako su postojali, ako ne smanjuje per
 589              		.loc 1 126 9
 126:src/kernel.cpp ****         SleepingProcesses::wakeUp(); // budi uspavane procese ako su postojali, ako ne smanjuje per
 590              		.loc 1 126 30 is_stmt 0
 591 02f0 97040000 		la	s1,_ZN3PCB16timeSliceCounterE
 591      83B40400 
 592 02f8 83B70400 		ld	a5,0(s1)
 593 02fc 93871700 		addi	a5,a5,1
 594 0300 23B0F400 		sd	a5,0(s1)
 127:src/kernel.cpp ****         if(PCB::timeSliceCounter >= PCB::running->timeSlice) {
 595              		.loc 1 127 9 is_stmt 1
 127:src/kernel.cpp ****         if(PCB::timeSliceCounter >= PCB::running->timeSlice) {
 596              		.loc 1 127 34 is_stmt 0
 597 0304 97000000 		call	_ZN17SleepingProcesses6wakeUpEv@plt
 597      E7800000 
 598              	.LVL35:
 128:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 599              		.loc 1 128 9 is_stmt 1
 128:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 600              		.loc 1 128 51 is_stmt 0
 601 030c 97070000 		la	a5,_ZN3PCB7runningE
 601      83B70700 
 602 0314 83B70700 		ld	a5,0(a5)
 603 0318 03B70704 		ld	a4,64(a5)
 128:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 604              		.loc 1 128 34
 605 031c 83B70400 		ld	a5,0(s1)
 128:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 606              		.loc 1 128 9
 607 0320 63F8E700 		bleu	a4,a5,.L28
 608              	.L22:
 134:src/kernel.cpp ****     }
 609              		.loc 1 134 9 is_stmt 1
 610              	.LVL36:
 611              	.LBB73:
 612              	.LBB74:
  95:src/../h/kernel.h ****     }
 613              		.loc 2 95 9
  95:src/../h/kernel.h ****     }
 614              		.loc 2 95 68 is_stmt 0
 615 0324 93072000 		li	a5,2
 616              	#APP
 617              	# 95 "src/../h/kernel.h" 1
  96:src/../h/kernel.h **** 
 618              		csrc sip, a5
 619              	# 0 "" 2
 620              		.loc 2 96 5
 621              	#NO_APP
 622 032c 6FF09FE0 		j	.L3
GAS LISTING /tmp/cciilwih.s 			page 21


 623              	.LVL37:
 624              	.L28:
 625              	.LBE74:
 626              	.LBE73:
 129:src/kernel.cpp ****             PCB::dispatch(); // vrsimo promenu konteksta ako je istekao time slice procesa
 627              		.loc 1 129 13 is_stmt 1
 129:src/kernel.cpp ****             PCB::dispatch(); // vrsimo promenu konteksta ako je istekao time slice procesa
 628              		.loc 1 129 35 is_stmt 0
 629 0330 23B00400 		sd	zero,0(s1)
 130:src/kernel.cpp ****             Kernel::w_sepc(sepc);
 630              		.loc 1 130 13 is_stmt 1
 130:src/kernel.cpp ****             Kernel::w_sepc(sepc);
 631              		.loc 1 130 26 is_stmt 0
 632 0334 97000000 		call	_ZN3PCB8dispatchEv@plt
 632      E7800000 
 633              	.LVL38:
 131:src/kernel.cpp ****             Kernel::w_sstatus(sstatus);
 634              		.loc 1 131 13 is_stmt 1
 131:src/kernel.cpp ****             Kernel::w_sstatus(sstatus);
 635              		.loc 1 131 27 is_stmt 0
 636 033c 833704FD 		ld	a5,-48(s0)
 637              	.LVL39:
 638              	.LBB75:
 639              	.LBB76:
  55:src/../h/kernel.h ****     }
 640              		.loc 2 55 9 is_stmt 1
  55:src/../h/kernel.h ****     }
 641              		.loc 2 55 69 is_stmt 0
 642              	#APP
 643              	# 55 "src/../h/kernel.h" 1
 644              		csrw sepc, a5
 645              	# 0 "" 2
 646              	.LVL40:
 647              	#NO_APP
 648              	.LBE76:
 649              	.LBE75:
 132:src/kernel.cpp ****         }
 650              		.loc 1 132 13 is_stmt 1
 132:src/kernel.cpp ****         }
 651              		.loc 1 132 30 is_stmt 0
 652 0344 833784FC 		ld	a5,-56(s0)
 653              	.LVL41:
 654              	.LBB77:
 655              	.LBB78:
 136:src/../h/kernel.h ****     }
 656              		.loc 2 136 9 is_stmt 1
 136:src/../h/kernel.h ****     }
 657              		.loc 2 136 81 is_stmt 0
 658              	#APP
 659              	# 136 "src/../h/kernel.h" 1
 660              		csrw sstatus, a5
 661              	# 0 "" 2
 662              		.loc 2 137 5
 663              	#NO_APP
 664 034c 6FF09FFD 		j	.L22
 665              	.LVL42:
 666              	.L27:
GAS LISTING /tmp/cciilwih.s 			page 22


 667              	.LBE78:
 668              	.LBE77:
 137:src/kernel.cpp ****     }
 669              		.loc 1 137 9 is_stmt 1
 137:src/kernel.cpp ****     }
 670              		.loc 1 137 24 is_stmt 0
 671 0350 97000000 		call	console_handler@plt
 671      E7800000 
 672              	.LVL43:
 673 0358 6FF0DFDD 		j	.L3
 674              	.LBE79:
 675              		.cfi_endproc
 676              	.LFE40:
 678              	.Letext0:
 679              		.file 5 "src/../h/hw.h"
 680              		.file 6 "src/../h/PCB.h"
 681              		.file 7 "src/../h/Scheduler.h"
 682              		.file 8 "src/../h/SleepingProcesses.h"
 683              		.file 9 "src/../h/print.h"
 684              		.file 10 "src/../h/console.h"
GAS LISTING /tmp/cciilwih.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 kernel.cpp
     /tmp/cciilwih.s:9      .text:0000000000000000 _ZN6Kernel10popSppSpieEv
     /tmp/cciilwih.s:13     .text:0000000000000000 .L0 
     /tmp/cciilwih.s:14     .text:0000000000000000 .L0 
     /tmp/cciilwih.s:15     .text:0000000000000004 .L0 
     /tmp/cciilwih.s:17     .text:0000000000000008 .L0 
     /tmp/cciilwih.s:19     .text:000000000000000c .L0 
     /tmp/cciilwih.s:21     .text:000000000000000c .L0 
      src/kernel.cpp:11     .text:000000000000000c .L0 
     /tmp/cciilwih.s:27     .text:0000000000000010 .L0 
      src/kernel.cpp:12     .text:0000000000000010 .L0 
     /tmp/cciilwih.s:33     .text:0000000000000014 .L0 
     /tmp/cciilwih.s:34     .text:0000000000000018 .L0 
     /tmp/cciilwih.s:35     .text:0000000000000018 .L0 
     /tmp/cciilwih.s:37     .text:000000000000001c .L0 
     /tmp/cciilwih.s:39     .text:0000000000000020 .L0 
     /tmp/cciilwih.s:45     .text:0000000000000020 interruptHandler
     /tmp/cciilwih.s:48     .text:0000000000000020 .L0 
     /tmp/cciilwih.s:49     .text:0000000000000020 .L0 
     /tmp/cciilwih.s:50     .text:0000000000000024 .L0 
     /tmp/cciilwih.s:55     .text:0000000000000034 .L0 
     /tmp/cciilwih.s:56     .text:0000000000000034 .L0 
     /tmp/cciilwih.s:57     .text:0000000000000034 .L0 
     /tmp/cciilwih.s:58     .text:0000000000000034 .L0 
     /tmp/cciilwih.s:60     .text:0000000000000038 .L0 
     /tmp/cciilwih.s:65     .text:0000000000000038 .L0 
     /tmp/cciilwih.s:66     .text:0000000000000038 .L0 
     /tmp/cciilwih.s:67     .text:0000000000000038 .L0 
   src/../h/kernel.h:37     .text:0000000000000038 .L0 
     /tmp/cciilwih.s:75     .text:0000000000000040 .L0 
     /tmp/cciilwih.s:76     .text:0000000000000040 .L0 
     /tmp/cciilwih.s:80     .text:0000000000000044 .L0 
     /tmp/cciilwih.s:84     .text:0000000000000048 .L0 
     /tmp/cciilwih.s:85     .text:0000000000000048 .L0 
     /tmp/cciilwih.s:86     .text:0000000000000048 .L0 
   src/../h/kernel.h:49     .text:0000000000000048 .L0 
     /tmp/cciilwih.s:94     .text:0000000000000050 .L0 
     /tmp/cciilwih.s:95     .text:0000000000000050 .L0 
     /tmp/cciilwih.s:99     .text:0000000000000054 .L0 
     /tmp/cciilwih.s:103    .text:0000000000000058 .L0 
     /tmp/cciilwih.s:104    .text:0000000000000058 .L0 
     /tmp/cciilwih.s:105    .text:0000000000000058 .L0 
   src/../h/kernel.h:130    .text:0000000000000058 .L0 
     /tmp/cciilwih.s:113    .text:0000000000000060 .L0 
     /tmp/cciilwih.s:114    .text:0000000000000060 .L0 
     /tmp/cciilwih.s:118    .text:0000000000000064 .L0 
     /tmp/cciilwih.s:121    .text:0000000000000068 .L0 
     /tmp/cciilwih.s:122    .text:0000000000000068 .L0 
     /tmp/cciilwih.s:124    .text:000000000000006c .L0 
     /tmp/cciilwih.s:127    .text:0000000000000074 .L0 
     /tmp/cciilwih.s:129    .text:0000000000000078 .L0 
     /tmp/cciilwih.s:132    .text:0000000000000080 .L0 
     /tmp/cciilwih.s:133    .text:0000000000000080 .L0 
     /tmp/cciilwih.s:135    .text:0000000000000084 .L0 
     /tmp/cciilwih.s:140    .text:0000000000000094 .L0 
     /tmp/cciilwih.s:141    .text:0000000000000094 .L0 
GAS LISTING /tmp/cciilwih.s 			page 24


     /tmp/cciilwih.s:143    .text:0000000000000098 .L0 
     /tmp/cciilwih.s:148    .text:00000000000000a8 .L0 
     /tmp/cciilwih.s:149    .text:00000000000000a8 .L0 
     /tmp/cciilwih.s:155    .text:00000000000000b4 .L0 
     /tmp/cciilwih.s:156    .text:00000000000000b4 .L0 
     /tmp/cciilwih.s:160    .text:00000000000000c0 .L0 
     /tmp/cciilwih.s:161    .text:00000000000000c0 .L0 
     /tmp/cciilwih.s:165    .text:00000000000000d0 .L0 
     /tmp/cciilwih.s:169    .text:00000000000000d8 .L0 
     /tmp/cciilwih.s:170    .text:00000000000000d8 .L0 
     /tmp/cciilwih.s:237    .text:0000000000000100 .L0 
     /tmp/cciilwih.s:239    .text:0000000000000100 .L0 
     /tmp/cciilwih.s:240    .text:0000000000000100 .L0 
     /tmp/cciilwih.s:241    .text:0000000000000100 .L0 
     /tmp/cciilwih.s:247    .text:0000000000000104 .L0 
     /tmp/cciilwih.s:250    .text:0000000000000104 .L0 
     /tmp/cciilwih.s:251    .text:0000000000000104 .L0 
     /tmp/cciilwih.s:252    .text:0000000000000104 .L0 
     /tmp/cciilwih.s:257    .text:0000000000000110 .L0 
     /tmp/cciilwih.s:261    .text:0000000000000120 .L0 
     /tmp/cciilwih.s:267    .text:0000000000000124 .L0 
     /tmp/cciilwih.s:268    .text:0000000000000124 .L0 
     /tmp/cciilwih.s:269    .text:0000000000000124 .L0 
     /tmp/cciilwih.s:274    .text:0000000000000128 .L0 
   src/../h/kernel.h:55     .text:0000000000000128 .L0 
     /tmp/cciilwih.s:284    .text:000000000000012c .L0 
     /tmp/cciilwih.s:285    .text:000000000000012c .L0 
     /tmp/cciilwih.s:290    .text:0000000000000130 .L0 
   src/../h/kernel.h:136    .text:0000000000000130 .L0 
     /tmp/cciilwih.s:303    .text:0000000000000134 .L0 
     /tmp/cciilwih.s:304    .text:0000000000000134 .L0 
     /tmp/cciilwih.s:305    .text:0000000000000138 .L0 
     /tmp/cciilwih.s:306    .text:0000000000000138 .L0 
     /tmp/cciilwih.s:308    .text:000000000000013c .L0 
     /tmp/cciilwih.s:309    .text:000000000000013c .L0 
     /tmp/cciilwih.s:311    .text:0000000000000140 .L0 
     /tmp/cciilwih.s:313    .text:0000000000000144 .L0 
     /tmp/cciilwih.s:315    .text:0000000000000148 .L0 
     /tmp/cciilwih.s:318    .text:000000000000014c .L0 
     /tmp/cciilwih.s:324    .text:000000000000014c .L0 
     /tmp/cciilwih.s:326    .text:000000000000014c .L0 
     /tmp/cciilwih.s:328    .text:000000000000014c .L0 
     /tmp/cciilwih.s:329    .text:000000000000014c .L0 
     /tmp/cciilwih.s:330    .text:000000000000014c .L0 
     /tmp/cciilwih.s:334    .text:0000000000000158 .L0 
     /tmp/cciilwih.s:338    .text:0000000000000168 .L0 
     /tmp/cciilwih.s:340    .text:000000000000016c .L0 
     /tmp/cciilwih.s:344    .text:0000000000000170 .L0 
     /tmp/cciilwih.s:345    .text:0000000000000170 .L0 
     /tmp/cciilwih.s:346    .text:0000000000000170 .L0 
     /tmp/cciilwih.s:347    .text:0000000000000170 .L0 
     /tmp/cciilwih.s:350    .text:000000000000017c .L0 
     /tmp/cciilwih.s:351    .text:000000000000017c .L0 
     /tmp/cciilwih.s:354    .text:0000000000000184 .L0 
     /tmp/cciilwih.s:357    .text:0000000000000188 .L0 
     /tmp/cciilwih.s:358    .text:0000000000000188 .L0 
     /tmp/cciilwih.s:359    .text:0000000000000188 .L0 
GAS LISTING /tmp/cciilwih.s 			page 25


     /tmp/cciilwih.s:360    .text:0000000000000188 .L0 
     /tmp/cciilwih.s:363    .text:0000000000000190 .L0 
     /tmp/cciilwih.s:364    .text:0000000000000190 .L0 
     /tmp/cciilwih.s:367    .text:000000000000019c .L0 
     /tmp/cciilwih.s:368    .text:000000000000019c .L0 
     /tmp/cciilwih.s:371    .text:00000000000001a4 .L0 
     /tmp/cciilwih.s:372    .text:00000000000001a4 .L0 
     /tmp/cciilwih.s:376    .text:00000000000001b4 .L0 
     /tmp/cciilwih.s:378    .text:00000000000001b8 .L0 
     /tmp/cciilwih.s:381    .text:00000000000001bc .L0 
     /tmp/cciilwih.s:383    .text:00000000000001bc .L0 
     /tmp/cciilwih.s:384    .text:00000000000001bc .L0 
     /tmp/cciilwih.s:385    .text:00000000000001bc .L0 
     /tmp/cciilwih.s:388    .text:00000000000001c0 .L0 
     /tmp/cciilwih.s:389    .text:00000000000001c0 .L0 
     /tmp/cciilwih.s:393    .text:00000000000001cc .L0 
     /tmp/cciilwih.s:397    .text:00000000000001d0 .L0 
     /tmp/cciilwih.s:399    .text:00000000000001d0 .L0 
     /tmp/cciilwih.s:401    .text:00000000000001d0 .L0 
     /tmp/cciilwih.s:402    .text:00000000000001d0 .L0 
     /tmp/cciilwih.s:403    .text:00000000000001d0 .L0 
     /tmp/cciilwih.s:404    .text:00000000000001d0 .L0 
     /tmp/cciilwih.s:407    .text:00000000000001d4 .L0 
     /tmp/cciilwih.s:408    .text:00000000000001d4 .L0 
     /tmp/cciilwih.s:413    .text:00000000000001e4 .L0 
     /tmp/cciilwih.s:415    .text:00000000000001e8 .L0 
     /tmp/cciilwih.s:416    .text:00000000000001e8 .L0 
     /tmp/cciilwih.s:420    .text:00000000000001f8 .L0 
     /tmp/cciilwih.s:422    .text:00000000000001fc .L0 
     /tmp/cciilwih.s:423    .text:00000000000001fc .L0 
     /tmp/cciilwih.s:425    .text:0000000000000200 .L0 
     /tmp/cciilwih.s:427    .text:0000000000000204 .L0 
     /tmp/cciilwih.s:428    .text:0000000000000204 .L0 
     /tmp/cciilwih.s:430    .text:0000000000000208 .L0 
     /tmp/cciilwih.s:433    .text:000000000000020c .L0 
     /tmp/cciilwih.s:434    .text:000000000000020c .L0 
     /tmp/cciilwih.s:436    .text:0000000000000210 .L0 
     /tmp/cciilwih.s:437    .text:0000000000000210 .L0 
     /tmp/cciilwih.s:441    .text:0000000000000218 .L0 
     /tmp/cciilwih.s:443    .text:000000000000021c .L0 
     /tmp/cciilwih.s:445    .text:0000000000000220 .L0 
     /tmp/cciilwih.s:447    .text:0000000000000224 .L0 
     /tmp/cciilwih.s:452    .text:0000000000000228 .L0 
     /tmp/cciilwih.s:454    .text:0000000000000228 .L0 
     /tmp/cciilwih.s:455    .text:0000000000000228 .L0 
     /tmp/cciilwih.s:456    .text:0000000000000228 .L0 
     /tmp/cciilwih.s:459    .text:000000000000022c .L0 
     /tmp/cciilwih.s:460    .text:000000000000022c .L0 
     /tmp/cciilwih.s:466    .text:0000000000000230 .L0 
     /tmp/cciilwih.s:467    .text:0000000000000230 .L0 
     /tmp/cciilwih.s:468    .text:0000000000000230 .L0 
     /tmp/cciilwih.s:474    .text:000000000000023c .L0 
     /tmp/cciilwih.s:477    .text:0000000000000244 .L0 
     /tmp/cciilwih.s:478    .text:0000000000000244 .L0 
     /tmp/cciilwih.s:485    .text:0000000000000248 .L0 
     /tmp/cciilwih.s:487    .text:000000000000024c .L0 
     /tmp/cciilwih.s:488    .text:000000000000024c .L0 
GAS LISTING /tmp/cciilwih.s 			page 26


     /tmp/cciilwih.s:492    .text:000000000000025c .L0 
     /tmp/cciilwih.s:494    .text:0000000000000260 .L0 
     /tmp/cciilwih.s:499    .text:0000000000000264 .L0 
     /tmp/cciilwih.s:501    .text:0000000000000264 .L0 
     /tmp/cciilwih.s:502    .text:0000000000000264 .L0 
     /tmp/cciilwih.s:503    .text:0000000000000264 .L0 
     /tmp/cciilwih.s:504    .text:0000000000000264 .L0 
     /tmp/cciilwih.s:508    .text:0000000000000270 .L0 
     /tmp/cciilwih.s:512    .text:0000000000000280 .L0 
     /tmp/cciilwih.s:514    .text:0000000000000284 .L0 
     /tmp/cciilwih.s:518    .text:0000000000000288 .L0 
     /tmp/cciilwih.s:520    .text:0000000000000288 .L0 
     /tmp/cciilwih.s:522    .text:0000000000000288 .L0 
     /tmp/cciilwih.s:523    .text:0000000000000288 .L0 
     /tmp/cciilwih.s:524    .text:0000000000000288 .L0 
     /tmp/cciilwih.s:528    .text:0000000000000294 .L0 
     /tmp/cciilwih.s:532    .text:00000000000002a4 .L0 
     /tmp/cciilwih.s:534    .text:00000000000002a8 .L0 
     /tmp/cciilwih.s:538    .text:00000000000002ac .L0 
     /tmp/cciilwih.s:540    .text:00000000000002ac .L0 
     /tmp/cciilwih.s:541    .text:00000000000002ac .L0 
     /tmp/cciilwih.s:542    .text:00000000000002ac .L0 
     /tmp/cciilwih.s:545    .text:00000000000002b0 .L0 
     /tmp/cciilwih.s:546    .text:00000000000002b0 .L0 
     /tmp/cciilwih.s:550    .text:00000000000002bc .L0 
     /tmp/cciilwih.s:551    .text:00000000000002bc .L0 
     /tmp/cciilwih.s:553    .text:00000000000002c0 .L0 
     /tmp/cciilwih.s:561    .text:00000000000002d0 .L0 
     /tmp/cciilwih.s:563    .text:00000000000002d0 .L0 
     /tmp/cciilwih.s:564    .text:00000000000002d0 .L0 
     /tmp/cciilwih.s:565    .text:00000000000002d0 .L0 
     /tmp/cciilwih.s:568    .text:00000000000002d4 .L0 
     /tmp/cciilwih.s:569    .text:00000000000002d4 .L0 
     /tmp/cciilwih.s:571    .text:00000000000002d8 .L0 
     /tmp/cciilwih.s:572    .text:00000000000002d8 .L0 
     /tmp/cciilwih.s:575    .text:00000000000002e0 .L0 
     /tmp/cciilwih.s:579    .text:00000000000002e4 .L0 
     /tmp/cciilwih.s:580    .text:00000000000002e4 .L0 
     /tmp/cciilwih.s:581    .text:00000000000002e4 .L0 
     /tmp/cciilwih.s:584    .text:00000000000002ec .L0 
     /tmp/cciilwih.s:590    .text:00000000000002f0 .L0 
     /tmp/cciilwih.s:591    .text:00000000000002f0 .L0 
     /tmp/cciilwih.s:596    .text:0000000000000304 .L0 
     /tmp/cciilwih.s:597    .text:0000000000000304 .L0 
     /tmp/cciilwih.s:600    .text:000000000000030c .L0 
     /tmp/cciilwih.s:601    .text:000000000000030c .L0 
     /tmp/cciilwih.s:605    .text:000000000000031c .L0 
     /tmp/cciilwih.s:607    .text:0000000000000320 .L0 
     /tmp/cciilwih.s:613    .text:0000000000000324 .L0 
     /tmp/cciilwih.s:614    .text:0000000000000324 .L0 
     /tmp/cciilwih.s:615    .text:0000000000000324 .L0 
     /tmp/cciilwih.s:622    .text:000000000000032c .L0 
     /tmp/cciilwih.s:628    .text:0000000000000330 .L0 
     /tmp/cciilwih.s:629    .text:0000000000000330 .L0 
     /tmp/cciilwih.s:631    .text:0000000000000334 .L0 
     /tmp/cciilwih.s:632    .text:0000000000000334 .L0 
     /tmp/cciilwih.s:635    .text:000000000000033c .L0 
GAS LISTING /tmp/cciilwih.s 			page 27


     /tmp/cciilwih.s:636    .text:000000000000033c .L0 
     /tmp/cciilwih.s:641    .text:0000000000000340 .L0 
   src/../h/kernel.h:55     .text:0000000000000340 .L0 
     /tmp/cciilwih.s:651    .text:0000000000000344 .L0 
     /tmp/cciilwih.s:652    .text:0000000000000344 .L0 
     /tmp/cciilwih.s:657    .text:0000000000000348 .L0 
   src/../h/kernel.h:136    .text:0000000000000348 .L0 
     /tmp/cciilwih.s:664    .text:000000000000034c .L0 
     /tmp/cciilwih.s:670    .text:0000000000000350 .L0 
     /tmp/cciilwih.s:671    .text:0000000000000350 .L0 
     /tmp/cciilwih.s:675    .text:000000000000035c .L0 
     /tmp/cciilwih.s:685    .text:000000000000035c .L0 
     /tmp/cciilwih.s:161    .text:00000000000000c0 .L0 
     /tmp/cciilwih.s:182    .rodata:0000000000000000 .L9
     /tmp/cciilwih.s:174    .text:00000000000000e8 .L0 
     /tmp/cciilwih.s:257    .text:0000000000000110 .L0 
     /tmp/cciilwih.s:334    .text:0000000000000158 .L0 
     /tmp/cciilwih.s:347    .text:0000000000000170 .L0 
     /tmp/cciilwih.s:364    .text:0000000000000190 .L0 
     /tmp/cciilwih.s:372    .text:00000000000001a4 .L0 
     /tmp/cciilwih.s:416    .text:00000000000001e8 .L0 
     /tmp/cciilwih.s:488    .text:000000000000024c .L0 
     /tmp/cciilwih.s:508    .text:0000000000000270 .L0 
     /tmp/cciilwih.s:528    .text:0000000000000294 .L0 
     /tmp/cciilwih.s:591    .text:00000000000002f0 .L0 
     /tmp/cciilwih.s:601    .text:000000000000030c .L0 
     /tmp/cciilwih.s:152    .text:00000000000000b4 .L4
     /tmp/cciilwih.s:585    .text:00000000000002f0 .L26
     /tmp/cciilwih.s:666    .text:0000000000000350 .L27
     /tmp/cciilwih.s:300    .text:0000000000000134 .L3
     /tmp/cciilwih.s:576    .text:00000000000002e4 .L7
     /tmp/cciilwih.s:263    .text:0000000000000124 .L20
     /tmp/cciilwih.s:624    .text:0000000000000330 .L28
     /tmp/cciilwih.s:608    .text:0000000000000324 .L22
     /tmp/cciilwih.s:234    .text:0000000000000100 .L19
     /tmp/cciilwih.s:317    .text:000000000000014c .L18
     /tmp/cciilwih.s:394    .text:00000000000001d0 .L17
     /tmp/cciilwih.s:355    .text:0000000000000188 .L16
     /tmp/cciilwih.s:341    .text:0000000000000170 .L15
     /tmp/cciilwih.s:379    .text:00000000000001bc .L14
     /tmp/cciilwih.s:449    .text:0000000000000228 .L13
     /tmp/cciilwih.s:535    .text:00000000000002ac .L12
     /tmp/cciilwih.s:496    .text:0000000000000264 .L11
     /tmp/cciilwih.s:515    .text:0000000000000288 .L10
     /tmp/cciilwih.s:558    .text:00000000000002d0 .L8
     /tmp/cciilwih.s:2390   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cciilwih.s:3967   .debug_str:000000000000093c .LASF186
     /tmp/cciilwih.s:3699   .debug_str:00000000000000f8 .LASF187
     /tmp/cciilwih.s:3927   .debug_str:0000000000000844 .LASF188
     /tmp/cciilwih.s:5      .text:0000000000000000 .Ltext0
     /tmp/cciilwih.s:678    .text:000000000000035c .Letext0
     /tmp/cciilwih.s:3665   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cciilwih.s:3769   .debug_str:0000000000000324 .LASF0
     /tmp/cciilwih.s:3801   .debug_str:000000000000041e .LASF1
     /tmp/cciilwih.s:3911   .debug_str:00000000000007c3 .LASF2
     /tmp/cciilwih.s:3917   .debug_str:00000000000007f2 .LASF4
     /tmp/cciilwih.s:3783   .debug_str:000000000000037c .LASF3
GAS LISTING /tmp/cciilwih.s 			page 28


     /tmp/cciilwih.s:3675   .debug_str:000000000000002a .LASF5
     /tmp/cciilwih.s:3871   .debug_str:000000000000068a .LASF6
     /tmp/cciilwih.s:3793   .debug_str:00000000000003f3 .LASF7
     /tmp/cciilwih.s:3743   .debug_str:0000000000000277 .LASF8
     /tmp/cciilwih.s:3751   .debug_str:00000000000002bc .LASF9
     /tmp/cciilwih.s:3705   .debug_str:000000000000011e .LASF10
     /tmp/cciilwih.s:3737   .debug_str:000000000000023c .LASF11
     /tmp/cciilwih.s:3711   .debug_str:0000000000000156 .LASF12
     /tmp/cciilwih.s:3703   .debug_str:000000000000010e .LASF13
     /tmp/cciilwih.s:3943   .debug_str:00000000000008ae .LASF14
     /tmp/cciilwih.s:3727   .debug_str:00000000000001cf .LASF15
     /tmp/cciilwih.s:3933   .debug_str:0000000000000877 .LASF16
     /tmp/cciilwih.s:3945   .debug_str:00000000000008ba .LASF64
     /tmp/cciilwih.s:3749   .debug_str:00000000000002af .LASF30
     /tmp/cciilwih.s:3837   .debug_str:0000000000000532 .LASF17
     /tmp/cciilwih.s:3953   .debug_str:00000000000008e9 .LASF18
     /tmp/cciilwih.s:3941   .debug_str:00000000000008a0 .LASF19
     /tmp/cciilwih.s:3829   .debug_str:0000000000000501 .LASF20
     /tmp/cciilwih.s:3895   .debug_str:000000000000073e .LASF21
     /tmp/cciilwih.s:3873   .debug_str:000000000000069d .LASF22
     /tmp/cciilwih.s:3899   .debug_str:0000000000000759 .LASF23
     /tmp/cciilwih.s:3891   .debug_str:0000000000000729 .LASF24
     /tmp/cciilwih.s:4051   .debug_str:0000000000000c35 .LASF25
     /tmp/cciilwih.s:3757   .debug_str:00000000000002e8 .LASF26
     /tmp/cciilwih.s:3905   .debug_str:00000000000007a4 .LASF27
     /tmp/cciilwih.s:3775   .debug_str:000000000000034f .LASF28
     /tmp/cciilwih.s:3833   .debug_str:000000000000051e .LASF29
     /tmp/cciilwih.s:3893   .debug_str:0000000000000733 .LASF31
     /tmp/cciilwih.s:3797   .debug_str:0000000000000410 .LASF32
     /tmp/cciilwih.s:4011   .debug_str:0000000000000b1a .LASF33
     /tmp/cciilwih.s:4021   .debug_str:0000000000000b5d .LASF71
     /tmp/cciilwih.s:3781   .debug_str:0000000000000367 .LASF73
     /tmp/cciilwih.s:3759   .debug_str:00000000000002f3 .LASF85
     /tmp/cciilwih.s:3867   .debug_str:0000000000000662 .LASF87
     /tmp/cciilwih.s:3985   .debug_str:0000000000000a7e .LASF34
     /tmp/cciilwih.s:3887   .debug_str:00000000000006fd .LASF36
     /tmp/cciilwih.s:3907   .debug_str:00000000000007af .LASF38
     /tmp/cciilwih.s:3889   .debug_str:0000000000000713 .LASF40
     /tmp/cciilwih.s:3885   .debug_str:00000000000006f6 .LASF35
     /tmp/cciilwih.s:3857   .debug_str:0000000000000600 .LASF37
     /tmp/cciilwih.s:3855   .debug_str:00000000000005f9 .LASF39
     /tmp/cciilwih.s:3901   .debug_str:0000000000000762 .LASF41
     /tmp/cciilwih.s:4019   .debug_str:0000000000000b55 .LASF42
     /tmp/cciilwih.s:3923   .debug_str:000000000000081e .LASF43
     /tmp/cciilwih.s:3847   .debug_str:00000000000005c0 .LASF44
     /tmp/cciilwih.s:3811   .debug_str:0000000000000489 .LASF45
     /tmp/cciilwih.s:3819   .debug_str:00000000000004bd .LASF46
     /tmp/cciilwih.s:3845   .debug_str:00000000000005ab .LASF47
     /tmp/cciilwih.s:4049   .debug_str:0000000000000c2d .LASF48
     /tmp/cciilwih.s:3729   .debug_str:00000000000001e5 .LASF49
     /tmp/cciilwih.s:3939   .debug_str:0000000000000899 .LASF50
     /tmp/cciilwih.s:3877   .debug_str:00000000000006ba .LASF51
     /tmp/cciilwih.s:3919   .debug_str:00000000000007f9 .LASF52
     /tmp/cciilwih.s:3679   .debug_str:000000000000003c .LASF53
     /tmp/cciilwih.s:3723   .debug_str:00000000000001b0 .LASF54
     /tmp/cciilwih.s:3913   .debug_str:00000000000007d1 .LASF55
     /tmp/cciilwih.s:3777   .debug_str:0000000000000354 .LASF56
GAS LISTING /tmp/cciilwih.s 			page 29


     /tmp/cciilwih.s:3853   .debug_str:00000000000005e6 .LASF57
     /tmp/cciilwih.s:3677   .debug_str:0000000000000031 .LASF58
     /tmp/cciilwih.s:3995   .debug_str:0000000000000aaa .LASF59
     /tmp/cciilwih.s:3909   .debug_str:00000000000007b8 .LASF60
     /tmp/cciilwih.s:3851   .debug_str:00000000000005cd .LASF61
     /tmp/cciilwih.s:4003   .debug_str:0000000000000af6 .LASF62
     /tmp/cciilwih.s:3735   .debug_str:0000000000000225 .LASF63
     /tmp/cciilwih.s:3999   .debug_str:0000000000000ace .LASF108
     /tmp/cciilwih.s:3687   .debug_str:0000000000000094 .LASF110
     /tmp/cciilwih.s:3955   .debug_str:00000000000008f2 .LASF65
     /tmp/cciilwih.s:4013   .debug_str:0000000000000b23 .LASF67
     /tmp/cciilwih.s:3721   .debug_str:000000000000019d .LASF66
     /tmp/cciilwih.s:3975   .debug_str:0000000000000a28 .LASF68
     /tmp/cciilwih.s:3961   .debug_str:0000000000000914 .LASF69
     /tmp/cciilwih.s:3785   .debug_str:000000000000038e .LASF70
     /tmp/cciilwih.s:3733   .debug_str:0000000000000215 .LASF72
     /tmp/cciilwih.s:4055   .debug_str:0000000000000c45 .LASF74
     /tmp/cciilwih.s:3753   .debug_str:00000000000002ca .LASF75
     /tmp/cciilwih.s:3807   .debug_str:000000000000045f .LASF76
     /tmp/cciilwih.s:3709   .debug_str:0000000000000148 .LASF77
     /tmp/cciilwih.s:3707   .debug_str:000000000000012d .LASF78
     /tmp/cciilwih.s:3957   .debug_str:00000000000008fd .LASF79
     /tmp/cciilwih.s:4033   .debug_str:0000000000000ba8 .LASF80
     /tmp/cciilwih.s:3987   .debug_str:0000000000000a87 .LASF81
     /tmp/cciilwih.s:3969   .debug_str:0000000000000a00 .LASF82
     /tmp/cciilwih.s:4043   .debug_str:0000000000000bec .LASF83
     /tmp/cciilwih.s:3739   .debug_str:000000000000024b .LASF84
     /tmp/cciilwih.s:3929   .debug_str:0000000000000862 .LASF189
     /tmp/cciilwih.s:3805   .debug_str:0000000000000459 .LASF86
     /tmp/cciilwih.s:3809   .debug_str:0000000000000479 .LASF88
     /tmp/cciilwih.s:3965   .debug_str:0000000000000934 .LASF133
     /tmp/cciilwih.s:3799   .debug_str:0000000000000419 .LASF89
     /tmp/cciilwih.s:4037   .debug_str:0000000000000bce .LASF90
     /tmp/cciilwih.s:4041   .debug_str:0000000000000bdf .LASF91
     /tmp/cciilwih.s:3761   .debug_str:00000000000002fe .LASF92
     /tmp/cciilwih.s:3669   .debug_str:0000000000000007 .LASF93
     /tmp/cciilwih.s:3779   .debug_str:000000000000035a .LASF94
     /tmp/cciilwih.s:3763   .debug_str:000000000000030a .LASF95
     /tmp/cciilwih.s:3691   .debug_str:00000000000000b0 .LASF96
     /tmp/cciilwih.s:3713   .debug_str:0000000000000166 .LASF145
     /tmp/cciilwih.s:3673   .debug_str:000000000000001f .LASF97
     /tmp/cciilwih.s:3825   .debug_str:00000000000004ef .LASF98
     /tmp/cciilwih.s:4007   .debug_str:0000000000000b09 .LASF99
     /tmp/cciilwih.s:3795   .debug_str:0000000000000406 .LASF100
     /tmp/cciilwih.s:4039   .debug_str:0000000000000bda .LASF101
     /tmp/cciilwih.s:3931   .debug_str:000000000000086e .LASF102
     /tmp/cciilwih.s:3861   .debug_str:000000000000063d .LASF103
     /tmp/cciilwih.s:3817   .debug_str:00000000000004b2 .LASF104
     /tmp/cciilwih.s:4017   .debug_str:0000000000000b48 .LASF105
     /tmp/cciilwih.s:3719   .debug_str:000000000000018f .LASF106
     /tmp/cciilwih.s:3973   .debug_str:0000000000000a1e .LASF107
     /tmp/cciilwih.s:3925   .debug_str:0000000000000833 .LASF135
     /tmp/cciilwih.s:3717   .debug_str:0000000000000186 .LASF115
     /tmp/cciilwih.s:3683   .debug_str:0000000000000068 .LASF117
     /tmp/cciilwih.s:3771   .debug_str:0000000000000331 .LASF109
     /tmp/cciilwih.s:4001   .debug_str:0000000000000ad8 .LASF111
     /tmp/cciilwih.s:3773   .debug_str:0000000000000340 .LASF112
GAS LISTING /tmp/cciilwih.s 			page 30


     /tmp/cciilwih.s:3921   .debug_str:0000000000000800 .LASF113
     /tmp/cciilwih.s:3813   .debug_str:000000000000049e .LASF114
     /tmp/cciilwih.s:4035   .debug_str:0000000000000bbe .LASF116
     /tmp/cciilwih.s:3697   .debug_str:00000000000000dd .LASF118
     /tmp/cciilwih.s:3823   .debug_str:00000000000004ea .LASF119
     /tmp/cciilwih.s:3865   .debug_str:0000000000000652 .LASF120
     /tmp/cciilwih.s:3741   .debug_str:000000000000026b .LASF190
     /tmp/cciilwih.s:4005   .debug_str:0000000000000b00 .LASF121
     /tmp/cciilwih.s:4023   .debug_str:0000000000000b65 .LASF122
     /tmp/cciilwih.s:4027   .debug_str:0000000000000b85 .LASF123
     /tmp/cciilwih.s:3667   .debug_str:0000000000000000 .LASF124
     /tmp/cciilwih.s:3903   .debug_str:0000000000000776 .LASF125
     /tmp/cciilwih.s:3787   .debug_str:00000000000003aa .LASF191
     /tmp/cciilwih.s:3979   .debug_str:0000000000000a4c .LASF126
     /tmp/cciilwih.s:3839   .debug_str:000000000000053c .LASF127
     /tmp/cciilwih.s:3715   .debug_str:0000000000000179 .LASF128
     /tmp/cciilwih.s:3843   .debug_str:0000000000000586 .LASF129
     /tmp/cciilwih.s:3863   .debug_str:0000000000000645 .LASF130
     /tmp/cciilwih.s:3821   .debug_str:00000000000004c5 .LASF131
     /tmp/cciilwih.s:3685   .debug_str:000000000000007b .LASF132
     /tmp/cciilwih.s:4015   .debug_str:0000000000000b3a .LASF134
     /tmp/cciilwih.s:3937   .debug_str:0000000000000894 .LASF136
     /tmp/cciilwih.s:3963   .debug_str:0000000000000924 .LASF137
     /tmp/cciilwih.s:3841   .debug_str:000000000000055d .LASF138
     /tmp/cciilwih.s:3835   .debug_str:0000000000000523 .LASF139
     /tmp/cciilwih.s:3803   .debug_str:0000000000000431 .LASF140
     /tmp/cciilwih.s:3789   .debug_str:00000000000003d8 .LASF141
     /tmp/cciilwih.s:3849   .debug_str:00000000000005c8 .LASF142
     /tmp/cciilwih.s:4029   .debug_str:0000000000000b8a .LASF143
     /tmp/cciilwih.s:3881   .debug_str:00000000000006de .LASF144
     /tmp/cciilwih.s:3681   .debug_str:0000000000000050 .LASF146
     /tmp/cciilwih.s:3949   .debug_str:00000000000008ce .LASF192
     /tmp/cciilwih.s:3981   .debug_str:0000000000000a6d .LASF147
     /tmp/cciilwih.s:3745   .debug_str:0000000000000287 .LASF148
     /tmp/cciilwih.s:3971   .debug_str:0000000000000a19 .LASF149
     /tmp/cciilwih.s:3869   .debug_str:000000000000067b .LASF150
     /tmp/cciilwih.s:3951   .debug_str:00000000000008e2 .LASF151
     /tmp/cciilwih.s:3791   .debug_str:00000000000003e2 .LASF152
     /tmp/cciilwih.s:3959   .debug_str:0000000000000908 .LASF153
     /tmp/cciilwih.s:3947   .debug_str:00000000000008c1 .LASF154
     /tmp/cciilwih.s:3875   .debug_str:00000000000006aa .LASF155
     /tmp/cciilwih.s:4025   .debug_str:0000000000000b6a .LASF156
     /tmp/cciilwih.s:3915   .debug_str:00000000000007e4 .LASF157
     /tmp/cciilwih.s:3725   .debug_str:00000000000001b6 .LASF158
     /tmp/cciilwih.s:3883   .debug_str:00000000000006ea .LASF159
     /tmp/cciilwih.s:3767   .debug_str:000000000000031e .LASF160
     /tmp/cciilwih.s:3879   .debug_str:00000000000006ce .LASF161
     /tmp/cciilwih.s:3671   .debug_str:0000000000000017 .LASF162
     /tmp/cciilwih.s:4045   .debug_str:0000000000000bfb .LASF163
     /tmp/cciilwih.s:3765   .debug_str:0000000000000315 .LASF164
     /tmp/cciilwih.s:3693   .debug_str:00000000000000c6 .LASF165
     /tmp/cciilwih.s:3731   .debug_str:00000000000001fa .LASF166
     /tmp/cciilwih.s:3997   .debug_str:0000000000000ac3 .LASF167
     /tmp/cciilwih.s:3859   .debug_str:0000000000000614 .LASF168
     /tmp/cciilwih.s:3701   .debug_str:0000000000000107 .LASF169
     /tmp/cciilwih.s:4047   .debug_str:0000000000000c0d .LASF170
     /tmp/cciilwih.s:3831   .debug_str:000000000000050d .LASF171
GAS LISTING /tmp/cciilwih.s 			page 31


     /tmp/cciilwih.s:46     .text:0000000000000020 .LFB40
     /tmp/cciilwih.s:676    .text:000000000000035c .LFE40
     /tmp/cciilwih.s:3935   .debug_str:000000000000088d .LASF172
     /tmp/cciilwih.s:3977   .debug_str:0000000000000a47 .LASF173
     /tmp/cciilwih.s:4009   .debug_str:0000000000000b12 .LASF174
     /tmp/cciilwih.s:3657   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cciilwih.s:3989   .debug_str:0000000000000a95 .LASF175
     /tmp/cciilwih.s:238    .text:0000000000000100 .LBB51
     /tmp/cciilwih.s:264    .text:0000000000000124 .LBE51
     /tmp/cciilwih.s:3469   .debug_loc:0000000000000000 .LLST0
     /tmp/cciilwih.s:244    .text:0000000000000104 .LBB52
     /tmp/cciilwih.s:249    .text:0000000000000104 .LBE52
     /tmp/cciilwih.s:255    .text:0000000000000110 .LVL3
     /tmp/cciilwih.s:325    .text:000000000000014c .LBB54
     /tmp/cciilwih.s:342    .text:0000000000000170 .LBE54
     /tmp/cciilwih.s:3897   .debug_str:000000000000074e .LASF176
     /tmp/cciilwih.s:3484   .debug_loc:000000000000003a .LLST1
     /tmp/cciilwih.s:332    .text:0000000000000158 .LVL9
     /tmp/cciilwih.s:382    .text:00000000000001bc .LBB55
     /tmp/cciilwih.s:395    .text:00000000000001d0 .LBE55
     /tmp/cciilwih.s:4053   .debug_str:0000000000000c3e .LASF177
     /tmp/cciilwih.s:3492   .debug_loc:000000000000005f .LLST2
     /tmp/cciilwih.s:391    .text:00000000000001cc .LVL13
     /tmp/cciilwih.s:398    .text:00000000000001d0 .LBB56
     /tmp/cciilwih.s:450    .text:0000000000000228 .LBE56
     /tmp/cciilwih.s:3499   .debug_loc:0000000000000082 .LLST3
     /tmp/cciilwih.s:3507   .debug_loc:00000000000000a7 .LLST4
     /tmp/cciilwih.s:3515   .debug_loc:00000000000000cc .LLST5
     /tmp/cciilwih.s:3522   .debug_loc:00000000000000ef .LLST6
     /tmp/cciilwih.s:411    .text:00000000000001e4 .LVL16
     /tmp/cciilwih.s:453    .text:0000000000000228 .LBB57
     /tmp/cciilwih.s:497    .text:0000000000000264 .LBE57
     /tmp/cciilwih.s:3535   .debug_loc:0000000000000129 .LLST7
     /tmp/cciilwih.s:3689   .debug_str:00000000000000ab .LASF178
     /tmp/cciilwih.s:3542   .debug_loc:000000000000014c .LLST8
     /tmp/cciilwih.s:463    .text:0000000000000230 .LBB58
     /tmp/cciilwih.s:483    .text:0000000000000248 .LBE58
     /tmp/cciilwih.s:3557   .debug_loc:0000000000000177 .LLST9
     /tmp/cciilwih.s:471    .text:000000000000023c .LBB60
     /tmp/cciilwih.s:481    .text:0000000000000248 .LBE60
     /tmp/cciilwih.s:3564   .debug_loc:000000000000019a .LLST10
     /tmp/cciilwih.s:3571   .debug_loc:00000000000001bd .LLST11
     /tmp/cciilwih.s:470    .text:000000000000023c .LVL22
     /tmp/cciilwih.s:500    .text:0000000000000264 .LBB62
     /tmp/cciilwih.s:516    .text:0000000000000288 .LBE62
     /tmp/cciilwih.s:3578   .debug_loc:00000000000001e0 .LLST12
     /tmp/cciilwih.s:506    .text:0000000000000270 .LVL25
     /tmp/cciilwih.s:519    .text:0000000000000288 .LBB63
     /tmp/cciilwih.s:536    .text:00000000000002ac .LBE63
     /tmp/cciilwih.s:3586   .debug_loc:0000000000000205 .LLST13
     /tmp/cciilwih.s:526    .text:0000000000000294 .LVL27
     /tmp/cciilwih.s:539    .text:00000000000002ac .LBB64
     /tmp/cciilwih.s:559    .text:00000000000002d0 .LBE64
     /tmp/cciilwih.s:3594   .debug_loc:000000000000022a .LLST14
     /tmp/cciilwih.s:548    .text:00000000000002bc .LVL29
     /tmp/cciilwih.s:555    .text:00000000000002cc .LVL30
     /tmp/cciilwih.s:562    .text:00000000000002d0 .LBB65
GAS LISTING /tmp/cciilwih.s 			page 32


     /tmp/cciilwih.s:577    .text:00000000000002e4 .LBE65
     /tmp/cciilwih.s:3983   .debug_str:0000000000000a79 .LASF179
     /tmp/cciilwih.s:3601   .debug_loc:000000000000024d .LLST15
     /tmp/cciilwih.s:573    .text:00000000000002e0 .LVL33
     /tmp/cciilwih.s:271    .text:0000000000000128 .LBB67
     /tmp/cciilwih.s:282    .text:000000000000012c .LBE67
     /tmp/cciilwih.s:3608   .debug_loc:0000000000000270 .LLST16
     /tmp/cciilwih.s:287    .text:0000000000000130 .LBB69
     /tmp/cciilwih.s:298    .text:0000000000000134 .LBE69
     /tmp/cciilwih.s:3615   .debug_loc:0000000000000293 .LLST17
     /tmp/cciilwih.s:352    .text:0000000000000184 .LVL10
     /tmp/cciilwih.s:369    .text:00000000000001a4 .LVL11
     /tmp/cciilwih.s:582    .text:00000000000002ec .LVL34
     /tmp/cciilwih.s:62     .text:0000000000000038 .LBB41
     /tmp/cciilwih.s:78     .text:0000000000000044 .LBE41
     /tmp/cciilwih.s:82     .text:0000000000000048 .LBB43
     /tmp/cciilwih.s:97     .text:0000000000000054 .LBE43
     /tmp/cciilwih.s:101    .text:0000000000000058 .LBB45
     /tmp/cciilwih.s:116    .text:0000000000000064 .LBE45
     /tmp/cciilwih.s:611    .text:0000000000000324 .LBB73
     /tmp/cciilwih.s:626    .text:0000000000000330 .LBE73
     /tmp/cciilwih.s:3622   .debug_loc:00000000000002b6 .LLST18
     /tmp/cciilwih.s:638    .text:0000000000000340 .LBB75
     /tmp/cciilwih.s:649    .text:0000000000000344 .LBE75
     /tmp/cciilwih.s:3630   .debug_loc:00000000000002da .LLST19
     /tmp/cciilwih.s:654    .text:0000000000000348 .LBB77
     /tmp/cciilwih.s:668    .text:0000000000000350 .LBE77
     /tmp/cciilwih.s:3637   .debug_loc:00000000000002fd .LLST20
     /tmp/cciilwih.s:150    .text:00000000000000b0 .LVL0
     /tmp/cciilwih.s:598    .text:000000000000030c .LVL35
     /tmp/cciilwih.s:633    .text:000000000000033c .LVL38
     /tmp/cciilwih.s:672    .text:0000000000000358 .LVL43
     /tmp/cciilwih.s:10     .text:0000000000000000 .LFB39
     /tmp/cciilwih.s:40     .text:0000000000000020 .LFE39
     /tmp/cciilwih.s:3695   .debug_str:00000000000000d8 .LASF193
     /tmp/cciilwih.s:3815   .debug_str:00000000000004a8 .LASF180
     /tmp/cciilwih.s:4031   .debug_str:0000000000000b9c .LASF194
     /tmp/cciilwih.s:3827   .debug_str:00000000000004f5 .LASF181
     /tmp/cciilwih.s:3993   .debug_str:0000000000000aa5 .LASF182
     /tmp/cciilwih.s:3755   .debug_str:00000000000002d8 .LASF183
     /tmp/cciilwih.s:3991   .debug_str:0000000000000a9a .LASF185
     /tmp/cciilwih.s:3747   .debug_str:000000000000029f .LASF184
     /tmp/cciilwih.s:242    .text:0000000000000104 .LVL1
     /tmp/cciilwih.s:253    .text:0000000000000108 .LVL2
     /tmp/cciilwih.s:327    .text:000000000000014c .LVL8
     /tmp/cciilwih.s:386    .text:00000000000001c0 .LVL12
     /tmp/cciilwih.s:400    .text:00000000000001d0 .LVL14
     /tmp/cciilwih.s:405    .text:00000000000001d4 .LVL15
     /tmp/cciilwih.s:448    .text:0000000000000228 .LVL19
     /tmp/cciilwih.s:431    .text:000000000000020c .LVL17
     /tmp/cciilwih.s:439    .text:0000000000000218 .LVL18
     /tmp/cciilwih.s:457    .text:000000000000022c .LVL20
     /tmp/cciilwih.s:495    .text:0000000000000264 .LVL24
     /tmp/cciilwih.s:461    .text:0000000000000230 .LVL21
     /tmp/cciilwih.s:479    .text:0000000000000248 .LVL23
     /tmp/cciilwih.s:521    .text:0000000000000288 .LVL26
     /tmp/cciilwih.s:543    .text:00000000000002b0 .LVL28
GAS LISTING /tmp/cciilwih.s 			page 33


     /tmp/cciilwih.s:557    .text:00000000000002d0 .LVL31
     /tmp/cciilwih.s:566    .text:00000000000002d4 .LVL32
     /tmp/cciilwih.s:270    .text:0000000000000128 .LVL4
     /tmp/cciilwih.s:279    .text:000000000000012c .LVL5
     /tmp/cciilwih.s:286    .text:0000000000000130 .LVL6
     /tmp/cciilwih.s:295    .text:0000000000000134 .LVL7
     /tmp/cciilwih.s:610    .text:0000000000000324 .LVL36
     /tmp/cciilwih.s:623    .text:0000000000000330 .LVL37
     /tmp/cciilwih.s:637    .text:0000000000000340 .LVL39
     /tmp/cciilwih.s:646    .text:0000000000000344 .LVL40
     /tmp/cciilwih.s:653    .text:0000000000000348 .LVL41
     /tmp/cciilwih.s:665    .text:0000000000000350 .LVL42
     /tmp/cciilwih.s:686    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cciilwih.s:153    .text:00000000000000b4 .LBB48
     /tmp/cciilwih.s:301    .text:0000000000000134 .LBE48
     /tmp/cciilwih.s:320    .text:000000000000014c .LBB72
     /tmp/cciilwih.s:588    .text:00000000000002f0 .LBE72

UNDEFINED SYMBOLS
_Z10printErrorv
_ZN3PCB7runningE
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3PCB16timeSliceCounterE
_ZN3PCB8dispatchEv
_ZN9Scheduler3putEP3PCB
_ZN3PCB14createProccessEPFvvEPv
_ZN3SCBnwEm
_ZN3SCB4waitEv
_ZN3SCB6signalEv
_ZN3SCB13signalClosingEv
_ZN3SCBdlEPv
_ZN17SleepingProcesses10putToSleepEP3PCB
_ZN17SleepingProcesses6wakeUpEv
console_handler

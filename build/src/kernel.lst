GAS LISTING /tmp/ccIyxmrj.s 			page 1


   1              		.file	"kernel.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN6Kernel10popSppSpieEv
   9              	_ZN6Kernel10popSppSpieEv:
  10              	.LFB39:
  11              		.file 1 "src/kernel.cpp"
   1:src/kernel.cpp **** #include "../h/kernel.h"
   2:src/kernel.cpp **** #include "../h/PCB.h"
   3:src/kernel.cpp **** #include "../h/MemoryAllocator.h"
   4:src/kernel.cpp **** #include "../h/console.h"
   5:src/kernel.cpp **** #include "../h/print.h"
   6:src/kernel.cpp **** #include "../h/Scheduler.h"
   7:src/kernel.cpp **** #include "../h/SCB.h"
   8:src/kernel.cpp **** #include "../h/SleepingProcesses.h"
   9:src/kernel.cpp **** #include "../h/CCB.h"
  10:src/kernel.cpp **** #include "../h/syscall_c.h"
  11:src/kernel.cpp **** void Kernel::popSppSpie() {
  12              		.loc 1 11 27
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/kernel.cpp ****     asm volatile("csrw sepc, ra"); // da bi se funkcija vratila u wrapper
  20              		.loc 1 12 5
  21              		.loc 1 12 34 is_stmt 0
  22              	#APP
  23              	# 12 "src/kernel.cpp" 1
  13              	    asm volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 25 is_stmt 0
  28              	# 13 "src/kernel.cpp" 1
  14              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 14 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE39:
  42              		.align	2
  43              		.globl	interruptHandler
  45              	interruptHandler:
  46              	.LFB40:
GAS LISTING /tmp/ccIyxmrj.s 			page 2


  15:src/kernel.cpp **** 
  16:src/kernel.cpp **** extern "C" void interruptHandler() { // extern C da kompajler ne bi menjao ime funkcije
  47              		.loc 1 16 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FA 		addi	sp,sp,-96
  50              		.cfi_def_cfa_offset 96
  51 0024 233C1104 		sd	ra,88(sp)
  52 0028 23388104 		sd	s0,80(sp)
  53 002c 23349104 		sd	s1,72(sp)
  54 0030 23302105 		sd	s2,64(sp)
  55              		.cfi_offset 1, -8
  56              		.cfi_offset 8, -16
  57              		.cfi_offset 9, -24
  58              		.cfi_offset 18, -32
  59 0034 13040106 		addi	s0,sp,96
  60              		.cfi_def_cfa 8, 0
  17:src/kernel.cpp ****     size_t volatile scause = Kernel::r_scause();
  61              		.loc 1 17 5
  62              	.LBB42:
  63              	.LBB43:
  64              		.file 2 "src/../h/kernel.h"
   1:src/../h/kernel.h **** #ifndef KERNEL_H
   2:src/../h/kernel.h **** #define KERNEL_H
   3:src/../h/kernel.h **** 
   4:src/../h/kernel.h **** #include "hw.h"
   5:src/../h/kernel.h **** 
   6:src/../h/kernel.h **** class Kernel {
   7:src/../h/kernel.h **** public:
   8:src/../h/kernel.h ****     // postavlja code u registar a0
   9:src/../h/kernel.h ****     static size_t setCode(size_t code) {
  10:src/../h/kernel.h ****         return code;
  11:src/../h/kernel.h ****     }
  12:src/../h/kernel.h **** 
  13:src/../h/kernel.h ****     // kodovi po kojima se prepoznaju sistemski pozivi
  14:src/../h/kernel.h ****     enum sysCallCodes {
  15:src/../h/kernel.h ****         mem_alloc = 0x01,
  16:src/../h/kernel.h ****         mem_free = 0x02,
  17:src/../h/kernel.h ****         thread_create = 0x11,
  18:src/../h/kernel.h ****         thread_exit = 0x12,
  19:src/../h/kernel.h ****         thread_dispatch = 0x13,
  20:src/../h/kernel.h ****         thread_start = 0x14,
  21:src/../h/kernel.h ****         sem_open = 0x21,
  22:src/../h/kernel.h ****         sem_close = 0x22,
  23:src/../h/kernel.h ****         sem_wait = 0x23,
  24:src/../h/kernel.h ****         sem_signal = 0x24,
  25:src/../h/kernel.h ****         time_sleep = 0x31,
  26:src/../h/kernel.h ****         getc = 0x41,
  27:src/../h/kernel.h ****         putc = 0x42
  28:src/../h/kernel.h ****     };
  29:src/../h/kernel.h **** 
  30:src/../h/kernel.h ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  31:src/../h/kernel.h ****     static void popSppSpie();
  32:src/../h/kernel.h **** 
  33:src/../h/kernel.h ****     // cita registar scause (uzrok nastanka prekida)
  34:src/../h/kernel.h ****     static size_t r_scause() {
  35:src/../h/kernel.h ****         size_t volatile scause;
  65              		.loc 2 35 9
GAS LISTING /tmp/ccIyxmrj.s 			page 3


  36:src/../h/kernel.h ****         __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  66              		.loc 2 36 9
  67              		.loc 2 36 76 is_stmt 0
  68              	#APP
  69              	# 36 "src/../h/kernel.h" 1
  37              	        return scause;
  70              		csrr a5, scause
  71              	# 0 "" 2
  72              	#NO_APP
  73 003c 2330F4FC 		sd	a5,-64(s0)
  74              		.loc 2 37 9 is_stmt 1
  75              		.loc 2 37 16 is_stmt 0
  76 0040 833704FC 		ld	a5,-64(s0)
  77              	.LBE43:
  78              	.LBE42:
  79              		.loc 1 17 47
  80 0044 233CF4FC 		sd	a5,-40(s0)
  18:src/kernel.cpp ****     size_t volatile sepc = Kernel::r_sepc();
  81              		.loc 1 18 5 is_stmt 1
  82              	.LBB44:
  83              	.LBB45:
  38:src/../h/kernel.h ****     }
  39:src/../h/kernel.h **** 
  40:src/../h/kernel.h ****     // upisuje u registar scause (uzrok nastanka prekida)
  41:src/../h/kernel.h ****     static void w_scause(size_t scause) {
  42:src/../h/kernel.h ****         __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  43:src/../h/kernel.h ****     }
  44:src/../h/kernel.h **** 
  45:src/../h/kernel.h ****     // cita registar sepc
  46:src/../h/kernel.h ****     static size_t r_sepc() {
  47:src/../h/kernel.h ****         size_t volatile sepc;
  84              		.loc 2 47 9
  48:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
  85              		.loc 2 48 9
  86              		.loc 2 48 68 is_stmt 0
  87              	#APP
  88              	# 48 "src/../h/kernel.h" 1
  49              	        return sepc;
  89              		csrr a5, sepc
  90              	# 0 "" 2
  91              	#NO_APP
  92 004c 233CF4FA 		sd	a5,-72(s0)
  93              		.loc 2 49 9 is_stmt 1
  94              		.loc 2 49 16 is_stmt 0
  95 0050 833784FB 		ld	a5,-72(s0)
  96              	.LBE45:
  97              	.LBE44:
  98              		.loc 1 18 43
  99 0054 2338F4FC 		sd	a5,-48(s0)
  19:src/kernel.cpp ****     size_t volatile sstatus = Kernel::r_sstatus();
 100              		.loc 1 19 5 is_stmt 1
 101              	.LBB46:
 102              	.LBB47:
  50:src/../h/kernel.h ****     }
  51:src/../h/kernel.h **** 
  52:src/../h/kernel.h ****     // upisuje u registar sepc
  53:src/../h/kernel.h ****     static void w_sepc(size_t sepc) {
GAS LISTING /tmp/ccIyxmrj.s 			page 4


  54:src/../h/kernel.h ****         __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
  55:src/../h/kernel.h ****     }
  56:src/../h/kernel.h **** 
  57:src/../h/kernel.h ****     // read register stvec
  58:src/../h/kernel.h ****     static size_t r_stvec() {
  59:src/../h/kernel.h ****         size_t volatile stvec;
  60:src/../h/kernel.h ****         __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
  61:src/../h/kernel.h ****         return stvec;
  62:src/../h/kernel.h ****     }
  63:src/../h/kernel.h **** 
  64:src/../h/kernel.h ****     // write register stvec
  65:src/../h/kernel.h ****     static void w_stvec(size_t stvec) {
  66:src/../h/kernel.h ****         __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  67:src/../h/kernel.h ****     }
  68:src/../h/kernel.h **** 
  69:src/../h/kernel.h ****     // read register stval
  70:src/../h/kernel.h ****     static size_t r_stval() {
  71:src/../h/kernel.h ****         size_t volatile stval;
  72:src/../h/kernel.h ****         __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
  73:src/../h/kernel.h ****         return stval;
  74:src/../h/kernel.h ****     }
  75:src/../h/kernel.h **** 
  76:src/../h/kernel.h ****     // write register stval
  77:src/../h/kernel.h ****     static void w_stval(size_t stval) {
  78:src/../h/kernel.h ****         __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
  79:src/../h/kernel.h ****     }
  80:src/../h/kernel.h **** 
  81:src/../h/kernel.h ****     enum BitMaskSip
  82:src/../h/kernel.h ****     {
  83:src/../h/kernel.h ****         SIP_SSIE = (1 << 1), // da li su dozvoljeni softverski prekidi
  84:src/../h/kernel.h ****         SIP_SEIE = (1 << 9), // da li su dozvoljeni spoljasnji hardverski prekidi
  85:src/../h/kernel.h ****     };
  86:src/../h/kernel.h **** 
  87:src/../h/kernel.h ****     // postavljanje odredjenih bitova (BitMaskSip) u registar sip
  88:src/../h/kernel.h ****     static void ms_sip(size_t mask) {
  89:src/../h/kernel.h ****         __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
  90:src/../h/kernel.h ****     }
  91:src/../h/kernel.h **** 
  92:src/../h/kernel.h ****     // brisanje odredjenih bitova (BitMaskSip) iz registra sip
  93:src/../h/kernel.h ****     static void mc_sip(size_t mask) {
  94:src/../h/kernel.h ****         __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
  95:src/../h/kernel.h ****     }
  96:src/../h/kernel.h **** 
  97:src/../h/kernel.h ****     // citanje iz registra sip
  98:src/../h/kernel.h ****     static size_t r_sip() {
  99:src/../h/kernel.h ****         size_t volatile sip;
 100:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 101:src/../h/kernel.h ****         return sip;
 102:src/../h/kernel.h ****     }
 103:src/../h/kernel.h **** 
 104:src/../h/kernel.h ****     // upis u registar sip
 105:src/../h/kernel.h ****     static void w_sip(size_t sip) {
 106:src/../h/kernel.h ****         __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 107:src/../h/kernel.h ****     }
 108:src/../h/kernel.h **** 
 109:src/../h/kernel.h ****     enum BitMaskSstatus
 110:src/../h/kernel.h ****     {
GAS LISTING /tmp/ccIyxmrj.s 			page 5


 111:src/../h/kernel.h ****         SSTATUS_SIE = (1 << 1), // ako je 0 - maskiranje spoljasnjih prekida u sistemskom rezimu
 112:src/../h/kernel.h ****         SSTATUS_SPIE = (1 << 5), // prethodna vrednost sie
 113:src/../h/kernel.h ****         SSTATUS_SPP = (1 << 8), // u kom rezimu se desio prekid
 114:src/../h/kernel.h ****     };
 115:src/../h/kernel.h **** 
 116:src/../h/kernel.h ****     // mask set register sstatus
 117:src/../h/kernel.h ****     static void ms_sstatus(size_t mask) {
 118:src/../h/kernel.h ****         __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 119:src/../h/kernel.h ****     }
 120:src/../h/kernel.h **** 
 121:src/../h/kernel.h ****     // mask clear register sstatus
 122:src/../h/kernel.h ****     static void mc_sstatus(size_t mask) {
 123:src/../h/kernel.h ****         __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 124:src/../h/kernel.h ****     }
 125:src/../h/kernel.h **** 
 126:src/../h/kernel.h ****     // read register sstatus
 127:src/../h/kernel.h ****     static size_t r_sstatus() {
 128:src/../h/kernel.h ****         size_t volatile sstatus;
 103              		.loc 2 128 9
 129:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 104              		.loc 2 129 9
 105              		.loc 2 129 80 is_stmt 0
 106              	#APP
 107              	# 129 "src/../h/kernel.h" 1
 130              	        return sstatus;
 108              		csrr a5, sstatus
 109              	# 0 "" 2
 110              	#NO_APP
 111 005c 2338F4FA 		sd	a5,-80(s0)
 112              		.loc 2 130 9 is_stmt 1
 113              		.loc 2 130 16 is_stmt 0
 114 0060 833704FB 		ld	a5,-80(s0)
 115              	.LBE47:
 116              	.LBE46:
 117              		.loc 1 19 49
 118 0064 2334F4FC 		sd	a5,-56(s0)
  20:src/kernel.cpp ****     if(scause == 9 || scause == 8) { // sistemski poziv iz korisnickog(8) ili sistemskog(9) rezima
 119              		.loc 1 20 5 is_stmt 1
 120              	.LBB48:
 121              		.loc 1 20 15 is_stmt 0
 122 0068 033784FD 		ld	a4,-40(s0)
 123              		.loc 1 20 20
 124 006c 93079000 		li	a5,9
 125 0070 6302F704 		beq	a4,a5,.L4
 126              		.loc 1 20 30 discriminator 2
 127 0074 033784FD 		ld	a4,-40(s0)
 128              		.loc 1 20 20 discriminator 2
 129 0078 93078000 		li	a5,8
 130 007c 630CF702 		beq	a4,a5,.L4
  21:src/kernel.cpp ****         sepc += 4; // da bi se sret vratio na pravo mesto
  22:src/kernel.cpp ****         size_t volatile code = PCB::running->registers[10]; // a0
  23:src/kernel.cpp ****         switch(code) {
  24:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_alloc: // mem_alloc(size_t size) a1 - size
  25:src/kernel.cpp ****             {
  26:src/kernel.cpp ****                 size_t size = PCB::running->registers[11];
  27:src/kernel.cpp ****                 size = MemoryAllocator::blocksInSize(size);
  28:src/kernel.cpp **** 
GAS LISTING /tmp/ccIyxmrj.s 			page 6


  29:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)MemoryAllocator::mem_alloc(size);
  30:src/kernel.cpp ****                 break;
  31:src/kernel.cpp ****             }
  32:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_free: // mem_free(void* memSegment) a1 - memSegment
  33:src/kernel.cpp ****             {
  34:src/kernel.cpp ****                 void* memSegment = (void*)PCB::running->registers[11];
  35:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)MemoryAllocator::mem_free(memSegment);
  36:src/kernel.cpp ****                 break;
  37:src/kernel.cpp ****             }
  38:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_dispatch:
  39:src/kernel.cpp ****             {
  40:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
  41:src/kernel.cpp ****                 PCB::dispatch();
  42:src/kernel.cpp ****                 break;
  43:src/kernel.cpp ****             }
  44:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_exit:
  45:src/kernel.cpp ****             {
  46:src/kernel.cpp ****                 PCB::running->finished = true;
  47:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
  48:src/kernel.cpp ****                 PCB::dispatch();
  49:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)0;
  50:src/kernel.cpp ****                 break;
  51:src/kernel.cpp ****             }
  52:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_start: // a1 - handle
  53:src/kernel.cpp ****             {
  54:src/kernel.cpp ****                 PCB **handle = (PCB **) PCB::running->registers[11];
  55:src/kernel.cpp ****                 Scheduler::put(*handle);
  56:src/kernel.cpp ****                 break;
  57:src/kernel.cpp ****             }
  58:src/kernel.cpp ****             case Kernel::sysCallCodes::thread_create: // a1 - handle a2 - startRoutine a3 - arg a4 
  59:src/kernel.cpp ****             {
  60:src/kernel.cpp ****                 // argumenti
  61:src/kernel.cpp ****                 PCB::processMain main = (PCB::processMain)PCB::running->registers[12];
  62:src/kernel.cpp ****                 void *arg = (void*)PCB::running->registers[13];
  63:src/kernel.cpp **** 
  64:src/kernel.cpp ****                 PCB **handle = (PCB**)PCB::running->registers[11];
  65:src/kernel.cpp ****                 *handle = PCB::createProccess(main, arg);
  66:src/kernel.cpp **** 
  67:src/kernel.cpp ****                 // stavljamo handle u a0 (verovatno vec jeste ali za svaki slucaj)
  68:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)handle;
  69:src/kernel.cpp **** 
  70:src/kernel.cpp ****                 if(*handle == nullptr) break;
  71:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
  72:src/kernel.cpp ****                 size_t* stack = (size_t*)PCB::running->registers[14];
  73:src/kernel.cpp ****                 (*handle)->stack = stack;
  74:src/kernel.cpp ****                 (*handle)->registers[2] = (size_t)&stack[DEFAULT_STACK_SIZE]; // sp(x2)
  75:src/kernel.cpp **** 
  76:src/kernel.cpp ****                 break;
  77:src/kernel.cpp ****             }
  78:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_open: // a1 = handle a2 = init
  79:src/kernel.cpp ****             {
  80:src/kernel.cpp ****                 SCB **handle = (SCB**) PCB::running->registers[11];
  81:src/kernel.cpp ****                 size_t init = (int) PCB::running->registers[12];
  82:src/kernel.cpp **** 
  83:src/kernel.cpp ****                 (*handle) = SCB::createSemaphore(init);
  84:src/kernel.cpp **** 
  85:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)handle;
GAS LISTING /tmp/ccIyxmrj.s 			page 7


  86:src/kernel.cpp ****                 break;
  87:src/kernel.cpp ****             }
  88:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_wait: // a1 = sem
  89:src/kernel.cpp ****             {
  90:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
  91:src/kernel.cpp **** 
  92:src/kernel.cpp ****                 PCB::running->registers[10] = sem->wait(); // true kao proces treba da se blokira, 
  93:src/kernel.cpp ****                 break;
  94:src/kernel.cpp ****             }
  95:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_signal: // a1 = sem
  96:src/kernel.cpp ****             {
  97:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
  98:src/kernel.cpp **** 
  99:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)sem->signal(); // vraca pokazivac na PCB ako 
 100:src/kernel.cpp ****                 break;
 101:src/kernel.cpp ****             }
 102:src/kernel.cpp ****             case Kernel::sysCallCodes::sem_close: // a1 = sem
 103:src/kernel.cpp ****             {
 104:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 105:src/kernel.cpp **** 
 106:src/kernel.cpp ****                 sem->signalClosing();
 107:src/kernel.cpp ****                 delete sem; // destruktor ce signalizirati svim procesima da je obrisan
 108:src/kernel.cpp **** 
 109:src/kernel.cpp ****                 break;
 110:src/kernel.cpp ****             }
 111:src/kernel.cpp ****             case Kernel::sysCallCodes::time_sleep: // a1 = time
 112:src/kernel.cpp ****             {
 113:src/kernel.cpp ****                 size_t time = (size_t)PCB::running->registers[11];
 114:src/kernel.cpp ****                 PCB::running->timeSleeping = time;
 115:src/kernel.cpp ****                 SleepingProcesses::putToSleep(PCB::running);
 116:src/kernel.cpp ****                 break;
 117:src/kernel.cpp ****             }
 118:src/kernel.cpp ****             case Kernel::sysCallCodes::putc: // a1 = character
 119:src/kernel.cpp ****             {
 120:src/kernel.cpp ****                 char character = PCB::running->registers[11];
 121:src/kernel.cpp ****                 CCB::outputBuffer.pushBack(character);
 122:src/kernel.cpp ****                 break;
 123:src/kernel.cpp ****             }
 124:src/kernel.cpp ****             case Kernel::sysCallCodes::getc:
 125:src/kernel.cpp ****             {
 126:src/kernel.cpp ****                 while(CCB::inputBuffer.peekFront() == 0) {
 127:src/kernel.cpp ****                     sem_wait(CCB::inputBufferEmpty);
 128:src/kernel.cpp ****                     //PCB::dispatch();
 129:src/kernel.cpp ****                 }
 130:src/kernel.cpp **** 
 131:src/kernel.cpp ****                 PCB::running->registers[10] = CCB::inputBuffer.popFront();
 132:src/kernel.cpp ****                 break;
 133:src/kernel.cpp ****             }
 134:src/kernel.cpp ****             default:
 135:src/kernel.cpp ****                 printError();
 136:src/kernel.cpp ****                 break;
 137:src/kernel.cpp ****         }
 138:src/kernel.cpp ****         Kernel::w_sepc(sepc);
 139:src/kernel.cpp ****         Kernel::w_sstatus(sstatus);
 140:src/kernel.cpp ****         return;
 141:src/kernel.cpp ****     }
 142:src/kernel.cpp ****     else if(scause == (1UL << 63 | 1)) { // softverski prekid od tajmera
GAS LISTING /tmp/ccIyxmrj.s 			page 8


 131              		.loc 1 142 10 is_stmt 1
 132              		.loc 1 142 20 is_stmt 0
 133 0080 033784FD 		ld	a4,-40(s0)
 134              		.loc 1 142 10
 135 0084 9307F0FF 		li	a5,-1
 136 0088 9397F703 		slli	a5,a5,63
 137 008c 93871700 		addi	a5,a5,1
 138 0090 6306F72C 		beq	a4,a5,.L31
 143:src/kernel.cpp ****         PCB::timeSliceCounter++;
 144:src/kernel.cpp ****         SleepingProcesses::wakeUp(); // budi uspavane procese ako su postojali, ako ne smanjuje per
 145:src/kernel.cpp ****         if(PCB::timeSliceCounter >= PCB::running->timeSlice) {
 146:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 147:src/kernel.cpp ****             PCB::dispatch(); // vrsimo promenu konteksta ako je istekao time slice procesa
 148:src/kernel.cpp ****             Kernel::w_sepc(sepc);
 149:src/kernel.cpp ****             Kernel::w_sstatus(sstatus);
 150:src/kernel.cpp ****         }
 151:src/kernel.cpp ****         Kernel::mc_sip(Kernel::SIP_SSIE); // postavljamo SSIE na 0 jer smo obradili softverski prek
 152:src/kernel.cpp ****     }
 153:src/kernel.cpp ****     else if(scause == (1UL << 63 | 9)) { // spoljasnji prekid od konzole
 139              		.loc 1 153 10 is_stmt 1
 140              		.loc 1 153 20 is_stmt 0
 141 0094 033784FD 		ld	a4,-40(s0)
 142              		.loc 1 153 10
 143 0098 9307F0FF 		li	a5,-1
 144 009c 9397F703 		slli	a5,a5,63
 145 00a0 93879700 		addi	a5,a5,9
 146 00a4 630CF730 		beq	a4,a5,.L32
 154:src/kernel.cpp ****         if(plic_claim() == CONSOLE_IRQ) {
 155:src/kernel.cpp ****             if(*(char*)CONSOLE_STATUS & CONSOLE_TX_STATUS_BIT) { // putc
 156:src/kernel.cpp ****                 sem_signal(CCB::semOutput);
 157:src/kernel.cpp ****             }
 158:src/kernel.cpp ****             if(*(char*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT) { // getc
 159:src/kernel.cpp ****                 sem_signal(CCB::semInput);
 160:src/kernel.cpp ****             }
 161:src/kernel.cpp ****         }
 162:src/kernel.cpp ****         else {
 163:src/kernel.cpp ****             plic_complete(CONSOLE_IRQ);
 164:src/kernel.cpp ****         }
 165:src/kernel.cpp ****     }
 166:src/kernel.cpp ****     else { // neka vrsta greske, neocekivan skok na prekidnu rutinu
 167:src/kernel.cpp ****         printError();
 147              		.loc 1 167 9 is_stmt 1
 148              		.loc 1 167 19 is_stmt 0
 149 00a8 97000000 		call	_Z10printErrorv@plt
 149      E7800000 
 150              	.LVL0:
 151 00b0 6F004008 		j	.L3
 152              	.L4:
 153              	.LBB49:
  21:src/kernel.cpp ****         size_t volatile code = PCB::running->registers[10]; // a0
 154              		.loc 1 21 9 is_stmt 1
  21:src/kernel.cpp ****         size_t volatile code = PCB::running->registers[10]; // a0
 155              		.loc 1 21 14 is_stmt 0
 156 00b4 833704FD 		ld	a5,-48(s0)
 157 00b8 93874700 		addi	a5,a5,4
 158 00bc 2338F4FC 		sd	a5,-48(s0)
  22:src/kernel.cpp ****         switch(code) {
GAS LISTING /tmp/ccIyxmrj.s 			page 9


 159              		.loc 1 22 9 is_stmt 1
  22:src/kernel.cpp ****         switch(code) {
 160              		.loc 1 22 46 is_stmt 0
 161 00c0 97070000 		la	a5,_ZN3PCB7runningE
 161      83B70700 
 162 00c8 03B50700 		ld	a0,0(a5)
 163 00cc 03378501 		ld	a4,24(a0)
  22:src/kernel.cpp ****         switch(code) {
 164              		.loc 1 22 25
 165 00d0 83370705 		ld	a5,80(a4)
 166 00d4 2334F4FA 		sd	a5,-88(s0)
  23:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_alloc: // mem_alloc(size_t size) a1 - size
 167              		.loc 1 23 9 is_stmt 1
 168              	.LBB50:
  23:src/kernel.cpp ****             case Kernel::sysCallCodes::mem_alloc: // mem_alloc(size_t size) a1 - size
 169              		.loc 1 23 16 is_stmt 0
 170 00d8 833784FA 		ld	a5,-88(s0)
 171 00dc 93062004 		li	a3,66
 172 00e0 63E8F626 		bgtu	a5,a3,.L7
 173 00e4 93972700 		slli	a5,a5,2
 174 00e8 97060000 		lla	a3,.L9
 174      93860600 
 175 00f0 B387D700 		add	a5,a5,a3
 176 00f4 83A70700 		lw	a5,0(a5)
 177 00f8 B387D700 		add	a5,a5,a3
 178 00fc 67800700 		jr	a5
 179              		.section	.rodata
 180              		.align	2
 181              		.align	2
 182              	.L9:
 183 0000 00000000 		.word	.L7-.L9
 184 0004 00000000 		.word	.L21-.L9
 185 0008 00000000 		.word	.L20-.L9
 186 000c 00000000 		.word	.L7-.L9
 187 0010 00000000 		.word	.L7-.L9
 188 0014 00000000 		.word	.L7-.L9
 189 0018 00000000 		.word	.L7-.L9
 190 001c 00000000 		.word	.L7-.L9
 191 0020 00000000 		.word	.L7-.L9
 192 0024 00000000 		.word	.L7-.L9
 193 0028 00000000 		.word	.L7-.L9
 194 002c 00000000 		.word	.L7-.L9
 195 0030 00000000 		.word	.L7-.L9
 196 0034 00000000 		.word	.L7-.L9
 197 0038 00000000 		.word	.L7-.L9
 198 003c 00000000 		.word	.L7-.L9
 199 0040 00000000 		.word	.L7-.L9
 200 0044 00000000 		.word	.L19-.L9
 201 0048 00000000 		.word	.L18-.L9
 202 004c 00000000 		.word	.L17-.L9
 203 0050 00000000 		.word	.L16-.L9
 204 0054 00000000 		.word	.L7-.L9
 205 0058 00000000 		.word	.L7-.L9
 206 005c 00000000 		.word	.L7-.L9
 207 0060 00000000 		.word	.L7-.L9
 208 0064 00000000 		.word	.L7-.L9
 209 0068 00000000 		.word	.L7-.L9
GAS LISTING /tmp/ccIyxmrj.s 			page 10


 210 006c 00000000 		.word	.L7-.L9
 211 0070 00000000 		.word	.L7-.L9
 212 0074 00000000 		.word	.L7-.L9
 213 0078 00000000 		.word	.L7-.L9
 214 007c 00000000 		.word	.L7-.L9
 215 0080 00000000 		.word	.L7-.L9
 216 0084 00000000 		.word	.L15-.L9
 217 0088 00000000 		.word	.L14-.L9
 218 008c 00000000 		.word	.L13-.L9
 219 0090 00000000 		.word	.L12-.L9
 220 0094 00000000 		.word	.L7-.L9
 221 0098 00000000 		.word	.L7-.L9
 222 009c 00000000 		.word	.L7-.L9
 223 00a0 00000000 		.word	.L7-.L9
 224 00a4 00000000 		.word	.L7-.L9
 225 00a8 00000000 		.word	.L7-.L9
 226 00ac 00000000 		.word	.L7-.L9
 227 00b0 00000000 		.word	.L7-.L9
 228 00b4 00000000 		.word	.L7-.L9
 229 00b8 00000000 		.word	.L7-.L9
 230 00bc 00000000 		.word	.L7-.L9
 231 00c0 00000000 		.word	.L7-.L9
 232 00c4 00000000 		.word	.L11-.L9
 233 00c8 00000000 		.word	.L7-.L9
 234 00cc 00000000 		.word	.L7-.L9
 235 00d0 00000000 		.word	.L7-.L9
 236 00d4 00000000 		.word	.L7-.L9
 237 00d8 00000000 		.word	.L7-.L9
 238 00dc 00000000 		.word	.L7-.L9
 239 00e0 00000000 		.word	.L7-.L9
 240 00e4 00000000 		.word	.L7-.L9
 241 00e8 00000000 		.word	.L7-.L9
 242 00ec 00000000 		.word	.L7-.L9
 243 00f0 00000000 		.word	.L7-.L9
 244 00f4 00000000 		.word	.L7-.L9
 245 00f8 00000000 		.word	.L7-.L9
 246 00fc 00000000 		.word	.L7-.L9
 247 0100 00000000 		.word	.L7-.L9
 248 0104 00000000 		.word	.L10-.L9
 249 0108 00000000 		.word	.L8-.L9
 250              		.text
 251              	.L21:
 252              	.LBB51:
  24:src/kernel.cpp ****             {
 253              		.loc 1 24 13 is_stmt 1
  25:src/kernel.cpp ****                 size_t size = PCB::running->registers[11];
 254              		.loc 1 25 13
 255              	.LBB52:
  26:src/kernel.cpp ****                 size = MemoryAllocator::blocksInSize(size);
 256              		.loc 1 26 17
  26:src/kernel.cpp ****                 size = MemoryAllocator::blocksInSize(size);
 257              		.loc 1 26 24 is_stmt 0
 258 0100 03358705 		ld	a0,88(a4)
 259              	.LVL1:
  27:src/kernel.cpp **** 
 260              		.loc 1 27 17 is_stmt 1
 261              	.LBB53:
GAS LISTING /tmp/ccIyxmrj.s 			page 11


 262              	.LBB54:
 263              		.file 3 "src/../h/MemoryAllocator.h"
   1:src/../h/MemoryAllocator.h **** #ifndef PROJECT_BASE_MEMORYALLOCATOR_H
   2:src/../h/MemoryAllocator.h **** #define PROJECT_BASE_MEMORYALLOCATOR_H
   3:src/../h/MemoryAllocator.h **** 
   4:src/../h/MemoryAllocator.h **** #include "hw.h"
   5:src/../h/MemoryAllocator.h **** 
   6:src/../h/MemoryAllocator.h **** class MemoryAllocator {
   7:src/../h/MemoryAllocator.h **** public:
   8:src/../h/MemoryAllocator.h ****     /*
   9:src/../h/MemoryAllocator.h ****     Alocira (najmanje) size bajtova memorije, zaokruženo i poravnato na blokove veličine MEM_BLOC
  10:src/../h/MemoryAllocator.h ****     Svaki alocirani segment ima zaglavlje sa velicinom tog segmenta(vraca se adresa nakon tog zagla
  11:src/../h/MemoryAllocator.h **** 
  12:src/../h/MemoryAllocator.h ****     Vraća:
  13:src/../h/MemoryAllocator.h ****     pokazivač na alocirani deo memorije u slučaju uspeha, nullptr u slučaju neuspeha
  14:src/../h/MemoryAllocator.h **** 
  15:src/../h/MemoryAllocator.h ****     Radi se po algoritmu first fit(alociramo prvi segment koji je >= size). Ako je preostao prostor
  16:src/../h/MemoryAllocator.h ****     jednog bloka, taj preostali prostor se pridruzuje ovom koji smo sad alocirali(jer nema poente d
  17:src/../h/MemoryAllocator.h ****     */
  18:src/../h/MemoryAllocator.h ****     static void* mem_alloc(size_t size);
  19:src/../h/MemoryAllocator.h ****     /*
  20:src/../h/MemoryAllocator.h ****     Oslobađa prostor prethodno zauzet pomoću mem_alloc.
  21:src/../h/MemoryAllocator.h ****     Vraća 0 u slučaju uspeha, BAD_POINTER  flag ako je dostavljen los pokazivac.
  22:src/../h/MemoryAllocator.h ****     Ako je moguce, spaja dva susedna slobodna segmenta u jedan veci
  23:src/../h/MemoryAllocator.h ****     */
  24:src/../h/MemoryAllocator.h ****     static int mem_free(void* memSegment);
  25:src/../h/MemoryAllocator.h **** 
  26:src/../h/MemoryAllocator.h ****     enum memFreeFlags {
  27:src/../h/MemoryAllocator.h ****         BAD_POINTER = -1 // nije koriscen pokazviac iz mem_alloc
  28:src/../h/MemoryAllocator.h ****     };
  29:src/../h/MemoryAllocator.h **** 
  30:src/../h/MemoryAllocator.h ****     // Vraca minimalan potreban broj blokova za alokaciju memorije velicine size bajtova
  31:src/../h/MemoryAllocator.h ****     static inline size_t sizeInBlocks(size_t size) {
  32:src/../h/MemoryAllocator.h ****         return (size / MEM_BLOCK_SIZE) + (size % MEM_BLOCK_SIZE > 0);
  33:src/../h/MemoryAllocator.h ****     }
  34:src/../h/MemoryAllocator.h **** 
  35:src/../h/MemoryAllocator.h ****     // Vraca velicinu numOfBlocks blokova u bajtovima
  36:src/../h/MemoryAllocator.h ****     static inline size_t blocksInSize(size_t numOfBlocks) {
  37:src/../h/MemoryAllocator.h ****         return numOfBlocks * MEM_BLOCK_SIZE;
 264              		.loc 3 37 9
 265              	.LBE54:
 266              	.LBE53:
  29:src/kernel.cpp ****                 break;
 267              		.loc 1 29 17
  29:src/kernel.cpp ****                 break;
 268              		.loc 1 29 81 is_stmt 0
 269 0104 13156500 		slli	a0,a0,6
 270              	.LVL2:
 271 0108 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 271      E7800000 
 272              	.LVL3:
  29:src/kernel.cpp ****                 break;
 273              		.loc 1 29 31
 274 0110 97070000 		la	a5,_ZN3PCB7runningE
 274      83B70700 
 275 0118 83B70700 		ld	a5,0(a5)
 276 011c 83B78701 		ld	a5,24(a5)
GAS LISTING /tmp/ccIyxmrj.s 			page 12


  29:src/kernel.cpp ****                 break;
 277              		.loc 1 29 45
 278 0120 23B8A704 		sd	a0,80(a5)
  30:src/kernel.cpp ****             }
 279              		.loc 1 30 17 is_stmt 1
 280              	.L22:
 281              	.LBE52:
 282              	.LBE51:
 283              	.LBE50:
 138:src/kernel.cpp ****         Kernel::w_sstatus(sstatus);
 284              		.loc 1 138 9
 138:src/kernel.cpp ****         Kernel::w_sstatus(sstatus);
 285              		.loc 1 138 23 is_stmt 0
 286 0124 833704FD 		ld	a5,-48(s0)
 287              	.LVL4:
 288              	.LBB69:
 289              	.LBB70:
  54:src/../h/kernel.h ****     }
 290              		.loc 2 54 9 is_stmt 1
  54:src/../h/kernel.h ****     }
 291              		.loc 2 54 69 is_stmt 0
 292              	#APP
 293              	# 54 "src/../h/kernel.h" 1
 294              		csrw sepc, a5
 295              	# 0 "" 2
 296              	.LVL5:
 297              	#NO_APP
 298              	.LBE70:
 299              	.LBE69:
 139:src/kernel.cpp ****         return;
 300              		.loc 1 139 9 is_stmt 1
 139:src/kernel.cpp ****         return;
 301              		.loc 1 139 26 is_stmt 0
 302 012c 833784FC 		ld	a5,-56(s0)
 303              	.LVL6:
 304              	.LBB71:
 305              	.LBB72:
 131:src/../h/kernel.h ****     }
 132:src/../h/kernel.h **** 
 133:src/../h/kernel.h ****     // write register sstatus
 134:src/../h/kernel.h ****     static void w_sstatus(size_t sstatus) {
 135:src/../h/kernel.h ****         __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 306              		.loc 2 135 9 is_stmt 1
 307              		.loc 2 135 81 is_stmt 0
 308              	#APP
 309              	# 135 "src/../h/kernel.h" 1
 136              	    }
 310              		csrw sstatus, a5
 311              	# 0 "" 2
 312              	.LVL7:
 313              	#NO_APP
 314              	.LBE72:
 315              	.LBE71:
 140:src/kernel.cpp ****     }
 316              		.loc 1 140 9 is_stmt 1
 317              	.L3:
 318              	.LBE49:
GAS LISTING /tmp/ccIyxmrj.s 			page 13


 319              	.LBE48:
 168:src/kernel.cpp ****     }
 169:src/kernel.cpp **** 
 170:src/kernel.cpp **** }
 320              		.loc 1 170 1 is_stmt 0
 321 0134 83308105 		ld	ra,88(sp)
 322              		.cfi_remember_state
 323              		.cfi_restore 1
 324 0138 03340105 		ld	s0,80(sp)
 325              		.cfi_restore 8
 326              		.cfi_def_cfa 2, 96
 327 013c 83348104 		ld	s1,72(sp)
 328              		.cfi_restore 9
 329 0140 03390104 		ld	s2,64(sp)
 330              		.cfi_restore 18
 331 0144 13010106 		addi	sp,sp,96
 332              		.cfi_def_cfa_offset 0
 333 0148 67800000 		jr	ra
 334              	.L20:
 335              		.cfi_restore_state
 336              	.LBB81:
 337              	.LBB74:
 338              	.LBB73:
 339              	.LBB68:
  32:src/kernel.cpp ****             {
 340              		.loc 1 32 13 is_stmt 1
  33:src/kernel.cpp ****                 void* memSegment = (void*)PCB::running->registers[11];
 341              		.loc 1 33 13
 342              	.LBB55:
  34:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)MemoryAllocator::mem_free(memSegment);
 343              		.loc 1 34 17
 344              	.LVL8:
  35:src/kernel.cpp ****                 break;
 345              		.loc 1 35 17
  35:src/kernel.cpp ****                 break;
 346              		.loc 1 35 80 is_stmt 0
 347 014c 03358705 		ld	a0,88(a4)
 348 0150 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 348      E7800000 
 349              	.LVL9:
  35:src/kernel.cpp ****                 break;
 350              		.loc 1 35 31
 351 0158 97070000 		la	a5,_ZN3PCB7runningE
 351      83B70700 
 352 0160 83B70700 		ld	a5,0(a5)
 353 0164 83B78701 		ld	a5,24(a5)
  35:src/kernel.cpp ****                 break;
 354              		.loc 1 35 45
 355 0168 23B8A704 		sd	a0,80(a5)
  36:src/kernel.cpp ****             }
 356              		.loc 1 36 17 is_stmt 1
 357 016c 6FF09FFB 		j	.L22
 358              	.L17:
 359              	.LBE55:
  38:src/kernel.cpp ****             {
 360              		.loc 1 38 13
  39:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
GAS LISTING /tmp/ccIyxmrj.s 			page 14


 361              		.loc 1 39 13
  40:src/kernel.cpp ****                 PCB::dispatch();
 362              		.loc 1 40 17
  40:src/kernel.cpp ****                 PCB::dispatch();
 363              		.loc 1 40 39 is_stmt 0
 364 0170 97070000 		la	a5,_ZN3PCB16timeSliceCounterE
 364      83B70700 
 365 0178 23B00700 		sd	zero,0(a5)
  41:src/kernel.cpp ****                 break;
 366              		.loc 1 41 17 is_stmt 1
  41:src/kernel.cpp ****                 break;
 367              		.loc 1 41 30 is_stmt 0
 368 017c 97000000 		call	_ZN3PCB8dispatchEv@plt
 368      E7800000 
 369              	.LVL10:
  42:src/kernel.cpp ****             }
 370              		.loc 1 42 17 is_stmt 1
 371 0184 6FF01FFA 		j	.L22
 372              	.L18:
  44:src/kernel.cpp ****             {
 373              		.loc 1 44 13
  45:src/kernel.cpp ****                 PCB::running->finished = true;
 374              		.loc 1 45 13
  46:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
 375              		.loc 1 46 17
  46:src/kernel.cpp ****                 PCB::timeSliceCounter = 0;
 376              		.loc 1 46 40 is_stmt 0
 377 0188 93071000 		li	a5,1
 378 018c 2304F502 		sb	a5,40(a0)
  47:src/kernel.cpp ****                 PCB::dispatch();
 379              		.loc 1 47 17 is_stmt 1
  47:src/kernel.cpp ****                 PCB::dispatch();
 380              		.loc 1 47 39 is_stmt 0
 381 0190 97070000 		la	a5,_ZN3PCB16timeSliceCounterE
 381      83B70700 
 382 0198 23B00700 		sd	zero,0(a5)
  48:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)0;
 383              		.loc 1 48 17 is_stmt 1
  48:src/kernel.cpp ****                 PCB::running->registers[10] = (size_t)0;
 384              		.loc 1 48 30 is_stmt 0
 385 019c 97000000 		call	_ZN3PCB8dispatchEv@plt
 385      E7800000 
 386              	.LVL11:
  49:src/kernel.cpp ****                 break;
 387              		.loc 1 49 17 is_stmt 1
  49:src/kernel.cpp ****                 break;
 388              		.loc 1 49 31 is_stmt 0
 389 01a4 97070000 		la	a5,_ZN3PCB7runningE
 389      83B70700 
 390 01ac 83B70700 		ld	a5,0(a5)
 391 01b0 83B78701 		ld	a5,24(a5)
  49:src/kernel.cpp ****                 break;
 392              		.loc 1 49 45
 393 01b4 23B80704 		sd	zero,80(a5)
  50:src/kernel.cpp ****             }
 394              		.loc 1 50 17 is_stmt 1
 395 01b8 6FF0DFF6 		j	.L22
GAS LISTING /tmp/ccIyxmrj.s 			page 15


 396              	.L16:
  52:src/kernel.cpp ****             {
 397              		.loc 1 52 13
  53:src/kernel.cpp ****                 PCB **handle = (PCB **) PCB::running->registers[11];
 398              		.loc 1 53 13
 399              	.LBB56:
  54:src/kernel.cpp ****                 Scheduler::put(*handle);
 400              		.loc 1 54 17
  54:src/kernel.cpp ****                 Scheduler::put(*handle);
 401              		.loc 1 54 67 is_stmt 0
 402 01bc 83378705 		ld	a5,88(a4)
 403              	.LVL12:
  55:src/kernel.cpp ****                 break;
 404              		.loc 1 55 17 is_stmt 1
  55:src/kernel.cpp ****                 break;
 405              		.loc 1 55 31 is_stmt 0
 406 01c0 03B50700 		ld	a0,0(a5)
 407 01c4 97000000 		call	_ZN9Scheduler3putEP3PCB@plt
 407      E7800000 
 408              	.LVL13:
  56:src/kernel.cpp ****             }
 409              		.loc 1 56 17 is_stmt 1
 410 01cc 6FF09FF5 		j	.L22
 411              	.L19:
 412              	.LBE56:
  58:src/kernel.cpp ****             {
 413              		.loc 1 58 13
  59:src/kernel.cpp ****                 // argumenti
 414              		.loc 1 59 13
 415              	.LBB57:
  61:src/kernel.cpp ****                 void *arg = (void*)PCB::running->registers[13];
 416              		.loc 1 61 17
 417              	.LVL14:
  62:src/kernel.cpp **** 
 418              		.loc 1 62 17
  64:src/kernel.cpp ****                 *handle = PCB::createProccess(main, arg);
 419              		.loc 1 64 17
  64:src/kernel.cpp ****                 *handle = PCB::createProccess(main, arg);
 420              		.loc 1 64 65 is_stmt 0
 421 01d0 83348705 		ld	s1,88(a4)
 422              	.LVL15:
  65:src/kernel.cpp **** 
 423              		.loc 1 65 17 is_stmt 1
  65:src/kernel.cpp **** 
 424              		.loc 1 65 46 is_stmt 0
 425 01d4 83358706 		ld	a1,104(a4)
 426 01d8 03350706 		ld	a0,96(a4)
 427 01dc 97000000 		call	_ZN3PCB14createProccessEPFvvEPv@plt
 427      E7800000 
 428              	.LVL16:
  65:src/kernel.cpp **** 
 429              		.loc 1 65 25
 430 01e4 23B0A400 		sd	a0,0(s1)
  68:src/kernel.cpp **** 
 431              		.loc 1 68 17 is_stmt 1
  68:src/kernel.cpp **** 
 432              		.loc 1 68 31 is_stmt 0
GAS LISTING /tmp/ccIyxmrj.s 			page 16


 433 01e8 97070000 		la	a5,_ZN3PCB7runningE
 433      83B70700 
 434 01f0 83B70700 		ld	a5,0(a5)
 435 01f4 03B78701 		ld	a4,24(a5)
  68:src/kernel.cpp **** 
 436              		.loc 1 68 45
 437 01f8 23389704 		sd	s1,80(a4)
  70:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
 438              		.loc 1 70 17 is_stmt 1
  70:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
 439              		.loc 1 70 20 is_stmt 0
 440 01fc 03B70400 		ld	a4,0(s1)
  70:src/kernel.cpp ****                 // dodeljujemo alociran stek procesu
 441              		.loc 1 70 17
 442 0200 E30207F2 		beqz	a4,.L22
  72:src/kernel.cpp ****                 (*handle)->stack = stack;
 443              		.loc 1 72 17 is_stmt 1
  72:src/kernel.cpp ****                 (*handle)->stack = stack;
 444              		.loc 1 72 56 is_stmt 0
 445 0204 83B78701 		ld	a5,24(a5)
  72:src/kernel.cpp ****                 (*handle)->stack = stack;
 446              		.loc 1 72 68
 447 0208 83B70707 		ld	a5,112(a5)
 448              	.LVL17:
  73:src/kernel.cpp ****                 (*handle)->registers[2] = (size_t)&stack[DEFAULT_STACK_SIZE]; // sp(x2)
 449              		.loc 1 73 17 is_stmt 1
  73:src/kernel.cpp ****                 (*handle)->registers[2] = (size_t)&stack[DEFAULT_STACK_SIZE]; // sp(x2)
 450              		.loc 1 73 34 is_stmt 0
 451 020c 2334F700 		sd	a5,8(a4)
  74:src/kernel.cpp **** 
 452              		.loc 1 74 17 is_stmt 1
  74:src/kernel.cpp **** 
 453              		.loc 1 74 51 is_stmt 0
 454 0210 37870000 		li	a4,32768
 455 0214 B387E700 		add	a5,a5,a4
 456              	.LVL18:
  74:src/kernel.cpp **** 
 457              		.loc 1 74 18
 458 0218 03B70400 		ld	a4,0(s1)
  74:src/kernel.cpp **** 
 459              		.loc 1 74 28
 460 021c 03378701 		ld	a4,24(a4)
  74:src/kernel.cpp **** 
 461              		.loc 1 74 41
 462 0220 2338F700 		sd	a5,16(a4)
  76:src/kernel.cpp ****             }
 463              		.loc 1 76 17 is_stmt 1
 464 0224 6FF01FF0 		j	.L22
 465              	.LVL19:
 466              	.L15:
 467              	.LBE57:
  78:src/kernel.cpp ****             {
 468              		.loc 1 78 13
  79:src/kernel.cpp ****                 SCB **handle = (SCB**) PCB::running->registers[11];
 469              		.loc 1 79 13
 470              	.LBB58:
  80:src/kernel.cpp ****                 size_t init = (int) PCB::running->registers[12];
GAS LISTING /tmp/ccIyxmrj.s 			page 17


 471              		.loc 1 80 17
  80:src/kernel.cpp ****                 size_t init = (int) PCB::running->registers[12];
 472              		.loc 1 80 66 is_stmt 0
 473 0228 83348705 		ld	s1,88(a4)
 474              	.LVL20:
  81:src/kernel.cpp **** 
 475              		.loc 1 81 17 is_stmt 1
  81:src/kernel.cpp **** 
 476              		.loc 1 81 31 is_stmt 0
 477 022c 03290706 		lw	s2,96(a4)
 478              	.LVL21:
  83:src/kernel.cpp **** 
 479              		.loc 1 83 17 is_stmt 1
 480              	.LBB59:
 481              	.LBB60:
 482              		.file 4 "src/../h/SCB.h"
   1:src/../h/SCB.h **** #ifndef PROJECT_BASE_SCB_H
   2:src/../h/SCB.h **** #define PROJECT_BASE_SCB_H
   3:src/../h/SCB.h **** 
   4:src/../h/SCB.h **** #include "PCB.h"
   5:src/../h/SCB.h **** #include "Scheduler.h"
   6:src/../h/SCB.h **** 
   7:src/../h/SCB.h **** class SCB { // Semaphore Control Block
   8:src/../h/SCB.h **** public:
   9:src/../h/SCB.h ****     int getSemValue() const {
  10:src/../h/SCB.h ****         return semValue;
  11:src/../h/SCB.h ****     }
  12:src/../h/SCB.h **** 
  13:src/../h/SCB.h ****     // smanjuje vrednost semValue i ako ona padne manje od 0, vraca true(tekuci proces treba da se 
  14:src/../h/SCB.h ****     bool wait();
  15:src/../h/SCB.h **** 
  16:src/../h/SCB.h ****     // povecava vrednost semValue i ako je ona posle povecanja <= 0, vraca se proces koji treba da 
  17:src/../h/SCB.h ****     PCB* signal();
  18:src/../h/SCB.h **** 
  19:src/../h/SCB.h ****     void* operator new(size_t size);
  20:src/../h/SCB.h ****     void operator delete(void* memSegment);
  21:src/../h/SCB.h **** 
  22:src/../h/SCB.h ****     static SCB* createSemaphore(int semValue = 1) {
  23:src/../h/SCB.h ****         return new SCB(semValue);
 483              		.loc 4 23 9
 484              		.loc 4 23 32 is_stmt 0
 485 0230 13058001 		li	a0,24
 486 0234 97000000 		call	_ZN3SCBnwEm@plt
 486      E7800000 
 487              	.LVL22:
 488              	.LBB61:
 489              	.LBB62:
  24:src/../h/SCB.h ****     }
  25:src/../h/SCB.h **** 
  26:src/../h/SCB.h ****     // Pre zatvaranja svim procesima koji su cekali na semaforu signalizira da je semafor obrisan i
  27:src/../h/SCB.h ****     void signalClosing();
  28:src/../h/SCB.h **** private:
  29:src/../h/SCB.h ****     SCB(int semValue_ = 1) {
 490              		.loc 4 29 28
 491 023c 23300500 		sd	zero,0(a0)
 492 0240 23340500 		sd	zero,8(a0)
  30:src/../h/SCB.h ****         semValue = semValue_;
GAS LISTING /tmp/ccIyxmrj.s 			page 18


 493              		.loc 4 30 9 is_stmt 1
 494              		.loc 4 30 18 is_stmt 0
 495 0244 23282501 		sw	s2,16(a0)
 496              	.LVL23:
 497              	.LBE62:
 498              	.LBE61:
 499              	.LBE60:
 500              	.LBE59:
  83:src/kernel.cpp **** 
 501              		.loc 1 83 27
 502 0248 23B0A400 		sd	a0,0(s1)
  85:src/kernel.cpp ****                 break;
 503              		.loc 1 85 17 is_stmt 1
  85:src/kernel.cpp ****                 break;
 504              		.loc 1 85 31 is_stmt 0
 505 024c 97070000 		la	a5,_ZN3PCB7runningE
 505      83B70700 
 506 0254 83B70700 		ld	a5,0(a5)
 507 0258 83B78701 		ld	a5,24(a5)
  85:src/kernel.cpp ****                 break;
 508              		.loc 1 85 45
 509 025c 23B89704 		sd	s1,80(a5)
  86:src/kernel.cpp ****             }
 510              		.loc 1 86 17 is_stmt 1
 511 0260 6FF05FEC 		j	.L22
 512              	.LVL24:
 513              	.L13:
 514              	.LBE58:
  88:src/kernel.cpp ****             {
 515              		.loc 1 88 13
  89:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 516              		.loc 1 89 13
 517              	.LBB63:
  90:src/kernel.cpp **** 
 518              		.loc 1 90 17
  92:src/kernel.cpp ****                 break;
 519              		.loc 1 92 17
  92:src/kernel.cpp ****                 break;
 520              		.loc 1 92 56 is_stmt 0
 521 0264 03358705 		ld	a0,88(a4)
 522 0268 97000000 		call	_ZN3SCB4waitEv@plt
 522      E7800000 
 523              	.LVL25:
  92:src/kernel.cpp ****                 break;
 524              		.loc 1 92 31
 525 0270 97070000 		la	a5,_ZN3PCB7runningE
 525      83B70700 
 526 0278 83B70700 		ld	a5,0(a5)
 527 027c 83B78701 		ld	a5,24(a5)
  92:src/kernel.cpp ****                 break;
 528              		.loc 1 92 45
 529 0280 23B8A704 		sd	a0,80(a5)
  93:src/kernel.cpp ****             }
 530              		.loc 1 93 17 is_stmt 1
 531 0284 6FF01FEA 		j	.L22
 532              	.L12:
 533              	.LBE63:
GAS LISTING /tmp/ccIyxmrj.s 			page 19


  95:src/kernel.cpp ****             {
 534              		.loc 1 95 13
  96:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 535              		.loc 1 96 13
 536              	.LBB64:
  97:src/kernel.cpp **** 
 537              		.loc 1 97 17
 538              	.LVL26:
  99:src/kernel.cpp ****                 break;
 539              		.loc 1 99 17
  99:src/kernel.cpp ****                 break;
 540              		.loc 1 99 66 is_stmt 0
 541 0288 03358705 		ld	a0,88(a4)
 542 028c 97000000 		call	_ZN3SCB6signalEv@plt
 542      E7800000 
 543              	.LVL27:
  99:src/kernel.cpp ****                 break;
 544              		.loc 1 99 31
 545 0294 97070000 		la	a5,_ZN3PCB7runningE
 545      83B70700 
 546 029c 83B70700 		ld	a5,0(a5)
 547 02a0 83B78701 		ld	a5,24(a5)
  99:src/kernel.cpp ****                 break;
 548              		.loc 1 99 45
 549 02a4 23B8A704 		sd	a0,80(a5)
 100:src/kernel.cpp ****             }
 550              		.loc 1 100 17 is_stmt 1
 551 02a8 6FF0DFE7 		j	.L22
 552              	.L14:
 553              	.LBE64:
 102:src/kernel.cpp ****             {
 554              		.loc 1 102 13
 103:src/kernel.cpp ****                 SCB* sem = (SCB*) PCB::running->registers[11];
 555              		.loc 1 103 13
 556              	.LBB65:
 104:src/kernel.cpp **** 
 557              		.loc 1 104 17
 104:src/kernel.cpp **** 
 558              		.loc 1 104 61 is_stmt 0
 559 02ac 83348705 		ld	s1,88(a4)
 560              	.LVL28:
 106:src/kernel.cpp ****                 delete sem; // destruktor ce signalizirati svim procesima da je obrisan
 561              		.loc 1 106 17 is_stmt 1
 106:src/kernel.cpp ****                 delete sem; // destruktor ce signalizirati svim procesima da je obrisan
 562              		.loc 1 106 35 is_stmt 0
 563 02b0 13850400 		mv	a0,s1
 564 02b4 97000000 		call	_ZN3SCB13signalClosingEv@plt
 564      E7800000 
 565              	.LVL29:
 107:src/kernel.cpp **** 
 566              		.loc 1 107 17 is_stmt 1
 107:src/kernel.cpp **** 
 567              		.loc 1 107 27 is_stmt 0
 568 02bc E38404E6 		beqz	s1,.L22
 107:src/kernel.cpp **** 
 569              		.loc 1 107 24 discriminator 1
 570 02c0 13850400 		mv	a0,s1
GAS LISTING /tmp/ccIyxmrj.s 			page 20


 571 02c4 97000000 		call	_ZN3SCBdlEPv@plt
 571      E7800000 
 572              	.LVL30:
 573 02cc 6FF09FE5 		j	.L22
 574              	.LVL31:
 575              	.L11:
 576              	.LBE65:
 111:src/kernel.cpp ****             {
 577              		.loc 1 111 13 is_stmt 1
 112:src/kernel.cpp ****                 size_t time = (size_t)PCB::running->registers[11];
 578              		.loc 1 112 13
 579              	.LBB66:
 113:src/kernel.cpp ****                 PCB::running->timeSleeping = time;
 580              		.loc 1 113 17
 113:src/kernel.cpp ****                 PCB::running->timeSleeping = time;
 581              		.loc 1 113 24 is_stmt 0
 582 02d0 83378705 		ld	a5,88(a4)
 583              	.LVL32:
 114:src/kernel.cpp ****                 SleepingProcesses::putToSleep(PCB::running);
 584              		.loc 1 114 17 is_stmt 1
 114:src/kernel.cpp ****                 SleepingProcesses::putToSleep(PCB::running);
 585              		.loc 1 114 44 is_stmt 0
 586 02d4 2338F502 		sd	a5,48(a0)
 115:src/kernel.cpp ****                 break;
 587              		.loc 1 115 17 is_stmt 1
 115:src/kernel.cpp ****                 break;
 588              		.loc 1 115 46 is_stmt 0
 589 02d8 97000000 		call	_ZN17SleepingProcesses10putToSleepEP3PCB@plt
 589      E7800000 
 590              	.LVL33:
 116:src/kernel.cpp ****             }
 591              		.loc 1 116 17 is_stmt 1
 592 02e0 6FF05FE4 		j	.L22
 593              	.L8:
 594              	.LBE66:
 118:src/kernel.cpp ****             {
 595              		.loc 1 118 13
 119:src/kernel.cpp ****                 char character = PCB::running->registers[11];
 596              		.loc 1 119 13
 597              	.LBB67:
 120:src/kernel.cpp ****                 CCB::outputBuffer.pushBack(character);
 598              		.loc 1 120 17
 599              	.LVL34:
 121:src/kernel.cpp ****                 break;
 600              		.loc 1 121 17
 121:src/kernel.cpp ****                 break;
 601              		.loc 1 121 43 is_stmt 0
 602 02e4 83458705 		lbu	a1,88(a4)
 603 02e8 17050000 		la	a0,_ZN3CCB12outputBufferE
 603      03350500 
 604 02f0 97000000 		call	_ZN8IOBuffer8pushBackEc@plt
 604      E7800000 
 605              	.LVL35:
 122:src/kernel.cpp ****             }
 606              		.loc 1 122 17 is_stmt 1
 607 02f8 6FF0DFE2 		j	.L22
 608              	.L10:
GAS LISTING /tmp/ccIyxmrj.s 			page 21


 609              	.LBE67:
 124:src/kernel.cpp ****             {
 610              		.loc 1 124 13
 125:src/kernel.cpp ****                 while(CCB::inputBuffer.peekFront() == 0) {
 611              		.loc 1 125 13
 126:src/kernel.cpp ****                     sem_wait(CCB::inputBufferEmpty);
 612              		.loc 1 126 17
 126:src/kernel.cpp ****                     sem_wait(CCB::inputBufferEmpty);
 613              		.loc 1 126 52
 126:src/kernel.cpp ****                     sem_wait(CCB::inputBufferEmpty);
 614              		.loc 1 126 49 is_stmt 0
 615 02fc 17050000 		la	a0,_ZN3CCB11inputBufferE
 615      03350500 
 616 0304 97000000 		call	_ZN8IOBuffer9peekFrontEv@plt
 616      E7800000 
 617              	.LVL36:
 126:src/kernel.cpp ****                     sem_wait(CCB::inputBufferEmpty);
 618              		.loc 1 126 52
 619 030c 631E0500 		bnez	a0,.L23
 127:src/kernel.cpp ****                     //PCB::dispatch();
 620              		.loc 1 127 21 is_stmt 1
 127:src/kernel.cpp ****                     //PCB::dispatch();
 621              		.loc 1 127 29 is_stmt 0
 622 0310 97070000 		la	a5,_ZN3CCB16inputBufferEmptyE
 622      83B70700 
 623 0318 03B50700 		ld	a0,0(a5)
 624 031c 97000000 		call	_Z8sem_waitP3SCB@plt
 624      E7800000 
 625              	.LVL37:
 126:src/kernel.cpp ****                     sem_wait(CCB::inputBufferEmpty);
 626              		.loc 1 126 17
 627 0324 6FF09FFD 		j	.L10
 628              	.L23:
 131:src/kernel.cpp ****                 break;
 629              		.loc 1 131 17 is_stmt 1
 131:src/kernel.cpp ****                 break;
 630              		.loc 1 131 72 is_stmt 0
 631 0328 17050000 		la	a0,_ZN3CCB11inputBufferE
 631      03350500 
 632 0330 97000000 		call	_ZN8IOBuffer8popFrontEv@plt
 632      E7800000 
 633              	.LVL38:
 131:src/kernel.cpp ****                 break;
 634              		.loc 1 131 31
 635 0338 97070000 		la	a5,_ZN3PCB7runningE
 635      83B70700 
 636 0340 83B70700 		ld	a5,0(a5)
 637 0344 83B78701 		ld	a5,24(a5)
 131:src/kernel.cpp ****                 break;
 638              		.loc 1 131 45
 639 0348 23B8A704 		sd	a0,80(a5)
 132:src/kernel.cpp ****             }
 640              		.loc 1 132 17 is_stmt 1
 641 034c 6FF09FDD 		j	.L22
 642              	.L7:
 134:src/kernel.cpp ****                 printError();
 643              		.loc 1 134 13
GAS LISTING /tmp/ccIyxmrj.s 			page 22


 135:src/kernel.cpp ****                 break;
 644              		.loc 1 135 17
 135:src/kernel.cpp ****                 break;
 645              		.loc 1 135 27 is_stmt 0
 646 0350 97000000 		call	_Z10printErrorv@plt
 646      E7800000 
 647              	.LVL39:
 136:src/kernel.cpp ****         }
 648              		.loc 1 136 17 is_stmt 1
 649 0358 6FF0DFDC 		j	.L22
 650              	.L31:
 651              	.LBE68:
 652              	.LBE73:
 653              	.LBE74:
 143:src/kernel.cpp ****         SleepingProcesses::wakeUp(); // budi uspavane procese ako su postojali, ako ne smanjuje per
 654              		.loc 1 143 9
 143:src/kernel.cpp ****         SleepingProcesses::wakeUp(); // budi uspavane procese ako su postojali, ako ne smanjuje per
 655              		.loc 1 143 30 is_stmt 0
 656 035c 97040000 		la	s1,_ZN3PCB16timeSliceCounterE
 656      83B40400 
 657 0364 83B70400 		ld	a5,0(s1)
 658 0368 93871700 		addi	a5,a5,1
 659 036c 23B0F400 		sd	a5,0(s1)
 144:src/kernel.cpp ****         if(PCB::timeSliceCounter >= PCB::running->timeSlice) {
 660              		.loc 1 144 9 is_stmt 1
 144:src/kernel.cpp ****         if(PCB::timeSliceCounter >= PCB::running->timeSlice) {
 661              		.loc 1 144 34 is_stmt 0
 662 0370 97000000 		call	_ZN17SleepingProcesses6wakeUpEv@plt
 662      E7800000 
 663              	.LVL40:
 145:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 664              		.loc 1 145 9 is_stmt 1
 145:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 665              		.loc 1 145 51 is_stmt 0
 666 0378 97070000 		la	a5,_ZN3PCB7runningE
 666      83B70700 
 667 0380 83B70700 		ld	a5,0(a5)
 668 0384 03B70704 		ld	a4,64(a5)
 145:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 669              		.loc 1 145 34
 670 0388 83B70400 		ld	a5,0(s1)
 145:src/kernel.cpp ****             PCB::timeSliceCounter = 0;
 671              		.loc 1 145 9
 672 038c 63F8E700 		bleu	a4,a5,.L33
 673              	.L25:
 151:src/kernel.cpp ****     }
 674              		.loc 1 151 9 is_stmt 1
 675              	.LVL41:
 676              	.LBB75:
 677              	.LBB76:
  94:src/../h/kernel.h ****     }
 678              		.loc 2 94 9
  94:src/../h/kernel.h ****     }
 679              		.loc 2 94 68 is_stmt 0
 680 0390 93072000 		li	a5,2
 681              	#APP
 682              	# 94 "src/../h/kernel.h" 1
GAS LISTING /tmp/ccIyxmrj.s 			page 23


  95:src/../h/kernel.h **** 
 683              		csrc sip, a5
 684              	# 0 "" 2
 685              		.loc 2 95 5
 686              	#NO_APP
 687 0398 6FF0DFD9 		j	.L3
 688              	.LVL42:
 689              	.L33:
 690              	.LBE76:
 691              	.LBE75:
 146:src/kernel.cpp ****             PCB::dispatch(); // vrsimo promenu konteksta ako je istekao time slice procesa
 692              		.loc 1 146 13 is_stmt 1
 146:src/kernel.cpp ****             PCB::dispatch(); // vrsimo promenu konteksta ako je istekao time slice procesa
 693              		.loc 1 146 35 is_stmt 0
 694 039c 23B00400 		sd	zero,0(s1)
 147:src/kernel.cpp ****             Kernel::w_sepc(sepc);
 695              		.loc 1 147 13 is_stmt 1
 147:src/kernel.cpp ****             Kernel::w_sepc(sepc);
 696              		.loc 1 147 26 is_stmt 0
 697 03a0 97000000 		call	_ZN3PCB8dispatchEv@plt
 697      E7800000 
 698              	.LVL43:
 148:src/kernel.cpp ****             Kernel::w_sstatus(sstatus);
 699              		.loc 1 148 13 is_stmt 1
 148:src/kernel.cpp ****             Kernel::w_sstatus(sstatus);
 700              		.loc 1 148 27 is_stmt 0
 701 03a8 833704FD 		ld	a5,-48(s0)
 702              	.LVL44:
 703              	.LBB77:
 704              	.LBB78:
  54:src/../h/kernel.h ****     }
 705              		.loc 2 54 9 is_stmt 1
  54:src/../h/kernel.h ****     }
 706              		.loc 2 54 69 is_stmt 0
 707              	#APP
 708              	# 54 "src/../h/kernel.h" 1
 709              		csrw sepc, a5
 710              	# 0 "" 2
 711              	.LVL45:
 712              	#NO_APP
 713              	.LBE78:
 714              	.LBE77:
 149:src/kernel.cpp ****         }
 715              		.loc 1 149 13 is_stmt 1
 149:src/kernel.cpp ****         }
 716              		.loc 1 149 30 is_stmt 0
 717 03b0 833784FC 		ld	a5,-56(s0)
 718              	.LVL46:
 719              	.LBB79:
 720              	.LBB80:
 135:src/../h/kernel.h ****     }
 721              		.loc 2 135 9 is_stmt 1
 135:src/../h/kernel.h ****     }
 722              		.loc 2 135 81 is_stmt 0
 723              	#APP
 724              	# 135 "src/../h/kernel.h" 1
 725              		csrw sstatus, a5
GAS LISTING /tmp/ccIyxmrj.s 			page 24


 726              	# 0 "" 2
 727              		.loc 2 136 5
 728              	#NO_APP
 729 03b8 6FF09FFD 		j	.L25
 730              	.LVL47:
 731              	.L32:
 732              	.LBE80:
 733              	.LBE79:
 154:src/kernel.cpp ****             if(*(char*)CONSOLE_STATUS & CONSOLE_TX_STATUS_BIT) { // putc
 734              		.loc 1 154 9 is_stmt 1
 154:src/kernel.cpp ****             if(*(char*)CONSOLE_STATUS & CONSOLE_TX_STATUS_BIT) { // putc
 735              		.loc 1 154 22 is_stmt 0
 736 03bc 97000000 		call	plic_claim@plt
 736      E7800000 
 737              	.LVL48:
 154:src/kernel.cpp ****             if(*(char*)CONSOLE_STATUS & CONSOLE_TX_STATUS_BIT) { // putc
 738              		.loc 1 154 9
 739 03c4 9307A000 		li	a5,10
 740 03c8 631CF504 		bne	a0,a5,.L27
 155:src/kernel.cpp ****                 sem_signal(CCB::semOutput);
 741              		.loc 1 155 13 is_stmt 1
 155:src/kernel.cpp ****                 sem_signal(CCB::semOutput);
 742              		.loc 1 155 16 is_stmt 0
 743 03cc 97070000 		la	a5,CONSOLE_STATUS
 743      83B70700 
 744 03d4 83B40700 		ld	s1,0(a5)
 745 03d8 83C70400 		lbu	a5,0(s1)
 155:src/kernel.cpp ****                 sem_signal(CCB::semOutput);
 746              		.loc 1 155 13
 747 03dc 93F70702 		andi	a5,a5,32
 748 03e0 63940702 		bnez	a5,.L34
 749              	.L28:
 158:src/kernel.cpp ****                 sem_signal(CCB::semInput);
 750              		.loc 1 158 13 is_stmt 1
 158:src/kernel.cpp ****                 sem_signal(CCB::semInput);
 751              		.loc 1 158 16 is_stmt 0
 752 03e4 83C70400 		lbu	a5,0(s1)
 158:src/kernel.cpp ****                 sem_signal(CCB::semInput);
 753              		.loc 1 158 13
 754 03e8 93F71700 		andi	a5,a5,1
 755 03ec E38407D4 		beqz	a5,.L3
 159:src/kernel.cpp ****             }
 756              		.loc 1 159 17 is_stmt 1
 159:src/kernel.cpp ****             }
 757              		.loc 1 159 27 is_stmt 0
 758 03f0 97070000 		la	a5,_ZN3CCB8semInputE
 758      83B70700 
 759 03f8 03B50700 		ld	a0,0(a5)
 760 03fc 97000000 		call	_Z10sem_signalP3SCB@plt
 760      E7800000 
 761              	.LVL49:
 762 0404 6FF01FD3 		j	.L3
 763              	.L34:
 156:src/kernel.cpp ****             }
 764              		.loc 1 156 17 is_stmt 1
 156:src/kernel.cpp ****             }
 765              		.loc 1 156 27 is_stmt 0
GAS LISTING /tmp/ccIyxmrj.s 			page 25


 766 0408 97070000 		la	a5,_ZN3CCB9semOutputE
 766      83B70700 
 767 0410 03B50700 		ld	a0,0(a5)
 768 0414 97000000 		call	_Z10sem_signalP3SCB@plt
 768      E7800000 
 769              	.LVL50:
 770 041c 6FF09FFC 		j	.L28
 771              	.L27:
 163:src/kernel.cpp ****         }
 772              		.loc 1 163 13 is_stmt 1
 163:src/kernel.cpp ****         }
 773              		.loc 1 163 26 is_stmt 0
 774 0420 1305A000 		li	a0,10
 775 0424 97000000 		call	plic_complete@plt
 775      E7800000 
 776              	.LVL51:
 777 042c 6FF09FD0 		j	.L3
 778              	.LBE81:
 779              		.cfi_endproc
 780              	.LFE40:
 782              	.Letext0:
 783              		.file 5 "src/../h/hw.h"
 784              		.file 6 "src/../h/PCB.h"
 785              		.file 7 "src/../h/Scheduler.h"
 786              		.file 8 "src/../h/SleepingProcesses.h"
 787              		.file 9 "src/../h/CCB.h"
 788              		.file 10 "src/../h/syscall_c.h"
 789              		.file 11 "src/../h/print.h"
GAS LISTING /tmp/ccIyxmrj.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 kernel.cpp
     /tmp/ccIyxmrj.s:9      .text:0000000000000000 _ZN6Kernel10popSppSpieEv
     /tmp/ccIyxmrj.s:13     .text:0000000000000000 .L0 
     /tmp/ccIyxmrj.s:14     .text:0000000000000000 .L0 
     /tmp/ccIyxmrj.s:15     .text:0000000000000004 .L0 
     /tmp/ccIyxmrj.s:17     .text:0000000000000008 .L0 
     /tmp/ccIyxmrj.s:19     .text:000000000000000c .L0 
     /tmp/ccIyxmrj.s:21     .text:000000000000000c .L0 
      src/kernel.cpp:12     .text:000000000000000c .L0 
     /tmp/ccIyxmrj.s:27     .text:0000000000000010 .L0 
      src/kernel.cpp:13     .text:0000000000000010 .L0 
     /tmp/ccIyxmrj.s:33     .text:0000000000000014 .L0 
     /tmp/ccIyxmrj.s:34     .text:0000000000000018 .L0 
     /tmp/ccIyxmrj.s:35     .text:0000000000000018 .L0 
     /tmp/ccIyxmrj.s:37     .text:000000000000001c .L0 
     /tmp/ccIyxmrj.s:39     .text:0000000000000020 .L0 
     /tmp/ccIyxmrj.s:45     .text:0000000000000020 interruptHandler
     /tmp/ccIyxmrj.s:48     .text:0000000000000020 .L0 
     /tmp/ccIyxmrj.s:49     .text:0000000000000020 .L0 
     /tmp/ccIyxmrj.s:50     .text:0000000000000024 .L0 
     /tmp/ccIyxmrj.s:55     .text:0000000000000034 .L0 
     /tmp/ccIyxmrj.s:56     .text:0000000000000034 .L0 
     /tmp/ccIyxmrj.s:57     .text:0000000000000034 .L0 
     /tmp/ccIyxmrj.s:58     .text:0000000000000034 .L0 
     /tmp/ccIyxmrj.s:60     .text:0000000000000038 .L0 
     /tmp/ccIyxmrj.s:65     .text:0000000000000038 .L0 
     /tmp/ccIyxmrj.s:66     .text:0000000000000038 .L0 
     /tmp/ccIyxmrj.s:67     .text:0000000000000038 .L0 
   src/../h/kernel.h:36     .text:0000000000000038 .L0 
     /tmp/ccIyxmrj.s:75     .text:0000000000000040 .L0 
     /tmp/ccIyxmrj.s:76     .text:0000000000000040 .L0 
     /tmp/ccIyxmrj.s:80     .text:0000000000000044 .L0 
     /tmp/ccIyxmrj.s:84     .text:0000000000000048 .L0 
     /tmp/ccIyxmrj.s:85     .text:0000000000000048 .L0 
     /tmp/ccIyxmrj.s:86     .text:0000000000000048 .L0 
   src/../h/kernel.h:48     .text:0000000000000048 .L0 
     /tmp/ccIyxmrj.s:94     .text:0000000000000050 .L0 
     /tmp/ccIyxmrj.s:95     .text:0000000000000050 .L0 
     /tmp/ccIyxmrj.s:99     .text:0000000000000054 .L0 
     /tmp/ccIyxmrj.s:103    .text:0000000000000058 .L0 
     /tmp/ccIyxmrj.s:104    .text:0000000000000058 .L0 
     /tmp/ccIyxmrj.s:105    .text:0000000000000058 .L0 
   src/../h/kernel.h:129    .text:0000000000000058 .L0 
     /tmp/ccIyxmrj.s:113    .text:0000000000000060 .L0 
     /tmp/ccIyxmrj.s:114    .text:0000000000000060 .L0 
     /tmp/ccIyxmrj.s:118    .text:0000000000000064 .L0 
     /tmp/ccIyxmrj.s:121    .text:0000000000000068 .L0 
     /tmp/ccIyxmrj.s:122    .text:0000000000000068 .L0 
     /tmp/ccIyxmrj.s:124    .text:000000000000006c .L0 
     /tmp/ccIyxmrj.s:127    .text:0000000000000074 .L0 
     /tmp/ccIyxmrj.s:129    .text:0000000000000078 .L0 
     /tmp/ccIyxmrj.s:132    .text:0000000000000080 .L0 
     /tmp/ccIyxmrj.s:133    .text:0000000000000080 .L0 
     /tmp/ccIyxmrj.s:135    .text:0000000000000084 .L0 
     /tmp/ccIyxmrj.s:140    .text:0000000000000094 .L0 
     /tmp/ccIyxmrj.s:141    .text:0000000000000094 .L0 
GAS LISTING /tmp/ccIyxmrj.s 			page 27


     /tmp/ccIyxmrj.s:143    .text:0000000000000098 .L0 
     /tmp/ccIyxmrj.s:148    .text:00000000000000a8 .L0 
     /tmp/ccIyxmrj.s:149    .text:00000000000000a8 .L0 
     /tmp/ccIyxmrj.s:155    .text:00000000000000b4 .L0 
     /tmp/ccIyxmrj.s:156    .text:00000000000000b4 .L0 
     /tmp/ccIyxmrj.s:160    .text:00000000000000c0 .L0 
     /tmp/ccIyxmrj.s:161    .text:00000000000000c0 .L0 
     /tmp/ccIyxmrj.s:165    .text:00000000000000d0 .L0 
     /tmp/ccIyxmrj.s:169    .text:00000000000000d8 .L0 
     /tmp/ccIyxmrj.s:170    .text:00000000000000d8 .L0 
     /tmp/ccIyxmrj.s:254    .text:0000000000000100 .L0 
     /tmp/ccIyxmrj.s:256    .text:0000000000000100 .L0 
     /tmp/ccIyxmrj.s:257    .text:0000000000000100 .L0 
     /tmp/ccIyxmrj.s:258    .text:0000000000000100 .L0 
     /tmp/ccIyxmrj.s:264    .text:0000000000000104 .L0 
     /tmp/ccIyxmrj.s:267    .text:0000000000000104 .L0 
     /tmp/ccIyxmrj.s:268    .text:0000000000000104 .L0 
     /tmp/ccIyxmrj.s:269    .text:0000000000000104 .L0 
     /tmp/ccIyxmrj.s:274    .text:0000000000000110 .L0 
     /tmp/ccIyxmrj.s:278    .text:0000000000000120 .L0 
     /tmp/ccIyxmrj.s:284    .text:0000000000000124 .L0 
     /tmp/ccIyxmrj.s:285    .text:0000000000000124 .L0 
     /tmp/ccIyxmrj.s:286    .text:0000000000000124 .L0 
     /tmp/ccIyxmrj.s:291    .text:0000000000000128 .L0 
   src/../h/kernel.h:54     .text:0000000000000128 .L0 
     /tmp/ccIyxmrj.s:301    .text:000000000000012c .L0 
     /tmp/ccIyxmrj.s:302    .text:000000000000012c .L0 
     /tmp/ccIyxmrj.s:307    .text:0000000000000130 .L0 
   src/../h/kernel.h:135    .text:0000000000000130 .L0 
     /tmp/ccIyxmrj.s:320    .text:0000000000000134 .L0 
     /tmp/ccIyxmrj.s:321    .text:0000000000000134 .L0 
     /tmp/ccIyxmrj.s:322    .text:0000000000000138 .L0 
     /tmp/ccIyxmrj.s:323    .text:0000000000000138 .L0 
     /tmp/ccIyxmrj.s:325    .text:000000000000013c .L0 
     /tmp/ccIyxmrj.s:326    .text:000000000000013c .L0 
     /tmp/ccIyxmrj.s:328    .text:0000000000000140 .L0 
     /tmp/ccIyxmrj.s:330    .text:0000000000000144 .L0 
     /tmp/ccIyxmrj.s:332    .text:0000000000000148 .L0 
     /tmp/ccIyxmrj.s:335    .text:000000000000014c .L0 
     /tmp/ccIyxmrj.s:341    .text:000000000000014c .L0 
     /tmp/ccIyxmrj.s:343    .text:000000000000014c .L0 
     /tmp/ccIyxmrj.s:345    .text:000000000000014c .L0 
     /tmp/ccIyxmrj.s:346    .text:000000000000014c .L0 
     /tmp/ccIyxmrj.s:347    .text:000000000000014c .L0 
     /tmp/ccIyxmrj.s:351    .text:0000000000000158 .L0 
     /tmp/ccIyxmrj.s:355    .text:0000000000000168 .L0 
     /tmp/ccIyxmrj.s:357    .text:000000000000016c .L0 
     /tmp/ccIyxmrj.s:361    .text:0000000000000170 .L0 
     /tmp/ccIyxmrj.s:362    .text:0000000000000170 .L0 
     /tmp/ccIyxmrj.s:363    .text:0000000000000170 .L0 
     /tmp/ccIyxmrj.s:364    .text:0000000000000170 .L0 
     /tmp/ccIyxmrj.s:367    .text:000000000000017c .L0 
     /tmp/ccIyxmrj.s:368    .text:000000000000017c .L0 
     /tmp/ccIyxmrj.s:371    .text:0000000000000184 .L0 
     /tmp/ccIyxmrj.s:374    .text:0000000000000188 .L0 
     /tmp/ccIyxmrj.s:375    .text:0000000000000188 .L0 
     /tmp/ccIyxmrj.s:376    .text:0000000000000188 .L0 
GAS LISTING /tmp/ccIyxmrj.s 			page 28


     /tmp/ccIyxmrj.s:377    .text:0000000000000188 .L0 
     /tmp/ccIyxmrj.s:380    .text:0000000000000190 .L0 
     /tmp/ccIyxmrj.s:381    .text:0000000000000190 .L0 
     /tmp/ccIyxmrj.s:384    .text:000000000000019c .L0 
     /tmp/ccIyxmrj.s:385    .text:000000000000019c .L0 
     /tmp/ccIyxmrj.s:388    .text:00000000000001a4 .L0 
     /tmp/ccIyxmrj.s:389    .text:00000000000001a4 .L0 
     /tmp/ccIyxmrj.s:393    .text:00000000000001b4 .L0 
     /tmp/ccIyxmrj.s:395    .text:00000000000001b8 .L0 
     /tmp/ccIyxmrj.s:398    .text:00000000000001bc .L0 
     /tmp/ccIyxmrj.s:400    .text:00000000000001bc .L0 
     /tmp/ccIyxmrj.s:401    .text:00000000000001bc .L0 
     /tmp/ccIyxmrj.s:402    .text:00000000000001bc .L0 
     /tmp/ccIyxmrj.s:405    .text:00000000000001c0 .L0 
     /tmp/ccIyxmrj.s:406    .text:00000000000001c0 .L0 
     /tmp/ccIyxmrj.s:410    .text:00000000000001cc .L0 
     /tmp/ccIyxmrj.s:414    .text:00000000000001d0 .L0 
     /tmp/ccIyxmrj.s:416    .text:00000000000001d0 .L0 
     /tmp/ccIyxmrj.s:418    .text:00000000000001d0 .L0 
     /tmp/ccIyxmrj.s:419    .text:00000000000001d0 .L0 
     /tmp/ccIyxmrj.s:420    .text:00000000000001d0 .L0 
     /tmp/ccIyxmrj.s:421    .text:00000000000001d0 .L0 
     /tmp/ccIyxmrj.s:424    .text:00000000000001d4 .L0 
     /tmp/ccIyxmrj.s:425    .text:00000000000001d4 .L0 
     /tmp/ccIyxmrj.s:430    .text:00000000000001e4 .L0 
     /tmp/ccIyxmrj.s:432    .text:00000000000001e8 .L0 
     /tmp/ccIyxmrj.s:433    .text:00000000000001e8 .L0 
     /tmp/ccIyxmrj.s:437    .text:00000000000001f8 .L0 
     /tmp/ccIyxmrj.s:439    .text:00000000000001fc .L0 
     /tmp/ccIyxmrj.s:440    .text:00000000000001fc .L0 
     /tmp/ccIyxmrj.s:442    .text:0000000000000200 .L0 
     /tmp/ccIyxmrj.s:444    .text:0000000000000204 .L0 
     /tmp/ccIyxmrj.s:445    .text:0000000000000204 .L0 
     /tmp/ccIyxmrj.s:447    .text:0000000000000208 .L0 
     /tmp/ccIyxmrj.s:450    .text:000000000000020c .L0 
     /tmp/ccIyxmrj.s:451    .text:000000000000020c .L0 
     /tmp/ccIyxmrj.s:453    .text:0000000000000210 .L0 
     /tmp/ccIyxmrj.s:454    .text:0000000000000210 .L0 
     /tmp/ccIyxmrj.s:458    .text:0000000000000218 .L0 
     /tmp/ccIyxmrj.s:460    .text:000000000000021c .L0 
     /tmp/ccIyxmrj.s:462    .text:0000000000000220 .L0 
     /tmp/ccIyxmrj.s:464    .text:0000000000000224 .L0 
     /tmp/ccIyxmrj.s:469    .text:0000000000000228 .L0 
     /tmp/ccIyxmrj.s:471    .text:0000000000000228 .L0 
     /tmp/ccIyxmrj.s:472    .text:0000000000000228 .L0 
     /tmp/ccIyxmrj.s:473    .text:0000000000000228 .L0 
     /tmp/ccIyxmrj.s:476    .text:000000000000022c .L0 
     /tmp/ccIyxmrj.s:477    .text:000000000000022c .L0 
     /tmp/ccIyxmrj.s:483    .text:0000000000000230 .L0 
     /tmp/ccIyxmrj.s:484    .text:0000000000000230 .L0 
     /tmp/ccIyxmrj.s:485    .text:0000000000000230 .L0 
     /tmp/ccIyxmrj.s:491    .text:000000000000023c .L0 
     /tmp/ccIyxmrj.s:494    .text:0000000000000244 .L0 
     /tmp/ccIyxmrj.s:495    .text:0000000000000244 .L0 
     /tmp/ccIyxmrj.s:502    .text:0000000000000248 .L0 
     /tmp/ccIyxmrj.s:504    .text:000000000000024c .L0 
     /tmp/ccIyxmrj.s:505    .text:000000000000024c .L0 
GAS LISTING /tmp/ccIyxmrj.s 			page 29


     /tmp/ccIyxmrj.s:509    .text:000000000000025c .L0 
     /tmp/ccIyxmrj.s:511    .text:0000000000000260 .L0 
     /tmp/ccIyxmrj.s:516    .text:0000000000000264 .L0 
     /tmp/ccIyxmrj.s:518    .text:0000000000000264 .L0 
     /tmp/ccIyxmrj.s:519    .text:0000000000000264 .L0 
     /tmp/ccIyxmrj.s:520    .text:0000000000000264 .L0 
     /tmp/ccIyxmrj.s:521    .text:0000000000000264 .L0 
     /tmp/ccIyxmrj.s:525    .text:0000000000000270 .L0 
     /tmp/ccIyxmrj.s:529    .text:0000000000000280 .L0 
     /tmp/ccIyxmrj.s:531    .text:0000000000000284 .L0 
     /tmp/ccIyxmrj.s:535    .text:0000000000000288 .L0 
     /tmp/ccIyxmrj.s:537    .text:0000000000000288 .L0 
     /tmp/ccIyxmrj.s:539    .text:0000000000000288 .L0 
     /tmp/ccIyxmrj.s:540    .text:0000000000000288 .L0 
     /tmp/ccIyxmrj.s:541    .text:0000000000000288 .L0 
     /tmp/ccIyxmrj.s:545    .text:0000000000000294 .L0 
     /tmp/ccIyxmrj.s:549    .text:00000000000002a4 .L0 
     /tmp/ccIyxmrj.s:551    .text:00000000000002a8 .L0 
     /tmp/ccIyxmrj.s:555    .text:00000000000002ac .L0 
     /tmp/ccIyxmrj.s:557    .text:00000000000002ac .L0 
     /tmp/ccIyxmrj.s:558    .text:00000000000002ac .L0 
     /tmp/ccIyxmrj.s:559    .text:00000000000002ac .L0 
     /tmp/ccIyxmrj.s:562    .text:00000000000002b0 .L0 
     /tmp/ccIyxmrj.s:563    .text:00000000000002b0 .L0 
     /tmp/ccIyxmrj.s:567    .text:00000000000002bc .L0 
     /tmp/ccIyxmrj.s:568    .text:00000000000002bc .L0 
     /tmp/ccIyxmrj.s:570    .text:00000000000002c0 .L0 
     /tmp/ccIyxmrj.s:578    .text:00000000000002d0 .L0 
     /tmp/ccIyxmrj.s:580    .text:00000000000002d0 .L0 
     /tmp/ccIyxmrj.s:581    .text:00000000000002d0 .L0 
     /tmp/ccIyxmrj.s:582    .text:00000000000002d0 .L0 
     /tmp/ccIyxmrj.s:585    .text:00000000000002d4 .L0 
     /tmp/ccIyxmrj.s:586    .text:00000000000002d4 .L0 
     /tmp/ccIyxmrj.s:588    .text:00000000000002d8 .L0 
     /tmp/ccIyxmrj.s:589    .text:00000000000002d8 .L0 
     /tmp/ccIyxmrj.s:592    .text:00000000000002e0 .L0 
     /tmp/ccIyxmrj.s:596    .text:00000000000002e4 .L0 
     /tmp/ccIyxmrj.s:598    .text:00000000000002e4 .L0 
     /tmp/ccIyxmrj.s:600    .text:00000000000002e4 .L0 
     /tmp/ccIyxmrj.s:601    .text:00000000000002e4 .L0 
     /tmp/ccIyxmrj.s:602    .text:00000000000002e4 .L0 
     /tmp/ccIyxmrj.s:607    .text:00000000000002f8 .L0 
     /tmp/ccIyxmrj.s:611    .text:00000000000002fc .L0 
     /tmp/ccIyxmrj.s:612    .text:00000000000002fc .L0 
     /tmp/ccIyxmrj.s:613    .text:00000000000002fc .L0 
     /tmp/ccIyxmrj.s:614    .text:00000000000002fc .L0 
     /tmp/ccIyxmrj.s:615    .text:00000000000002fc .L0 
     /tmp/ccIyxmrj.s:619    .text:000000000000030c .L0 
     /tmp/ccIyxmrj.s:621    .text:0000000000000310 .L0 
     /tmp/ccIyxmrj.s:622    .text:0000000000000310 .L0 
     /tmp/ccIyxmrj.s:627    .text:0000000000000324 .L0 
     /tmp/ccIyxmrj.s:630    .text:0000000000000328 .L0 
     /tmp/ccIyxmrj.s:631    .text:0000000000000328 .L0 
     /tmp/ccIyxmrj.s:635    .text:0000000000000338 .L0 
     /tmp/ccIyxmrj.s:639    .text:0000000000000348 .L0 
     /tmp/ccIyxmrj.s:641    .text:000000000000034c .L0 
     /tmp/ccIyxmrj.s:644    .text:0000000000000350 .L0 
GAS LISTING /tmp/ccIyxmrj.s 			page 30


     /tmp/ccIyxmrj.s:645    .text:0000000000000350 .L0 
     /tmp/ccIyxmrj.s:646    .text:0000000000000350 .L0 
     /tmp/ccIyxmrj.s:649    .text:0000000000000358 .L0 
     /tmp/ccIyxmrj.s:655    .text:000000000000035c .L0 
     /tmp/ccIyxmrj.s:656    .text:000000000000035c .L0 
     /tmp/ccIyxmrj.s:661    .text:0000000000000370 .L0 
     /tmp/ccIyxmrj.s:662    .text:0000000000000370 .L0 
     /tmp/ccIyxmrj.s:665    .text:0000000000000378 .L0 
     /tmp/ccIyxmrj.s:666    .text:0000000000000378 .L0 
     /tmp/ccIyxmrj.s:670    .text:0000000000000388 .L0 
     /tmp/ccIyxmrj.s:672    .text:000000000000038c .L0 
     /tmp/ccIyxmrj.s:678    .text:0000000000000390 .L0 
     /tmp/ccIyxmrj.s:679    .text:0000000000000390 .L0 
     /tmp/ccIyxmrj.s:680    .text:0000000000000390 .L0 
     /tmp/ccIyxmrj.s:687    .text:0000000000000398 .L0 
     /tmp/ccIyxmrj.s:693    .text:000000000000039c .L0 
     /tmp/ccIyxmrj.s:694    .text:000000000000039c .L0 
     /tmp/ccIyxmrj.s:696    .text:00000000000003a0 .L0 
     /tmp/ccIyxmrj.s:697    .text:00000000000003a0 .L0 
     /tmp/ccIyxmrj.s:700    .text:00000000000003a8 .L0 
     /tmp/ccIyxmrj.s:701    .text:00000000000003a8 .L0 
     /tmp/ccIyxmrj.s:706    .text:00000000000003ac .L0 
   src/../h/kernel.h:54     .text:00000000000003ac .L0 
     /tmp/ccIyxmrj.s:716    .text:00000000000003b0 .L0 
     /tmp/ccIyxmrj.s:717    .text:00000000000003b0 .L0 
     /tmp/ccIyxmrj.s:722    .text:00000000000003b4 .L0 
   src/../h/kernel.h:135    .text:00000000000003b4 .L0 
     /tmp/ccIyxmrj.s:729    .text:00000000000003b8 .L0 
     /tmp/ccIyxmrj.s:735    .text:00000000000003bc .L0 
     /tmp/ccIyxmrj.s:736    .text:00000000000003bc .L0 
     /tmp/ccIyxmrj.s:739    .text:00000000000003c4 .L0 
     /tmp/ccIyxmrj.s:742    .text:00000000000003cc .L0 
     /tmp/ccIyxmrj.s:743    .text:00000000000003cc .L0 
     /tmp/ccIyxmrj.s:747    .text:00000000000003dc .L0 
     /tmp/ccIyxmrj.s:751    .text:00000000000003e4 .L0 
     /tmp/ccIyxmrj.s:752    .text:00000000000003e4 .L0 
     /tmp/ccIyxmrj.s:754    .text:00000000000003e8 .L0 
     /tmp/ccIyxmrj.s:757    .text:00000000000003f0 .L0 
     /tmp/ccIyxmrj.s:758    .text:00000000000003f0 .L0 
     /tmp/ccIyxmrj.s:765    .text:0000000000000408 .L0 
     /tmp/ccIyxmrj.s:766    .text:0000000000000408 .L0 
     /tmp/ccIyxmrj.s:773    .text:0000000000000420 .L0 
     /tmp/ccIyxmrj.s:774    .text:0000000000000420 .L0 
     /tmp/ccIyxmrj.s:779    .text:0000000000000430 .L0 
     /tmp/ccIyxmrj.s:790    .text:0000000000000430 .L0 
     /tmp/ccIyxmrj.s:161    .text:00000000000000c0 .L0 
     /tmp/ccIyxmrj.s:182    .rodata:0000000000000000 .L9
     /tmp/ccIyxmrj.s:174    .text:00000000000000e8 .L0 
     /tmp/ccIyxmrj.s:274    .text:0000000000000110 .L0 
     /tmp/ccIyxmrj.s:351    .text:0000000000000158 .L0 
     /tmp/ccIyxmrj.s:364    .text:0000000000000170 .L0 
     /tmp/ccIyxmrj.s:381    .text:0000000000000190 .L0 
     /tmp/ccIyxmrj.s:389    .text:00000000000001a4 .L0 
     /tmp/ccIyxmrj.s:433    .text:00000000000001e8 .L0 
     /tmp/ccIyxmrj.s:505    .text:000000000000024c .L0 
     /tmp/ccIyxmrj.s:525    .text:0000000000000270 .L0 
     /tmp/ccIyxmrj.s:545    .text:0000000000000294 .L0 
GAS LISTING /tmp/ccIyxmrj.s 			page 31


     /tmp/ccIyxmrj.s:603    .text:00000000000002e8 .L0 
     /tmp/ccIyxmrj.s:615    .text:00000000000002fc .L0 
     /tmp/ccIyxmrj.s:622    .text:0000000000000310 .L0 
     /tmp/ccIyxmrj.s:631    .text:0000000000000328 .L0 
     /tmp/ccIyxmrj.s:635    .text:0000000000000338 .L0 
     /tmp/ccIyxmrj.s:656    .text:000000000000035c .L0 
     /tmp/ccIyxmrj.s:666    .text:0000000000000378 .L0 
     /tmp/ccIyxmrj.s:743    .text:00000000000003cc .L0 
     /tmp/ccIyxmrj.s:758    .text:00000000000003f0 .L0 
     /tmp/ccIyxmrj.s:766    .text:0000000000000408 .L0 
     /tmp/ccIyxmrj.s:152    .text:00000000000000b4 .L4
     /tmp/ccIyxmrj.s:650    .text:000000000000035c .L31
     /tmp/ccIyxmrj.s:731    .text:00000000000003bc .L32
     /tmp/ccIyxmrj.s:317    .text:0000000000000134 .L3
     /tmp/ccIyxmrj.s:642    .text:0000000000000350 .L7
     /tmp/ccIyxmrj.s:280    .text:0000000000000124 .L22
     /tmp/ccIyxmrj.s:628    .text:0000000000000328 .L23
     /tmp/ccIyxmrj.s:608    .text:00000000000002fc .L10
     /tmp/ccIyxmrj.s:689    .text:000000000000039c .L33
     /tmp/ccIyxmrj.s:673    .text:0000000000000390 .L25
     /tmp/ccIyxmrj.s:771    .text:0000000000000420 .L27
     /tmp/ccIyxmrj.s:763    .text:0000000000000408 .L34
     /tmp/ccIyxmrj.s:749    .text:00000000000003e4 .L28
     /tmp/ccIyxmrj.s:251    .text:0000000000000100 .L21
     /tmp/ccIyxmrj.s:334    .text:000000000000014c .L20
     /tmp/ccIyxmrj.s:411    .text:00000000000001d0 .L19
     /tmp/ccIyxmrj.s:372    .text:0000000000000188 .L18
     /tmp/ccIyxmrj.s:358    .text:0000000000000170 .L17
     /tmp/ccIyxmrj.s:396    .text:00000000000001bc .L16
     /tmp/ccIyxmrj.s:466    .text:0000000000000228 .L15
     /tmp/ccIyxmrj.s:552    .text:00000000000002ac .L14
     /tmp/ccIyxmrj.s:513    .text:0000000000000264 .L13
     /tmp/ccIyxmrj.s:532    .text:0000000000000288 .L12
     /tmp/ccIyxmrj.s:575    .text:00000000000002d0 .L11
     /tmp/ccIyxmrj.s:593    .text:00000000000002e4 .L8
     /tmp/ccIyxmrj.s:2667   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccIyxmrj.s:4316   .debug_str:00000000000009ca .LASF203
     /tmp/ccIyxmrj.s:4026   .debug_str:00000000000000f8 .LASF204
     /tmp/ccIyxmrj.s:4274   .debug_str:00000000000008cd .LASF205
     /tmp/ccIyxmrj.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccIyxmrj.s:782    .text:0000000000000430 .Letext0
     /tmp/ccIyxmrj.s:3992   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccIyxmrj.s:4102   .debug_str:0000000000000354 .LASF0
     /tmp/ccIyxmrj.s:4138   .debug_str:000000000000045c .LASF1
     /tmp/ccIyxmrj.s:4256   .debug_str:0000000000000834 .LASF2
     /tmp/ccIyxmrj.s:4262   .debug_str:0000000000000863 .LASF4
     /tmp/ccIyxmrj.s:4116   .debug_str:00000000000003ac .LASF3
     /tmp/ccIyxmrj.s:4004   .debug_str:000000000000002f .LASF5
     /tmp/ccIyxmrj.s:4212   .debug_str:00000000000006e4 .LASF6
     /tmp/ccIyxmrj.s:4128   .debug_str:000000000000042c .LASF7
     /tmp/ccIyxmrj.s:4076   .debug_str:00000000000002ad .LASF8
     /tmp/ccIyxmrj.s:4084   .debug_str:00000000000002ec .LASF9
     /tmp/ccIyxmrj.s:4032   .debug_str:000000000000011e .LASF10
     /tmp/ccIyxmrj.s:4070   .debug_str:0000000000000272 .LASF11
     /tmp/ccIyxmrj.s:4038   .debug_str:0000000000000156 .LASF12
     /tmp/ccIyxmrj.s:4030   .debug_str:000000000000010e .LASF13
     /tmp/ccIyxmrj.s:4290   .debug_str:0000000000000937 .LASF14
GAS LISTING /tmp/ccIyxmrj.s 			page 32


     /tmp/ccIyxmrj.s:4060   .debug_str:0000000000000205 .LASF15
     /tmp/ccIyxmrj.s:4280   .debug_str:0000000000000900 .LASF16
     /tmp/ccIyxmrj.s:4292   .debug_str:0000000000000943 .LASF64
     /tmp/ccIyxmrj.s:4082   .debug_str:00000000000002df .LASF30
     /tmp/ccIyxmrj.s:4178   .debug_str:000000000000058c .LASF17
     /tmp/ccIyxmrj.s:4300   .debug_str:0000000000000972 .LASF18
     /tmp/ccIyxmrj.s:4288   .debug_str:0000000000000929 .LASF19
     /tmp/ccIyxmrj.s:4168   .debug_str:000000000000054a .LASF20
     /tmp/ccIyxmrj.s:4240   .debug_str:00000000000007af .LASF21
     /tmp/ccIyxmrj.s:4214   .debug_str:00000000000006f7 .LASF22
     /tmp/ccIyxmrj.s:4244   .debug_str:00000000000007ca .LASF23
     /tmp/ccIyxmrj.s:4236   .debug_str:000000000000079a .LASF24
     /tmp/ccIyxmrj.s:4410   .debug_str:0000000000000d0b .LASF25
     /tmp/ccIyxmrj.s:4090   .debug_str:0000000000000318 .LASF26
     /tmp/ccIyxmrj.s:4250   .debug_str:0000000000000815 .LASF27
     /tmp/ccIyxmrj.s:4108   .debug_str:000000000000037f .LASF28
     /tmp/ccIyxmrj.s:4172   .debug_str:0000000000000567 .LASF29
     /tmp/ccIyxmrj.s:4238   .debug_str:00000000000007a4 .LASF31
     /tmp/ccIyxmrj.s:4132   .debug_str:0000000000000449 .LASF32
     /tmp/ccIyxmrj.s:4368   .debug_str:0000000000000be7 .LASF33
     /tmp/ccIyxmrj.s:4378   .debug_str:0000000000000c2a .LASF71
     /tmp/ccIyxmrj.s:4114   .debug_str:0000000000000397 .LASF73
     /tmp/ccIyxmrj.s:4092   .debug_str:0000000000000323 .LASF85
     /tmp/ccIyxmrj.s:4208   .debug_str:00000000000006bc .LASF87
     /tmp/ccIyxmrj.s:4338   .debug_str:0000000000000b3c .LASF34
     /tmp/ccIyxmrj.s:4232   .debug_str:000000000000076e .LASF36
     /tmp/ccIyxmrj.s:4252   .debug_str:0000000000000820 .LASF38
     /tmp/ccIyxmrj.s:4234   .debug_str:0000000000000784 .LASF40
     /tmp/ccIyxmrj.s:4230   .debug_str:0000000000000767 .LASF35
     /tmp/ccIyxmrj.s:4198   .debug_str:000000000000065a .LASF37
     /tmp/ccIyxmrj.s:4196   .debug_str:0000000000000653 .LASF39
     /tmp/ccIyxmrj.s:4246   .debug_str:00000000000007d3 .LASF41
     /tmp/ccIyxmrj.s:4376   .debug_str:0000000000000c22 .LASF42
     /tmp/ccIyxmrj.s:4270   .debug_str:00000000000008a7 .LASF43
     /tmp/ccIyxmrj.s:4188   .debug_str:000000000000061a .LASF44
     /tmp/ccIyxmrj.s:4148   .debug_str:00000000000004c7 .LASF45
     /tmp/ccIyxmrj.s:4156   .debug_str:00000000000004fb .LASF46
     /tmp/ccIyxmrj.s:4186   .debug_str:0000000000000605 .LASF47
     /tmp/ccIyxmrj.s:4408   .debug_str:0000000000000d03 .LASF48
     /tmp/ccIyxmrj.s:4062   .debug_str:000000000000021b .LASF49
     /tmp/ccIyxmrj.s:4286   .debug_str:0000000000000922 .LASF50
     /tmp/ccIyxmrj.s:4220   .debug_str:0000000000000722 .LASF51
     /tmp/ccIyxmrj.s:4266   .debug_str:0000000000000882 .LASF52
     /tmp/ccIyxmrj.s:4008   .debug_str:0000000000000041 .LASF53
     /tmp/ccIyxmrj.s:4056   .debug_str:00000000000001e6 .LASF54
     /tmp/ccIyxmrj.s:4258   .debug_str:0000000000000842 .LASF55
     /tmp/ccIyxmrj.s:4110   .debug_str:0000000000000384 .LASF56
     /tmp/ccIyxmrj.s:4194   .debug_str:0000000000000640 .LASF57
     /tmp/ccIyxmrj.s:4006   .debug_str:0000000000000036 .LASF58
     /tmp/ccIyxmrj.s:4350   .debug_str:0000000000000b6d .LASF59
     /tmp/ccIyxmrj.s:4254   .debug_str:0000000000000829 .LASF60
     /tmp/ccIyxmrj.s:4192   .debug_str:0000000000000627 .LASF61
     /tmp/ccIyxmrj.s:4360   .debug_str:0000000000000bc3 .LASF62
     /tmp/ccIyxmrj.s:4068   .debug_str:000000000000025b .LASF63
     /tmp/ccIyxmrj.s:4354   .debug_str:0000000000000b91 .LASF108
     /tmp/ccIyxmrj.s:4016   .debug_str:0000000000000099 .LASF110
     /tmp/ccIyxmrj.s:4302   .debug_str:000000000000097b .LASF65
GAS LISTING /tmp/ccIyxmrj.s 			page 33


     /tmp/ccIyxmrj.s:4370   .debug_str:0000000000000bf0 .LASF67
     /tmp/ccIyxmrj.s:4054   .debug_str:00000000000001d3 .LASF66
     /tmp/ccIyxmrj.s:4328   .debug_str:0000000000000ae6 .LASF68
     /tmp/ccIyxmrj.s:4310   .debug_str:00000000000009a2 .LASF69
     /tmp/ccIyxmrj.s:4118   .debug_str:00000000000003be .LASF70
     /tmp/ccIyxmrj.s:4066   .debug_str:000000000000024b .LASF72
     /tmp/ccIyxmrj.s:4414   .debug_str:0000000000000d1b .LASF74
     /tmp/ccIyxmrj.s:4086   .debug_str:00000000000002fa .LASF75
     /tmp/ccIyxmrj.s:4144   .debug_str:000000000000049d .LASF76
     /tmp/ccIyxmrj.s:4036   .debug_str:0000000000000148 .LASF77
     /tmp/ccIyxmrj.s:4034   .debug_str:000000000000012d .LASF78
     /tmp/ccIyxmrj.s:4306   .debug_str:000000000000098b .LASF79
     /tmp/ccIyxmrj.s:4392   .debug_str:0000000000000c7e .LASF80
     /tmp/ccIyxmrj.s:4342   .debug_str:0000000000000b4a .LASF81
     /tmp/ccIyxmrj.s:4318   .debug_str:0000000000000a8e .LASF82
     /tmp/ccIyxmrj.s:4402   .debug_str:0000000000000cc2 .LASF83
     /tmp/ccIyxmrj.s:4072   .debug_str:0000000000000281 .LASF84
     /tmp/ccIyxmrj.s:4276   .debug_str:00000000000008eb .LASF206
     /tmp/ccIyxmrj.s:4142   .debug_str:0000000000000497 .LASF86
     /tmp/ccIyxmrj.s:4146   .debug_str:00000000000004b7 .LASF88
     /tmp/ccIyxmrj.s:4314   .debug_str:00000000000009c2 .LASF133
     /tmp/ccIyxmrj.s:4136   .debug_str:0000000000000457 .LASF89
     /tmp/ccIyxmrj.s:4396   .debug_str:0000000000000ca4 .LASF90
     /tmp/ccIyxmrj.s:4400   .debug_str:0000000000000cb5 .LASF91
     /tmp/ccIyxmrj.s:4094   .debug_str:000000000000032e .LASF92
     /tmp/ccIyxmrj.s:3998   .debug_str:000000000000000c .LASF93
     /tmp/ccIyxmrj.s:4112   .debug_str:000000000000038a .LASF94
     /tmp/ccIyxmrj.s:4096   .debug_str:000000000000033a .LASF95
     /tmp/ccIyxmrj.s:4020   .debug_str:00000000000000b5 .LASF96
     /tmp/ccIyxmrj.s:4042   .debug_str:000000000000016f .LASF145
     /tmp/ccIyxmrj.s:4002   .debug_str:0000000000000024 .LASF97
     /tmp/ccIyxmrj.s:4164   .debug_str:0000000000000538 .LASF98
     /tmp/ccIyxmrj.s:4364   .debug_str:0000000000000bd6 .LASF99
     /tmp/ccIyxmrj.s:4130   .debug_str:000000000000043f .LASF100
     /tmp/ccIyxmrj.s:4398   .debug_str:0000000000000cb0 .LASF101
     /tmp/ccIyxmrj.s:4278   .debug_str:00000000000008f7 .LASF102
     /tmp/ccIyxmrj.s:4202   .debug_str:0000000000000697 .LASF103
     /tmp/ccIyxmrj.s:4154   .debug_str:00000000000004f0 .LASF104
     /tmp/ccIyxmrj.s:4374   .debug_str:0000000000000c15 .LASF105
     /tmp/ccIyxmrj.s:4052   .debug_str:00000000000001c5 .LASF106
     /tmp/ccIyxmrj.s:4326   .debug_str:0000000000000adc .LASF107
     /tmp/ccIyxmrj.s:4272   .debug_str:00000000000008bc .LASF135
     /tmp/ccIyxmrj.s:4050   .debug_str:00000000000001bc .LASF115
     /tmp/ccIyxmrj.s:4012   .debug_str:000000000000006d .LASF117
     /tmp/ccIyxmrj.s:4104   .debug_str:0000000000000361 .LASF109
     /tmp/ccIyxmrj.s:4358   .debug_str:0000000000000ba5 .LASF111
     /tmp/ccIyxmrj.s:4106   .debug_str:0000000000000370 .LASF112
     /tmp/ccIyxmrj.s:4268   .debug_str:0000000000000889 .LASF113
     /tmp/ccIyxmrj.s:4150   .debug_str:00000000000004dc .LASF114
     /tmp/ccIyxmrj.s:4394   .debug_str:0000000000000c94 .LASF116
     /tmp/ccIyxmrj.s:4024   .debug_str:00000000000000dd .LASF118
     /tmp/ccIyxmrj.s:4162   .debug_str:0000000000000533 .LASF119
     /tmp/ccIyxmrj.s:4206   .debug_str:00000000000006ac .LASF120
     /tmp/ccIyxmrj.s:4074   .debug_str:00000000000002a1 .LASF172
     /tmp/ccIyxmrj.s:4362   .debug_str:0000000000000bcd .LASF121
     /tmp/ccIyxmrj.s:4380   .debug_str:0000000000000c32 .LASF122
     /tmp/ccIyxmrj.s:4384   .debug_str:0000000000000c52 .LASF123
GAS LISTING /tmp/ccIyxmrj.s 			page 34


     /tmp/ccIyxmrj.s:3996   .debug_str:0000000000000005 .LASF124
     /tmp/ccIyxmrj.s:4248   .debug_str:00000000000007e7 .LASF125
     /tmp/ccIyxmrj.s:4122   .debug_str:00000000000003e3 .LASF207
     /tmp/ccIyxmrj.s:4332   .debug_str:0000000000000b0a .LASF126
     /tmp/ccIyxmrj.s:4180   .debug_str:0000000000000596 .LASF127
     /tmp/ccIyxmrj.s:4046   .debug_str:0000000000000196 .LASF128
     /tmp/ccIyxmrj.s:4184   .debug_str:00000000000005e0 .LASF129
     /tmp/ccIyxmrj.s:4204   .debug_str:000000000000069f .LASF130
     /tmp/ccIyxmrj.s:4160   .debug_str:000000000000050e .LASF131
     /tmp/ccIyxmrj.s:4014   .debug_str:0000000000000080 .LASF132
     /tmp/ccIyxmrj.s:4372   .debug_str:0000000000000c07 .LASF134
     /tmp/ccIyxmrj.s:4284   .debug_str:000000000000091d .LASF136
     /tmp/ccIyxmrj.s:4312   .debug_str:00000000000009b2 .LASF137
     /tmp/ccIyxmrj.s:4182   .debug_str:00000000000005b7 .LASF138
     /tmp/ccIyxmrj.s:4174   .debug_str:000000000000056c .LASF139
     /tmp/ccIyxmrj.s:4140   .debug_str:000000000000046f .LASF140
     /tmp/ccIyxmrj.s:4124   .debug_str:0000000000000411 .LASF141
     /tmp/ccIyxmrj.s:4190   .debug_str:0000000000000622 .LASF142
     /tmp/ccIyxmrj.s:4388   .debug_str:0000000000000c60 .LASF143
     /tmp/ccIyxmrj.s:4226   .debug_str:000000000000074f .LASF144
     /tmp/ccIyxmrj.s:4010   .debug_str:0000000000000055 .LASF146
     /tmp/ccIyxmrj.s:4296   .debug_str:0000000000000957 .LASF208
     /tmp/ccIyxmrj.s:4334   .debug_str:0000000000000b2b .LASF147
     /tmp/ccIyxmrj.s:4078   .debug_str:00000000000002bd .LASF148
     /tmp/ccIyxmrj.s:4322   .debug_str:0000000000000abf .LASF149
     /tmp/ccIyxmrj.s:4210   .debug_str:00000000000006d5 .LASF150
     /tmp/ccIyxmrj.s:4298   .debug_str:000000000000096b .LASF151
     /tmp/ccIyxmrj.s:4126   .debug_str:000000000000041b .LASF152
     /tmp/ccIyxmrj.s:4308   .debug_str:0000000000000996 .LASF153
     /tmp/ccIyxmrj.s:4294   .debug_str:000000000000094a .LASF154
     /tmp/ccIyxmrj.s:4216   .debug_str:0000000000000704 .LASF155
     /tmp/ccIyxmrj.s:4382   .debug_str:0000000000000c37 .LASF156
     /tmp/ccIyxmrj.s:4260   .debug_str:0000000000000855 .LASF157
     /tmp/ccIyxmrj.s:4058   .debug_str:00000000000001ec .LASF158
     /tmp/ccIyxmrj.s:4228   .debug_str:000000000000075b .LASF159
     /tmp/ccIyxmrj.s:4100   .debug_str:000000000000034e .LASF160
     /tmp/ccIyxmrj.s:4222   .debug_str:0000000000000736 .LASF161
     /tmp/ccIyxmrj.s:4000   .debug_str:000000000000001c .LASF162
     /tmp/ccIyxmrj.s:4404   .debug_str:0000000000000cd1 .LASF163
     /tmp/ccIyxmrj.s:4098   .debug_str:0000000000000345 .LASF164
     /tmp/ccIyxmrj.s:4022   .debug_str:00000000000000cb .LASF165
     /tmp/ccIyxmrj.s:4064   .debug_str:0000000000000230 .LASF166
     /tmp/ccIyxmrj.s:4352   .debug_str:0000000000000b86 .LASF167
     /tmp/ccIyxmrj.s:4200   .debug_str:000000000000066e .LASF168
     /tmp/ccIyxmrj.s:4028   .debug_str:0000000000000107 .LASF169
     /tmp/ccIyxmrj.s:4406   .debug_str:0000000000000ce3 .LASF170
     /tmp/ccIyxmrj.s:4120   .debug_str:00000000000003da .LASF171
     /tmp/ccIyxmrj.s:4340   .debug_str:0000000000000b45 .LASF173
     /tmp/ccIyxmrj.s:4134   .debug_str:0000000000000452 .LASF174
     /tmp/ccIyxmrj.s:4040   .debug_str:0000000000000166 .LASF175
     /tmp/ccIyxmrj.s:4264   .debug_str:000000000000086a .LASF176
     /tmp/ccIyxmrj.s:4224   .debug_str:0000000000000746 .LASF177
     /tmp/ccIyxmrj.s:4320   .debug_str:0000000000000aa7 .LASF178
     /tmp/ccIyxmrj.s:4356   .debug_str:0000000000000b9b .LASF179
     /tmp/ccIyxmrj.s:4048   .debug_str:00000000000001a3 .LASF180
     /tmp/ccIyxmrj.s:4386   .debug_str:0000000000000c57 .LASF181
     /tmp/ccIyxmrj.s:4324   .debug_str:0000000000000ac4 .LASF182
GAS LISTING /tmp/ccIyxmrj.s 			page 35


     /tmp/ccIyxmrj.s:4304   .debug_str:0000000000000986 .LASF183
     /tmp/ccIyxmrj.s:4170   .debug_str:0000000000000556 .LASF184
     /tmp/ccIyxmrj.s:46     .text:0000000000000020 .LFB40
     /tmp/ccIyxmrj.s:780    .text:0000000000000430 .LFE40
     /tmp/ccIyxmrj.s:4282   .debug_str:0000000000000916 .LASF185
     /tmp/ccIyxmrj.s:4330   .debug_str:0000000000000b05 .LASF186
     /tmp/ccIyxmrj.s:4366   .debug_str:0000000000000bdf .LASF187
     /tmp/ccIyxmrj.s:3984   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccIyxmrj.s:4344   .debug_str:0000000000000b58 .LASF188
     /tmp/ccIyxmrj.s:255    .text:0000000000000100 .LBB52
     /tmp/ccIyxmrj.s:281    .text:0000000000000124 .LBE52
     /tmp/ccIyxmrj.s:3788   .debug_loc:0000000000000000 .LLST0
     /tmp/ccIyxmrj.s:261    .text:0000000000000104 .LBB53
     /tmp/ccIyxmrj.s:266    .text:0000000000000104 .LBE53
     /tmp/ccIyxmrj.s:272    .text:0000000000000110 .LVL3
     /tmp/ccIyxmrj.s:342    .text:000000000000014c .LBB55
     /tmp/ccIyxmrj.s:359    .text:0000000000000170 .LBE55
     /tmp/ccIyxmrj.s:4242   .debug_str:00000000000007bf .LASF189
     /tmp/ccIyxmrj.s:3803   .debug_loc:000000000000003a .LLST1
     /tmp/ccIyxmrj.s:349    .text:0000000000000158 .LVL9
     /tmp/ccIyxmrj.s:399    .text:00000000000001bc .LBB56
     /tmp/ccIyxmrj.s:412    .text:00000000000001d0 .LBE56
     /tmp/ccIyxmrj.s:4412   .debug_str:0000000000000d14 .LASF190
     /tmp/ccIyxmrj.s:3811   .debug_loc:000000000000005f .LLST2
     /tmp/ccIyxmrj.s:408    .text:00000000000001cc .LVL13
     /tmp/ccIyxmrj.s:415    .text:00000000000001d0 .LBB57
     /tmp/ccIyxmrj.s:467    .text:0000000000000228 .LBE57
     /tmp/ccIyxmrj.s:3818   .debug_loc:0000000000000082 .LLST3
     /tmp/ccIyxmrj.s:3826   .debug_loc:00000000000000a7 .LLST4
     /tmp/ccIyxmrj.s:3834   .debug_loc:00000000000000cc .LLST5
     /tmp/ccIyxmrj.s:3841   .debug_loc:00000000000000ef .LLST6
     /tmp/ccIyxmrj.s:428    .text:00000000000001e4 .LVL16
     /tmp/ccIyxmrj.s:470    .text:0000000000000228 .LBB58
     /tmp/ccIyxmrj.s:514    .text:0000000000000264 .LBE58
     /tmp/ccIyxmrj.s:3854   .debug_loc:0000000000000129 .LLST7
     /tmp/ccIyxmrj.s:4018   .debug_str:00000000000000b0 .LASF191
     /tmp/ccIyxmrj.s:3861   .debug_loc:000000000000014c .LLST8
     /tmp/ccIyxmrj.s:480    .text:0000000000000230 .LBB59
     /tmp/ccIyxmrj.s:500    .text:0000000000000248 .LBE59
     /tmp/ccIyxmrj.s:3876   .debug_loc:0000000000000177 .LLST9
     /tmp/ccIyxmrj.s:488    .text:000000000000023c .LBB61
     /tmp/ccIyxmrj.s:498    .text:0000000000000248 .LBE61
     /tmp/ccIyxmrj.s:3883   .debug_loc:000000000000019a .LLST10
     /tmp/ccIyxmrj.s:3890   .debug_loc:00000000000001bd .LLST11
     /tmp/ccIyxmrj.s:487    .text:000000000000023c .LVL22
     /tmp/ccIyxmrj.s:517    .text:0000000000000264 .LBB63
     /tmp/ccIyxmrj.s:533    .text:0000000000000288 .LBE63
     /tmp/ccIyxmrj.s:3897   .debug_loc:00000000000001e0 .LLST12
     /tmp/ccIyxmrj.s:523    .text:0000000000000270 .LVL25
     /tmp/ccIyxmrj.s:536    .text:0000000000000288 .LBB64
     /tmp/ccIyxmrj.s:553    .text:00000000000002ac .LBE64
     /tmp/ccIyxmrj.s:3905   .debug_loc:0000000000000205 .LLST13
     /tmp/ccIyxmrj.s:543    .text:0000000000000294 .LVL27
     /tmp/ccIyxmrj.s:556    .text:00000000000002ac .LBB65
     /tmp/ccIyxmrj.s:576    .text:00000000000002d0 .LBE65
     /tmp/ccIyxmrj.s:3913   .debug_loc:000000000000022a .LLST14
     /tmp/ccIyxmrj.s:565    .text:00000000000002bc .LVL29
GAS LISTING /tmp/ccIyxmrj.s 			page 36


     /tmp/ccIyxmrj.s:572    .text:00000000000002cc .LVL30
     /tmp/ccIyxmrj.s:579    .text:00000000000002d0 .LBB66
     /tmp/ccIyxmrj.s:594    .text:00000000000002e4 .LBE66
     /tmp/ccIyxmrj.s:4336   .debug_str:0000000000000b37 .LASF192
     /tmp/ccIyxmrj.s:3920   .debug_loc:000000000000024d .LLST15
     /tmp/ccIyxmrj.s:590    .text:00000000000002e0 .LVL33
     /tmp/ccIyxmrj.s:597    .text:00000000000002e4 .LBB67
     /tmp/ccIyxmrj.s:609    .text:00000000000002fc .LBE67
     /tmp/ccIyxmrj.s:4080   .debug_str:00000000000002d5 .LASF193
     /tmp/ccIyxmrj.s:3927   .debug_loc:0000000000000270 .LLST16
     /tmp/ccIyxmrj.s:605    .text:00000000000002f8 .LVL35
     /tmp/ccIyxmrj.s:288    .text:0000000000000128 .LBB69
     /tmp/ccIyxmrj.s:299    .text:000000000000012c .LBE69
     /tmp/ccIyxmrj.s:3935   .debug_loc:0000000000000295 .LLST17
     /tmp/ccIyxmrj.s:304    .text:0000000000000130 .LBB71
     /tmp/ccIyxmrj.s:315    .text:0000000000000134 .LBE71
     /tmp/ccIyxmrj.s:3942   .debug_loc:00000000000002b8 .LLST18
     /tmp/ccIyxmrj.s:369    .text:0000000000000184 .LVL10
     /tmp/ccIyxmrj.s:386    .text:00000000000001a4 .LVL11
     /tmp/ccIyxmrj.s:617    .text:000000000000030c .LVL36
     /tmp/ccIyxmrj.s:625    .text:0000000000000324 .LVL37
     /tmp/ccIyxmrj.s:633    .text:0000000000000338 .LVL38
     /tmp/ccIyxmrj.s:647    .text:0000000000000358 .LVL39
     /tmp/ccIyxmrj.s:62     .text:0000000000000038 .LBB42
     /tmp/ccIyxmrj.s:78     .text:0000000000000044 .LBE42
     /tmp/ccIyxmrj.s:82     .text:0000000000000048 .LBB44
     /tmp/ccIyxmrj.s:97     .text:0000000000000054 .LBE44
     /tmp/ccIyxmrj.s:101    .text:0000000000000058 .LBB46
     /tmp/ccIyxmrj.s:116    .text:0000000000000064 .LBE46
     /tmp/ccIyxmrj.s:676    .text:0000000000000390 .LBB75
     /tmp/ccIyxmrj.s:691    .text:000000000000039c .LBE75
     /tmp/ccIyxmrj.s:3949   .debug_loc:00000000000002db .LLST19
     /tmp/ccIyxmrj.s:703    .text:00000000000003ac .LBB77
     /tmp/ccIyxmrj.s:714    .text:00000000000003b0 .LBE77
     /tmp/ccIyxmrj.s:3957   .debug_loc:00000000000002ff .LLST20
     /tmp/ccIyxmrj.s:719    .text:00000000000003b4 .LBB79
     /tmp/ccIyxmrj.s:733    .text:00000000000003bc .LBE79
     /tmp/ccIyxmrj.s:3964   .debug_loc:0000000000000322 .LLST21
     /tmp/ccIyxmrj.s:150    .text:00000000000000b0 .LVL0
     /tmp/ccIyxmrj.s:663    .text:0000000000000378 .LVL40
     /tmp/ccIyxmrj.s:698    .text:00000000000003a8 .LVL43
     /tmp/ccIyxmrj.s:737    .text:00000000000003c4 .LVL48
     /tmp/ccIyxmrj.s:761    .text:0000000000000404 .LVL49
     /tmp/ccIyxmrj.s:769    .text:000000000000041c .LVL50
     /tmp/ccIyxmrj.s:776    .text:000000000000042c .LVL51
     /tmp/ccIyxmrj.s:10     .text:0000000000000000 .LFB39
     /tmp/ccIyxmrj.s:40     .text:0000000000000020 .LFE39
     /tmp/ccIyxmrj.s:3994   .debug_str:0000000000000000 .LASF209
     /tmp/ccIyxmrj.s:4152   .debug_str:00000000000004e6 .LASF194
     /tmp/ccIyxmrj.s:4390   .debug_str:0000000000000c72 .LASF210
     /tmp/ccIyxmrj.s:4166   .debug_str:000000000000053e .LASF195
     /tmp/ccIyxmrj.s:4348   .debug_str:0000000000000b68 .LASF196
     /tmp/ccIyxmrj.s:4176   .debug_str:000000000000057b .LASF197
     /tmp/ccIyxmrj.s:4088   .debug_str:0000000000000308 .LASF198
     /tmp/ccIyxmrj.s:4346   .debug_str:0000000000000b5d .LASF199
     /tmp/ccIyxmrj.s:4158   .debug_str:0000000000000503 .LASF200
     /tmp/ccIyxmrj.s:4044   .debug_str:0000000000000182 .LASF201
GAS LISTING /tmp/ccIyxmrj.s 			page 37


     /tmp/ccIyxmrj.s:4218   .debug_str:0000000000000714 .LASF202
     /tmp/ccIyxmrj.s:259    .text:0000000000000104 .LVL1
     /tmp/ccIyxmrj.s:270    .text:0000000000000108 .LVL2
     /tmp/ccIyxmrj.s:344    .text:000000000000014c .LVL8
     /tmp/ccIyxmrj.s:403    .text:00000000000001c0 .LVL12
     /tmp/ccIyxmrj.s:417    .text:00000000000001d0 .LVL14
     /tmp/ccIyxmrj.s:422    .text:00000000000001d4 .LVL15
     /tmp/ccIyxmrj.s:465    .text:0000000000000228 .LVL19
     /tmp/ccIyxmrj.s:448    .text:000000000000020c .LVL17
     /tmp/ccIyxmrj.s:456    .text:0000000000000218 .LVL18
     /tmp/ccIyxmrj.s:474    .text:000000000000022c .LVL20
     /tmp/ccIyxmrj.s:512    .text:0000000000000264 .LVL24
     /tmp/ccIyxmrj.s:478    .text:0000000000000230 .LVL21
     /tmp/ccIyxmrj.s:496    .text:0000000000000248 .LVL23
     /tmp/ccIyxmrj.s:538    .text:0000000000000288 .LVL26
     /tmp/ccIyxmrj.s:560    .text:00000000000002b0 .LVL28
     /tmp/ccIyxmrj.s:574    .text:00000000000002d0 .LVL31
     /tmp/ccIyxmrj.s:583    .text:00000000000002d4 .LVL32
     /tmp/ccIyxmrj.s:599    .text:00000000000002e4 .LVL34
     /tmp/ccIyxmrj.s:287    .text:0000000000000128 .LVL4
     /tmp/ccIyxmrj.s:296    .text:000000000000012c .LVL5
     /tmp/ccIyxmrj.s:303    .text:0000000000000130 .LVL6
     /tmp/ccIyxmrj.s:312    .text:0000000000000134 .LVL7
     /tmp/ccIyxmrj.s:675    .text:0000000000000390 .LVL41
     /tmp/ccIyxmrj.s:688    .text:000000000000039c .LVL42
     /tmp/ccIyxmrj.s:702    .text:00000000000003ac .LVL44
     /tmp/ccIyxmrj.s:711    .text:00000000000003b0 .LVL45
     /tmp/ccIyxmrj.s:718    .text:00000000000003b4 .LVL46
     /tmp/ccIyxmrj.s:730    .text:00000000000003bc .LVL47
     /tmp/ccIyxmrj.s:791    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccIyxmrj.s:153    .text:00000000000000b4 .LBB49
     /tmp/ccIyxmrj.s:318    .text:0000000000000134 .LBE49
     /tmp/ccIyxmrj.s:337    .text:000000000000014c .LBB74
     /tmp/ccIyxmrj.s:653    .text:000000000000035c .LBE74

UNDEFINED SYMBOLS
_Z10printErrorv
_ZN3PCB7runningE
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3PCB16timeSliceCounterE
_ZN3PCB8dispatchEv
_ZN9Scheduler3putEP3PCB
_ZN3PCB14createProccessEPFvvEPv
_ZN3SCBnwEm
_ZN3SCB4waitEv
_ZN3SCB6signalEv
_ZN3SCB13signalClosingEv
_ZN3SCBdlEPv
_ZN17SleepingProcesses10putToSleepEP3PCB
_ZN3CCB12outputBufferE
_ZN8IOBuffer8pushBackEc
_ZN3CCB11inputBufferE
_ZN8IOBuffer9peekFrontEv
_ZN3CCB16inputBufferEmptyE
_Z8sem_waitP3SCB
_ZN8IOBuffer8popFrontEv
GAS LISTING /tmp/ccIyxmrj.s 			page 38


_ZN17SleepingProcesses6wakeUpEv
plic_claim
CONSOLE_STATUS
_ZN3CCB8semInputE
_Z10sem_signalP3SCB
_ZN3CCB9semOutputE
plic_complete

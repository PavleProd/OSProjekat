GAS LISTING /tmp/ccA1rBM0.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	idleProcess
   9              	idleProcess:
  10              	.LFB32:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../h/hw.h"
   2:src/main.cpp  **** #include "../h/syscall_c.h"
   3:src/main.cpp  **** #include "../h/PCB.h"
   4:src/main.cpp  **** #include "../h/kernel.h"
   5:src/main.cpp  **** #include "../h/SCB.h"
   6:src/main.cpp  **** #include "../h/CCB.h"
   7:src/main.cpp  **** #include "../h/userMain.h"
   8:src/main.cpp  **** 
   9:src/main.cpp  **** // Kernel inicijalizacija
  10:src/main.cpp  **** extern "C" void interrupt();
  11:src/main.cpp  **** extern "C" void idleProcess(void*) {
  12              		.loc 1 11 36
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  20              	.L2:
  12:src/main.cpp  ****     while(true) {}
  21              		.loc 1 12 5 discriminator 1
  22              		.loc 1 12 5 discriminator 1
  23 000c 6F000000 		j	.L2
  24              		.cfi_endproc
  25              	.LFE32:
  27              		.align	2
  28              		.globl	_Z8userModev
  30              	_Z8userModev:
  31              	.LFB30:
  32              		.file 2 "src/../h/userMain.h"
   1:src/../h/userMain.h **** #ifndef USERMAIN_H
   2:src/../h/userMain.h **** #define USERMAIN_H
   3:src/../h/userMain.h **** 
   4:src/../h/userMain.h **** PCB* userProcess = nullptr;
   5:src/../h/userMain.h **** 
   6:src/../h/userMain.h **** extern "C" void interrupt();
   7:src/../h/userMain.h **** void userMode() {
  33              		.loc 2 7 17
  34              		.cfi_startproc
  35 0010 130101FF 		addi	sp,sp,-16
  36              		.cfi_def_cfa_offset 16
  37 0014 23348100 		sd	s0,8(sp)
  38              		.cfi_offset 8, -8
  39 0018 13040101 		addi	s0,sp,16
  40              		.cfi_def_cfa 8, 0
   8:src/../h/userMain.h ****     size_t code = Kernel::sysCallCodes::userMode;
GAS LISTING /tmp/ccA1rBM0.s 			page 2


  41              		.loc 2 8 5
  42              	.LVL0:
   9:src/../h/userMain.h ****     asm volatile("mv a0, %0" : : "r" (code));
  43              		.loc 2 9 5
  44              		.loc 2 9 45 is_stmt 0
  45 001c 93073004 		li	a5,67
  46              	#APP
  47              	# 9 "src/../h/userMain.h" 1
  10              	    asm volatile("ecall");
  48              		mv a0, a5
  49              	# 0 "" 2
  50              		.loc 2 10 5 is_stmt 1
  51              		.loc 2 10 26 is_stmt 0
  52              	# 10 "src/../h/userMain.h" 1
  11              	
  12:src/../h/userMain.h **** }
  53              		ecall
  54              	# 0 "" 2
  55              		.loc 2 12 1
  56              	#NO_APP
  57 0028 03348100 		ld	s0,8(sp)
  58              		.cfi_restore 8
  59              		.cfi_def_cfa 2, 16
  60 002c 13010101 		addi	sp,sp,16
  61              		.cfi_def_cfa_offset 0
  62 0030 67800000 		jr	ra
  63              		.cfi_endproc
  64              	.LFE30:
  66              		.align	2
  67              		.globl	_Z15userMainWrapperPv
  69              	_Z15userMainWrapperPv:
  70              	.LFB31:
  13:src/../h/userMain.h **** void userMain();
  14:src/../h/userMain.h **** void userMainWrapper(void*) {
  71              		.loc 2 14 29 is_stmt 1
  72              		.cfi_startproc
  73 0034 130101FF 		addi	sp,sp,-16
  74              		.cfi_def_cfa_offset 16
  75 0038 23341100 		sd	ra,8(sp)
  76 003c 23308100 		sd	s0,0(sp)
  77              		.cfi_offset 1, -8
  78              		.cfi_offset 8, -16
  79 0040 13040101 		addi	s0,sp,16
  80              		.cfi_def_cfa 8, 0
  15:src/../h/userMain.h ****     userMode();
  81              		.loc 2 15 5
  82              		.loc 2 15 13 is_stmt 0
  83 0044 97000000 		call	_Z8userModev
  83      E7800000 
  84              	.LVL1:
  16:src/../h/userMain.h ****     userMain();
  85              		.loc 2 16 5 is_stmt 1
  86              		.loc 2 16 13 is_stmt 0
  87 004c 97000000 		call	_Z8userMainv@plt
  87      E7800000 
  88              	.LVL2:
  17:src/../h/userMain.h **** }
GAS LISTING /tmp/ccA1rBM0.s 			page 3


  89              		.loc 2 17 1
  90 0054 83308100 		ld	ra,8(sp)
  91              		.cfi_restore 1
  92 0058 03340100 		ld	s0,0(sp)
  93              		.cfi_restore 8
  94              		.cfi_def_cfa 2, 16
  95 005c 13010101 		addi	sp,sp,16
  96              		.cfi_def_cfa_offset 0
  97 0060 67800000 		jr	ra
  98              		.cfi_endproc
  99              	.LFE31:
 101              		.align	2
 102              		.globl	main
 104              	main:
 105              	.LFB33:
  13:src/main.cpp  **** }
  14:src/main.cpp  **** // ------------
  15:src/main.cpp  **** 
  16:src/main.cpp  **** int main() {
 106              		.loc 1 16 12 is_stmt 1
 107              		.cfi_startproc
 108 0064 130101FF 		addi	sp,sp,-16
 109              		.cfi_def_cfa_offset 16
 110 0068 23341100 		sd	ra,8(sp)
 111 006c 23308100 		sd	s0,0(sp)
 112              		.cfi_offset 1, -8
 113              		.cfi_offset 8, -16
 114 0070 13040101 		addi	s0,sp,16
 115              		.cfi_def_cfa 8, 0
  17:src/main.cpp  ****     // Kernel inicijalizacija
  18:src/main.cpp  ****     asm volatile("csrw stvec, %0" : : "r" (&interrupt));
 116              		.loc 1 18 5
 117              		.loc 1 18 56 is_stmt 0
 118 0074 97070000 		la	a5,interrupt
 118      83B70700 
 119              	#APP
 120              	# 18 "src/main.cpp" 1
  19              	    PCB* main = PCB::createProccess(nullptr, nullptr); // main proces(ne pravimo stek)
 121              		csrw stvec, a5
 122              	# 0 "" 2
 123              		.loc 1 19 5 is_stmt 1
 124              		.loc 1 19 36 is_stmt 0
 125              	#NO_APP
 126 0080 93050000 		li	a1,0
 127 0084 13050000 		li	a0,0
 128 0088 97000000 		call	_ZN3PCB14createProccessEPFvvEPv@plt
 128      E7800000 
 129              	.LVL3:
  20:src/main.cpp  ****     PCB::running = main;
 130              		.loc 1 20 5 is_stmt 1
 131              		.loc 1 20 18 is_stmt 0
 132 0090 97070000 		la	a5,_ZN3PCB7runningE
 132      83B70700 
 133 0098 23B0A700 		sd	a0,0(a5)
  21:src/main.cpp  **** 
  22:src/main.cpp  ****     sem_open(&CCB::semInput, 0);
 134              		.loc 1 22 5 is_stmt 1
GAS LISTING /tmp/ccA1rBM0.s 			page 4


 135              		.loc 1 22 13 is_stmt 0
 136 009c 93050000 		li	a1,0
 137 00a0 17050000 		la	a0,_ZN3CCB8semInputE
 137      03350500 
 138              	.LVL4:
 139 00a8 97000000 		call	_Z8sem_openPP3SCBj@plt
 139      E7800000 
 140              	.LVL5:
  23:src/main.cpp  ****     sem_open(&CCB::semOutput, 0);
 141              		.loc 1 23 5 is_stmt 1
 142              		.loc 1 23 13 is_stmt 0
 143 00b0 93050000 		li	a1,0
 144 00b4 17050000 		la	a0,_ZN3CCB9semOutputE
 144      03350500 
 145 00bc 97000000 		call	_Z8sem_openPP3SCBj@plt
 145      E7800000 
 146              	.LVL6:
  24:src/main.cpp  ****     sem_open(&CCB::inputBufferEmpty, 0);
 147              		.loc 1 24 5 is_stmt 1
 148              		.loc 1 24 13 is_stmt 0
 149 00c4 93050000 		li	a1,0
 150 00c8 17050000 		la	a0,_ZN3CCB16inputBufferEmptyE
 150      03350500 
 151 00d0 97000000 		call	_Z8sem_openPP3SCBj@plt
 151      E7800000 
 152              	.LVL7:
  25:src/main.cpp  **** 
  26:src/main.cpp  ****     Kernel::ms_sstatus(Kernel::SSTATUS_SIE); // dozvoljavaju se prekidi
 153              		.loc 1 26 5 is_stmt 1
 154              	.LBB6:
 155              	.LBB7:
 156              		.file 3 "src/../h/kernel.h"
   1:src/../h/kernel.h **** #ifndef KERNEL_H
   2:src/../h/kernel.h **** #define KERNEL_H
   3:src/../h/kernel.h **** 
   4:src/../h/kernel.h **** #include "hw.h"
   5:src/../h/kernel.h **** 
   6:src/../h/kernel.h **** class Kernel {
   7:src/../h/kernel.h **** public:
   8:src/../h/kernel.h ****     // postavlja code u registar a0
   9:src/../h/kernel.h ****     static size_t setCode(size_t code) {
  10:src/../h/kernel.h ****         return code;
  11:src/../h/kernel.h ****     }
  12:src/../h/kernel.h **** 
  13:src/../h/kernel.h ****     // kodovi po kojima se prepoznaju sistemski pozivi
  14:src/../h/kernel.h ****     enum sysCallCodes {
  15:src/../h/kernel.h ****         mem_alloc = 0x01,
  16:src/../h/kernel.h ****         mem_free = 0x02,
  17:src/../h/kernel.h ****         thread_create = 0x11,
  18:src/../h/kernel.h ****         thread_exit = 0x12,
  19:src/../h/kernel.h ****         thread_dispatch = 0x13,
  20:src/../h/kernel.h ****         thread_start = 0x14,
  21:src/../h/kernel.h ****         sem_open = 0x21,
  22:src/../h/kernel.h ****         sem_close = 0x22,
  23:src/../h/kernel.h ****         sem_wait = 0x23,
  24:src/../h/kernel.h ****         sem_signal = 0x24,
  25:src/../h/kernel.h ****         time_sleep = 0x31,
GAS LISTING /tmp/ccA1rBM0.s 			page 5


  26:src/../h/kernel.h ****         getc = 0x41,
  27:src/../h/kernel.h ****         putc = 0x42,
  28:src/../h/kernel.h ****         userMode = 0x43
  29:src/../h/kernel.h ****     };
  30:src/../h/kernel.h **** 
  31:src/../h/kernel.h ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  32:src/../h/kernel.h ****     static void popSppSpie();
  33:src/../h/kernel.h **** 
  34:src/../h/kernel.h ****     // cita registar scause (uzrok nastanka prekida)
  35:src/../h/kernel.h ****     static size_t r_scause() {
  36:src/../h/kernel.h ****         size_t volatile scause;
  37:src/../h/kernel.h ****         __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  38:src/../h/kernel.h ****         return scause;
  39:src/../h/kernel.h ****     }
  40:src/../h/kernel.h **** 
  41:src/../h/kernel.h ****     // upisuje u registar scause (uzrok nastanka prekida)
  42:src/../h/kernel.h ****     static void w_scause(size_t scause) {
  43:src/../h/kernel.h ****         __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  44:src/../h/kernel.h ****     }
  45:src/../h/kernel.h **** 
  46:src/../h/kernel.h ****     // cita registar sepc
  47:src/../h/kernel.h ****     static size_t r_sepc() {
  48:src/../h/kernel.h ****         size_t volatile sepc;
  49:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
  50:src/../h/kernel.h ****         return sepc;
  51:src/../h/kernel.h ****     }
  52:src/../h/kernel.h **** 
  53:src/../h/kernel.h ****     // upisuje u registar sepc
  54:src/../h/kernel.h ****     static void w_sepc(size_t sepc) {
  55:src/../h/kernel.h ****         __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
  56:src/../h/kernel.h ****     }
  57:src/../h/kernel.h **** 
  58:src/../h/kernel.h ****     // read register stvec
  59:src/../h/kernel.h ****     static size_t r_stvec() {
  60:src/../h/kernel.h ****         size_t volatile stvec;
  61:src/../h/kernel.h ****         __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
  62:src/../h/kernel.h ****         return stvec;
  63:src/../h/kernel.h ****     }
  64:src/../h/kernel.h **** 
  65:src/../h/kernel.h ****     // write register stvec
  66:src/../h/kernel.h ****     static void w_stvec(size_t stvec) {
  67:src/../h/kernel.h ****         __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  68:src/../h/kernel.h ****     }
  69:src/../h/kernel.h **** 
  70:src/../h/kernel.h ****     // read register stval
  71:src/../h/kernel.h ****     static size_t r_stval() {
  72:src/../h/kernel.h ****         size_t volatile stval;
  73:src/../h/kernel.h ****         __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
  74:src/../h/kernel.h ****         return stval;
  75:src/../h/kernel.h ****     }
  76:src/../h/kernel.h **** 
  77:src/../h/kernel.h ****     // write register stval
  78:src/../h/kernel.h ****     static void w_stval(size_t stval) {
  79:src/../h/kernel.h ****         __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
  80:src/../h/kernel.h ****     }
  81:src/../h/kernel.h **** 
  82:src/../h/kernel.h ****     enum BitMaskSip
GAS LISTING /tmp/ccA1rBM0.s 			page 6


  83:src/../h/kernel.h ****     {
  84:src/../h/kernel.h ****         SIP_SSIE = (1 << 1), // da li su dozvoljeni softverski prekidi
  85:src/../h/kernel.h ****         SIP_SEIE = (1 << 9), // da li su dozvoljeni spoljasnji hardverski prekidi
  86:src/../h/kernel.h ****     };
  87:src/../h/kernel.h **** 
  88:src/../h/kernel.h ****     // postavljanje odredjenih bitova (BitMaskSip) u registar sip
  89:src/../h/kernel.h ****     static void ms_sip(size_t mask) {
  90:src/../h/kernel.h ****         __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
  91:src/../h/kernel.h ****     }
  92:src/../h/kernel.h **** 
  93:src/../h/kernel.h ****     // brisanje odredjenih bitova (BitMaskSip) iz registra sip
  94:src/../h/kernel.h ****     static void mc_sip(size_t mask) {
  95:src/../h/kernel.h ****         __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
  96:src/../h/kernel.h ****     }
  97:src/../h/kernel.h **** 
  98:src/../h/kernel.h ****     // citanje iz registra sip
  99:src/../h/kernel.h ****     static size_t r_sip() {
 100:src/../h/kernel.h ****         size_t volatile sip;
 101:src/../h/kernel.h ****         __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 102:src/../h/kernel.h ****         return sip;
 103:src/../h/kernel.h ****     }
 104:src/../h/kernel.h **** 
 105:src/../h/kernel.h ****     // upis u registar sip
 106:src/../h/kernel.h ****     static void w_sip(size_t sip) {
 107:src/../h/kernel.h ****         __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 108:src/../h/kernel.h ****     }
 109:src/../h/kernel.h **** 
 110:src/../h/kernel.h ****     enum BitMaskSstatus
 111:src/../h/kernel.h ****     {
 112:src/../h/kernel.h ****         SSTATUS_SIE = (1 << 1), // ako je 0 - maskiranje spoljasnjih prekida u sistemskom rezimu
 113:src/../h/kernel.h ****         SSTATUS_SPIE = (1 << 5), // prethodna vrednost sie
 114:src/../h/kernel.h ****         SSTATUS_SPP = (1 << 8), // u kom rezimu se desio prekid
 115:src/../h/kernel.h ****     };
 116:src/../h/kernel.h **** 
 117:src/../h/kernel.h ****     // mask set register sstatus
 118:src/../h/kernel.h ****     static void ms_sstatus(size_t mask) {
 119:src/../h/kernel.h ****         __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 157              		.loc 3 119 9
 158              		.loc 3 119 72 is_stmt 0
 159 00d8 93072000 		li	a5,2
 160              	#APP
 161              	# 119 "src/../h/kernel.h" 1
 120              	    }
 162              		csrs sstatus, a5
 163              	# 0 "" 2
 164              	.LVL8:
 165              	#NO_APP
 166              	.LBE7:
 167              	.LBE6:
  27:src/main.cpp  ****     thread_create(&userProcess, userMainWrapper, nullptr);
 168              		.loc 1 27 5 is_stmt 1
 169              		.loc 1 27 18 is_stmt 0
 170 00e0 13060000 		li	a2,0
 171 00e4 97050000 		lla	a1,_Z15userMainWrapperPv
 171      93850500 
 172 00ec 17050000 		lla	a0,.LANCHOR0
 172      13050500 
GAS LISTING /tmp/ccA1rBM0.s 			page 7


 173 00f4 97000000 		call	_Z13thread_createPP3PCBPFvPvES2_@plt
 173      E7800000 
 174              	.LVL9:
  28:src/main.cpp  ****     thread_create(&CCB::inputProcces, CCB::inputBody, nullptr); // getc nit (stavljamo je prvi put 
 175              		.loc 1 28 5 is_stmt 1
 176              		.loc 1 28 18 is_stmt 0
 177 00fc 13060000 		li	a2,0
 178 0100 97050000 		la	a1,_ZN3CCB9inputBodyEPv
 178      83B50500 
 179 0108 17050000 		la	a0,_ZN3CCB12inputProccesE
 179      03350500 
 180 0110 97000000 		call	_Z13thread_createPP3PCBPFvPvES2_@plt
 180      E7800000 
 181              	.LVL10:
  29:src/main.cpp  ****     thread_create(&CCB::outputProcess, CCB::outputBody, nullptr); // putc nit ( stavljamo je prvi p
 182              		.loc 1 29 5 is_stmt 1
 183              		.loc 1 29 18 is_stmt 0
 184 0118 13060000 		li	a2,0
 185 011c 97050000 		la	a1,_ZN3CCB10outputBodyEPv
 185      83B50500 
 186 0124 17050000 		la	a0,_ZN3CCB13outputProcessE
 186      03350500 
 187 012c 97000000 		call	_Z13thread_createPP3PCBPFvPvES2_@plt
 187      E7800000 
 188              	.LVL11:
  30:src/main.cpp  ****     thread_create_only(&Scheduler::idleProcess, idleProcess, nullptr); // idle nit
 189              		.loc 1 30 5 is_stmt 1
 190              		.loc 1 30 23 is_stmt 0
 191 0134 13060000 		li	a2,0
 192 0138 97050000 		lla	a1,idleProcess
 192      93850500 
 193 0140 17050000 		la	a0,_ZN9Scheduler11idleProcessE
 193      03350500 
 194 0148 97000000 		call	_Z18thread_create_onlyPP3PCBPFvPvES2_@plt
 194      E7800000 
 195              	.LVL12:
 196              	.L10:
  31:src/main.cpp  ****     // ----
  32:src/main.cpp  **** 
  33:src/main.cpp  ****     while(!userProcess->isFinished()) {
 197              		.loc 1 33 5 is_stmt 1
 198              		.loc 1 33 11
 199              		.loc 1 33 35 is_stmt 0
 200 0150 97070000 		ld	a5,.LANCHOR0
 200      83B70700 
 201              	.LVL13:
 202              	.LBB8:
 203              	.LBB9:
 204              		.file 4 "src/../h/PCB.h"
   1:src/../h/PCB.h **** #ifndef PCB_H
   2:src/../h/PCB.h **** #define PCB_H
   3:src/../h/PCB.h **** 
   4:src/../h/PCB.h **** #include "hw.h"
   5:src/../h/PCB.h **** 
   6:src/../h/PCB.h **** extern "C" void interruptHandler();
   7:src/../h/PCB.h **** 
   8:src/../h/PCB.h **** class PCB {
GAS LISTING /tmp/ccA1rBM0.s 			page 8


   9:src/../h/PCB.h **** friend class Scheduler;
  10:src/../h/PCB.h **** friend void interruptHandler();
  11:src/../h/PCB.h **** friend class Kernel;
  12:src/../h/PCB.h **** friend class SCB;
  13:src/../h/PCB.h **** public:
  14:src/../h/PCB.h ****     // vraca true ako se proces zavrsio, false ako nije
  15:src/../h/PCB.h ****     bool isFinished() const {
  16:src/../h/PCB.h ****         return finished;
 205              		.loc 4 16 9 is_stmt 1
 206              		.loc 4 16 16 is_stmt 0
 207 0158 83C78702 		lbu	a5,40(a5)
 208              	.LVL14:
 209              	.LBE9:
 210              	.LBE8:
 211              		.loc 1 33 11
 212 015c 63980700 		bnez	a5,.L9
  34:src/main.cpp  ****         thread_dispatch();
 213              		.loc 1 34 9 is_stmt 1
 214              		.loc 1 34 24 is_stmt 0
 215 0160 97000000 		call	_Z15thread_dispatchv@plt
 215      E7800000 
 216              	.LVL15:
  33:src/main.cpp  ****         thread_dispatch();
 217              		.loc 1 33 5
 218 0168 6FF09FFE 		j	.L10
 219              	.L9:
  35:src/main.cpp  ****     }
  36:src/main.cpp  **** 
  37:src/main.cpp  ****     return 0;
 220              		.loc 1 37 5 is_stmt 1
  38:src/main.cpp  **** }...
 221              		.loc 1 38 1 is_stmt 0
 222 016c 13050000 		li	a0,0
 223 0170 83308100 		ld	ra,8(sp)
 224              		.cfi_restore 1
 225 0174 03340100 		ld	s0,0(sp)
 226              		.cfi_restore 8
 227              		.cfi_def_cfa 2, 16
 228 0178 13010101 		addi	sp,sp,16
 229              		.cfi_def_cfa_offset 0
 230 017c 67800000 		jr	ra
 231              		.cfi_endproc
 232              	.LFE33:
 234              		.globl	userProcess
 235              		.bss
 236              		.align	3
 237              		.set	.LANCHOR0,. + 0
 240              	userProcess:
 241 0000 00000000 		.zero	8
 241      00000000 
 242              		.text
 243              	.Letext0:
 244              		.file 5 "src/../h/hw.h"
 245              		.file 6 "src/../h/syscall_c.h"
GAS LISTING /tmp/ccA1rBM0.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccA1rBM0.s:9      .text:0000000000000000 idleProcess
     /tmp/ccA1rBM0.s:13     .text:0000000000000000 .L0 
     /tmp/ccA1rBM0.s:14     .text:0000000000000000 .L0 
     /tmp/ccA1rBM0.s:15     .text:0000000000000004 .L0 
     /tmp/ccA1rBM0.s:17     .text:0000000000000008 .L0 
     /tmp/ccA1rBM0.s:19     .text:000000000000000c .L0 
     /tmp/ccA1rBM0.s:22     .text:000000000000000c .L0 
     /tmp/ccA1rBM0.s:23     .text:000000000000000c .L0 
     /tmp/ccA1rBM0.s:24     .text:0000000000000010 .L0 
     /tmp/ccA1rBM0.s:30     .text:0000000000000010 _Z8userModev
     /tmp/ccA1rBM0.s:34     .text:0000000000000010 .L0 
     /tmp/ccA1rBM0.s:35     .text:0000000000000010 .L0 
     /tmp/ccA1rBM0.s:36     .text:0000000000000014 .L0 
     /tmp/ccA1rBM0.s:38     .text:0000000000000018 .L0 
     /tmp/ccA1rBM0.s:40     .text:000000000000001c .L0 
     /tmp/ccA1rBM0.s:43     .text:000000000000001c .L0 
     /tmp/ccA1rBM0.s:44     .text:000000000000001c .L0 
     /tmp/ccA1rBM0.s:45     .text:000000000000001c .L0 
     /tmp/ccA1rBM0.s:51     .text:0000000000000024 .L0 
 src/../h/userMain.h:10     .text:0000000000000024 .L0 
     /tmp/ccA1rBM0.s:57     .text:0000000000000028 .L0 
     /tmp/ccA1rBM0.s:58     .text:000000000000002c .L0 
     /tmp/ccA1rBM0.s:59     .text:000000000000002c .L0 
     /tmp/ccA1rBM0.s:61     .text:0000000000000030 .L0 
     /tmp/ccA1rBM0.s:63     .text:0000000000000034 .L0 
     /tmp/ccA1rBM0.s:69     .text:0000000000000034 _Z15userMainWrapperPv
     /tmp/ccA1rBM0.s:72     .text:0000000000000034 .L0 
     /tmp/ccA1rBM0.s:73     .text:0000000000000034 .L0 
     /tmp/ccA1rBM0.s:74     .text:0000000000000038 .L0 
     /tmp/ccA1rBM0.s:77     .text:0000000000000040 .L0 
     /tmp/ccA1rBM0.s:78     .text:0000000000000040 .L0 
     /tmp/ccA1rBM0.s:80     .text:0000000000000044 .L0 
     /tmp/ccA1rBM0.s:82     .text:0000000000000044 .L0 
     /tmp/ccA1rBM0.s:83     .text:0000000000000044 .L0 
     /tmp/ccA1rBM0.s:86     .text:000000000000004c .L0 
     /tmp/ccA1rBM0.s:87     .text:000000000000004c .L0 
     /tmp/ccA1rBM0.s:90     .text:0000000000000054 .L0 
     /tmp/ccA1rBM0.s:91     .text:0000000000000058 .L0 
     /tmp/ccA1rBM0.s:93     .text:000000000000005c .L0 
     /tmp/ccA1rBM0.s:94     .text:000000000000005c .L0 
     /tmp/ccA1rBM0.s:96     .text:0000000000000060 .L0 
     /tmp/ccA1rBM0.s:98     .text:0000000000000064 .L0 
     /tmp/ccA1rBM0.s:104    .text:0000000000000064 main
     /tmp/ccA1rBM0.s:107    .text:0000000000000064 .L0 
     /tmp/ccA1rBM0.s:108    .text:0000000000000064 .L0 
     /tmp/ccA1rBM0.s:109    .text:0000000000000068 .L0 
     /tmp/ccA1rBM0.s:112    .text:0000000000000070 .L0 
     /tmp/ccA1rBM0.s:113    .text:0000000000000070 .L0 
     /tmp/ccA1rBM0.s:115    .text:0000000000000074 .L0 
     /tmp/ccA1rBM0.s:117    .text:0000000000000074 .L0 
     /tmp/ccA1rBM0.s:118    .text:0000000000000074 .L0 
     /tmp/ccA1rBM0.s:124    .text:0000000000000080 .L0 
     /tmp/ccA1rBM0.s:126    .text:0000000000000080 .L0 
     /tmp/ccA1rBM0.s:131    .text:0000000000000090 .L0 
     /tmp/ccA1rBM0.s:132    .text:0000000000000090 .L0 
GAS LISTING /tmp/ccA1rBM0.s 			page 10


     /tmp/ccA1rBM0.s:135    .text:000000000000009c .L0 
     /tmp/ccA1rBM0.s:136    .text:000000000000009c .L0 
     /tmp/ccA1rBM0.s:142    .text:00000000000000b0 .L0 
     /tmp/ccA1rBM0.s:143    .text:00000000000000b0 .L0 
     /tmp/ccA1rBM0.s:148    .text:00000000000000c4 .L0 
     /tmp/ccA1rBM0.s:149    .text:00000000000000c4 .L0 
     /tmp/ccA1rBM0.s:157    .text:00000000000000d8 .L0 
     /tmp/ccA1rBM0.s:158    .text:00000000000000d8 .L0 
     /tmp/ccA1rBM0.s:159    .text:00000000000000d8 .L0 
     /tmp/ccA1rBM0.s:169    .text:00000000000000e0 .L0 
     /tmp/ccA1rBM0.s:170    .text:00000000000000e0 .L0 
     /tmp/ccA1rBM0.s:176    .text:00000000000000fc .L0 
     /tmp/ccA1rBM0.s:177    .text:00000000000000fc .L0 
     /tmp/ccA1rBM0.s:183    .text:0000000000000118 .L0 
     /tmp/ccA1rBM0.s:184    .text:0000000000000118 .L0 
     /tmp/ccA1rBM0.s:190    .text:0000000000000134 .L0 
     /tmp/ccA1rBM0.s:191    .text:0000000000000134 .L0 
     /tmp/ccA1rBM0.s:198    .text:0000000000000150 .L0 
     /tmp/ccA1rBM0.s:199    .text:0000000000000150 .L0 
     /tmp/ccA1rBM0.s:200    .text:0000000000000150 .L0 
     /tmp/ccA1rBM0.s:206    .text:0000000000000158 .L0 
     /tmp/ccA1rBM0.s:207    .text:0000000000000158 .L0 
     /tmp/ccA1rBM0.s:212    .text:000000000000015c .L0 
     /tmp/ccA1rBM0.s:214    .text:0000000000000160 .L0 
     /tmp/ccA1rBM0.s:215    .text:0000000000000160 .L0 
     /tmp/ccA1rBM0.s:218    .text:0000000000000168 .L0 
     /tmp/ccA1rBM0.s:221    .text:000000000000016c .L0 
     /tmp/ccA1rBM0.s:222    .text:000000000000016c .L0 
     /tmp/ccA1rBM0.s:224    .text:0000000000000174 .L0 
     /tmp/ccA1rBM0.s:226    .text:0000000000000178 .L0 
     /tmp/ccA1rBM0.s:227    .text:0000000000000178 .L0 
     /tmp/ccA1rBM0.s:229    .text:000000000000017c .L0 
     /tmp/ccA1rBM0.s:231    .text:0000000000000180 .L0 
     /tmp/ccA1rBM0.s:240    .bss:0000000000000000 userProcess
     /tmp/ccA1rBM0.s:237    .bss:0000000000000000 .LANCHOR0
     /tmp/ccA1rBM0.s:246    .text:0000000000000180 .L0 
     /tmp/ccA1rBM0.s:118    .text:0000000000000074 .L0 
     /tmp/ccA1rBM0.s:132    .text:0000000000000090 .L0 
     /tmp/ccA1rBM0.s:137    .text:00000000000000a0 .L0 
     /tmp/ccA1rBM0.s:144    .text:00000000000000b4 .L0 
     /tmp/ccA1rBM0.s:150    .text:00000000000000c8 .L0 
     /tmp/ccA1rBM0.s:171    .text:00000000000000e4 .L0 
     /tmp/ccA1rBM0.s:172    .text:00000000000000ec .L0 
     /tmp/ccA1rBM0.s:178    .text:0000000000000100 .L0 
     /tmp/ccA1rBM0.s:179    .text:0000000000000108 .L0 
     /tmp/ccA1rBM0.s:185    .text:000000000000011c .L0 
     /tmp/ccA1rBM0.s:186    .text:0000000000000124 .L0 
     /tmp/ccA1rBM0.s:192    .text:0000000000000138 .L0 
     /tmp/ccA1rBM0.s:193    .text:0000000000000140 .L0 
     /tmp/ccA1rBM0.s:200    .text:0000000000000150 .L0 
     /tmp/ccA1rBM0.s:20     .text:000000000000000c .L2
     /tmp/ccA1rBM0.s:219    .text:000000000000016c .L9
     /tmp/ccA1rBM0.s:196    .text:0000000000000150 .L10
     /tmp/ccA1rBM0.s:1270   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccA1rBM0.s:2347   .debug_str:00000000000006a1 .LASF136
     /tmp/ccA1rBM0.s:2169   .debug_str:00000000000001d1 .LASF137
     /tmp/ccA1rBM0.s:2319   .debug_str:00000000000005f0 .LASF138
GAS LISTING /tmp/ccA1rBM0.s 			page 11


     /tmp/ccA1rBM0.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccA1rBM0.s:243    .text:0000000000000180 .Letext0
     /tmp/ccA1rBM0.s:2111   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccA1rBM0.s:2193   .debug_str:000000000000025f .LASF0
     /tmp/ccA1rBM0.s:2219   .debug_str:0000000000000310 .LASF1
     /tmp/ccA1rBM0.s:2303   .debug_str:0000000000000574 .LASF2
     /tmp/ccA1rBM0.s:2307   .debug_str:0000000000000595 .LASF4
     /tmp/ccA1rBM0.s:2207   .debug_str:00000000000002b7 .LASF3
     /tmp/ccA1rBM0.s:2117   .debug_str:000000000000001b .LASF5
     /tmp/ccA1rBM0.s:2269   .debug_str:000000000000047f .LASF6
     /tmp/ccA1rBM0.s:2213   .debug_str:00000000000002ee .LASF7
     /tmp/ccA1rBM0.s:2175   .debug_str:00000000000001ef .LASF8
     /tmp/ccA1rBM0.s:2179   .debug_str:000000000000020c .LASF9
     /tmp/ccA1rBM0.s:2133   .debug_str:00000000000000b2 .LASF10
     /tmp/ccA1rBM0.s:2167   .debug_str:00000000000001c2 .LASF11
     /tmp/ccA1rBM0.s:2135   .debug_str:00000000000000c1 .LASF12
     /tmp/ccA1rBM0.s:2131   .debug_str:00000000000000a2 .LASF13
     /tmp/ccA1rBM0.s:2331   .debug_str:000000000000064e .LASF14
     /tmp/ccA1rBM0.s:2153   .debug_str:0000000000000147 .LASF15
     /tmp/ccA1rBM0.s:2325   .debug_str:0000000000000623 .LASF16
     /tmp/ccA1rBM0.s:2337   .debug_str:0000000000000671 .LASF17
     /tmp/ccA1rBM0.s:2379   .debug_str:000000000000085b .LASF19
     /tmp/ccA1rBM0.s:2149   .debug_str:000000000000012e .LASF18
     /tmp/ccA1rBM0.s:2357   .debug_str:00000000000007a8 .LASF20
     /tmp/ccA1rBM0.s:2335   .debug_str:0000000000000661 .LASF21
     /tmp/ccA1rBM0.s:2209   .debug_str:00000000000002c9 .LASF22
     /tmp/ccA1rBM0.s:2161   .debug_str:000000000000018f .LASF25
     /tmp/ccA1rBM0.s:2401   .debug_str:0000000000000908 .LASF27
     /tmp/ccA1rBM0.s:2181   .debug_str:000000000000021a .LASF23
     /tmp/ccA1rBM0.s:2225   .debug_str:000000000000034f .LASF24
     /tmp/ccA1rBM0.s:2247   .debug_str:00000000000003d7 .LASF26
     /tmp/ccA1rBM0.s:2399   .debug_str:00000000000008ed .LASF28
     /tmp/ccA1rBM0.s:2339   .debug_str:000000000000067c .LASF29
     /tmp/ccA1rBM0.s:2387   .debug_str:00000000000008a2 .LASF30
     /tmp/ccA1rBM0.s:2363   .debug_str:00000000000007e5 .LASF31
     /tmp/ccA1rBM0.s:2349   .debug_str:0000000000000765 .LASF32
     /tmp/ccA1rBM0.s:2395   .debug_str:00000000000008d6 .LASF33
     /tmp/ccA1rBM0.s:2121   .debug_str:000000000000002d .LASF34
     /tmp/ccA1rBM0.s:2321   .debug_str:000000000000060e .LASF139
     /tmp/ccA1rBM0.s:2223   .debug_str:0000000000000349 .LASF83
     /tmp/ccA1rBM0.s:2227   .debug_str:0000000000000369 .LASF85
     /tmp/ccA1rBM0.s:2343   .debug_str:000000000000068c .LASF140
     /tmp/ccA1rBM0.s:2217   .debug_str:000000000000030b .LASF35
     /tmp/ccA1rBM0.s:2389   .debug_str:00000000000008b8 .LASF36
     /tmp/ccA1rBM0.s:2393   .debug_str:00000000000008c9 .LASF37
     /tmp/ccA1rBM0.s:2157   .debug_str:0000000000000162 .LASF38
     /tmp/ccA1rBM0.s:2113   .debug_str:0000000000000000 .LASF39
     /tmp/ccA1rBM0.s:2203   .debug_str:0000000000000295 .LASF92
     /tmp/ccA1rBM0.s:2187   .debug_str:000000000000023e .LASF87
     /tmp/ccA1rBM0.s:2129   .debug_str:000000000000008c .LASF89
     /tmp/ccA1rBM0.s:2139   .debug_str:00000000000000e4 .LASF141
     /tmp/ccA1rBM0.s:2115   .debug_str:0000000000000010 .LASF40
     /tmp/ccA1rBM0.s:2239   .debug_str:00000000000003b0 .LASF41
     /tmp/ccA1rBM0.s:2377   .debug_str:0000000000000852 .LASF42
     /tmp/ccA1rBM0.s:2215   .debug_str:0000000000000301 .LASF43
     /tmp/ccA1rBM0.s:2391   .debug_str:00000000000008c4 .LASF44
     /tmp/ccA1rBM0.s:2323   .debug_str:000000000000061a .LASF45
GAS LISTING /tmp/ccA1rBM0.s 			page 12


     /tmp/ccA1rBM0.s:2265   .debug_str:000000000000045e .LASF46
     /tmp/ccA1rBM0.s:2233   .debug_str:0000000000000398 .LASF47
     /tmp/ccA1rBM0.s:2381   .debug_str:0000000000000872 .LASF48
     /tmp/ccA1rBM0.s:2147   .debug_str:0000000000000120 .LASF49
     /tmp/ccA1rBM0.s:2351   .debug_str:000000000000077e .LASF50
     /tmp/ccA1rBM0.s:2315   .debug_str:00000000000005d6 .LASF142
     /tmp/ccA1rBM0.s:2145   .debug_str:0000000000000117 .LASF56
     /tmp/ccA1rBM0.s:2125   .debug_str:0000000000000062 .LASF58
     /tmp/ccA1rBM0.s:2195   .debug_str:000000000000026c .LASF51
     /tmp/ccA1rBM0.s:2373   .debug_str:000000000000082a .LASF53
     /tmp/ccA1rBM0.s:2197   .debug_str:000000000000027b .LASF52
     /tmp/ccA1rBM0.s:2311   .debug_str:00000000000005a3 .LASF54
     /tmp/ccA1rBM0.s:2231   .debug_str:000000000000038e .LASF55
     /tmp/ccA1rBM0.s:2281   .debug_str:00000000000004cf .LASF57
     /tmp/ccA1rBM0.s:2383   .debug_str:000000000000087f .LASF59
     /tmp/ccA1rBM0.s:2237   .debug_str:00000000000003ab .LASF60
     /tmp/ccA1rBM0.s:2333   .debug_str:000000000000065a .LASF61
     /tmp/ccA1rBM0.s:2177   .debug_str:00000000000001ff .LASF76
     /tmp/ccA1rBM0.s:2353   .debug_str:0000000000000788 .LASF62
     /tmp/ccA1rBM0.s:2189   .debug_str:0000000000000249 .LASF63
     /tmp/ccA1rBM0.s:2329   .debug_str:0000000000000640 .LASF64
     /tmp/ccA1rBM0.s:2241   .debug_str:00000000000003b6 .LASF65
     /tmp/ccA1rBM0.s:2287   .debug_str:00000000000004ff .LASF66
     /tmp/ccA1rBM0.s:2271   .debug_str:0000000000000492 .LASF67
     /tmp/ccA1rBM0.s:2291   .debug_str:0000000000000522 .LASF68
     /tmp/ccA1rBM0.s:2285   .debug_str:00000000000004f5 .LASF69
     /tmp/ccA1rBM0.s:2317   .debug_str:00000000000005e7 .LASF70
     /tmp/ccA1rBM0.s:2183   .debug_str:0000000000000228 .LASF71
     /tmp/ccA1rBM0.s:2295   .debug_str:000000000000053f .LASF72
     /tmp/ccA1rBM0.s:2199   .debug_str:000000000000028a .LASF73
     /tmp/ccA1rBM0.s:2243   .debug_str:00000000000003c2 .LASF74
     /tmp/ccA1rBM0.s:2211   .debug_str:00000000000002e5 .LASF75
     /tmp/ccA1rBM0.s:2365   .debug_str:00000000000007f3 .LASF77
     /tmp/ccA1rBM0.s:2163   .debug_str:000000000000019f .LASF78
     /tmp/ccA1rBM0.s:2345   .debug_str:0000000000000694 .LASF79
     /tmp/ccA1rBM0.s:2141   .debug_str:00000000000000f7 .LASF80
     /tmp/ccA1rBM0.s:2385   .debug_str:000000000000089a .LASF81
     /tmp/ccA1rBM0.s:2205   .debug_str:00000000000002a2 .LASF82
     /tmp/ccA1rBM0.s:2185   .debug_str:0000000000000233 .LASF84
     /tmp/ccA1rBM0.s:2267   .debug_str:0000000000000466 .LASF86
     /tmp/ccA1rBM0.s:2361   .debug_str:00000000000007dc .LASF88
     /tmp/ccA1rBM0.s:2299   .debug_str:0000000000000553 .LASF90
     /tmp/ccA1rBM0.s:2297   .debug_str:000000000000054a .LASF91
     /tmp/ccA1rBM0.s:2283   .debug_str:00000000000004df .LASF93
     /tmp/ccA1rBM0.s:2279   .debug_str:00000000000004c8 .LASF94
     /tmp/ccA1rBM0.s:2263   .debug_str:000000000000044a .LASF95
     /tmp/ccA1rBM0.s:2261   .debug_str:0000000000000443 .LASF96
     /tmp/ccA1rBM0.s:2293   .debug_str:000000000000052b .LASF97
     /tmp/ccA1rBM0.s:2251   .debug_str:00000000000003fa .LASF98
     /tmp/ccA1rBM0.s:2313   .debug_str:00000000000005c1 .LASF99
     /tmp/ccA1rBM0.s:2253   .debug_str:0000000000000402 .LASF100
     /tmp/ccA1rBM0.s:2229   .debug_str:0000000000000379 .LASF101
     /tmp/ccA1rBM0.s:2235   .debug_str:00000000000003a3 .LASF102
     /tmp/ccA1rBM0.s:2249   .debug_str:00000000000003e5 .LASF103
     /tmp/ccA1rBM0.s:2397   .debug_str:00000000000008e5 .LASF104
     /tmp/ccA1rBM0.s:2359   .debug_str:00000000000007c7 .LASF105
     /tmp/ccA1rBM0.s:2327   .debug_str:0000000000000639 .LASF106
GAS LISTING /tmp/ccA1rBM0.s 			page 13


     /tmp/ccA1rBM0.s:2275   .debug_str:00000000000004a8 .LASF107
     /tmp/ccA1rBM0.s:2309   .debug_str:000000000000059c .LASF108
     /tmp/ccA1rBM0.s:2143   .debug_str:0000000000000103 .LASF109
     /tmp/ccA1rBM0.s:2151   .debug_str:0000000000000141 .LASF110
     /tmp/ccA1rBM0.s:2305   .debug_str:0000000000000582 .LASF111
     /tmp/ccA1rBM0.s:2201   .debug_str:000000000000028f .LASF112
     /tmp/ccA1rBM0.s:2259   .debug_str:0000000000000430 .LASF113
     /tmp/ccA1rBM0.s:2119   .debug_str:0000000000000022 .LASF114
     /tmp/ccA1rBM0.s:2369   .debug_str:0000000000000807 .LASF115
     /tmp/ccA1rBM0.s:2301   .debug_str:0000000000000569 .LASF116
     /tmp/ccA1rBM0.s:2255   .debug_str:000000000000040a .LASF117
     /tmp/ccA1rBM0.s:2375   .debug_str:0000000000000848 .LASF118
     /tmp/ccA1rBM0.s:2165   .debug_str:00000000000001ab .LASF119
     /tmp/ccA1rBM0.s:2371   .debug_str:0000000000000820 .LASF120
     /tmp/ccA1rBM0.s:2127   .debug_str:0000000000000075 .LASF121
     /tmp/ccA1rBM0.s:2341   .debug_str:0000000000000687 .LASF122
     /tmp/ccA1rBM0.s:2173   .debug_str:00000000000001e3 .LASF123
     /tmp/ccA1rBM0.s:105    .text:0000000000000064 .LFB33
     /tmp/ccA1rBM0.s:232    .text:0000000000000180 .LFE33
     /tmp/ccA1rBM0.s:2076   .debug_loc:0000000000000000 .LLST0
     /tmp/ccA1rBM0.s:154    .text:00000000000000d8 .LBB6
     /tmp/ccA1rBM0.s:167    .text:00000000000000e0 .LBE6
     /tmp/ccA1rBM0.s:2083   .debug_loc:0000000000000023 .LLST1
     /tmp/ccA1rBM0.s:202    .text:0000000000000158 .LBB8
     /tmp/ccA1rBM0.s:210    .text:000000000000015c .LBE8
     /tmp/ccA1rBM0.s:2091   .debug_loc:0000000000000047 .LLST2
     /tmp/ccA1rBM0.s:129    .text:0000000000000090 .LVL3
     /tmp/ccA1rBM0.s:140    .text:00000000000000b0 .LVL5
     /tmp/ccA1rBM0.s:146    .text:00000000000000c4 .LVL6
     /tmp/ccA1rBM0.s:152    .text:00000000000000d8 .LVL7
     /tmp/ccA1rBM0.s:174    .text:00000000000000fc .LVL9
     /tmp/ccA1rBM0.s:181    .text:0000000000000118 .LVL10
     /tmp/ccA1rBM0.s:188    .text:0000000000000134 .LVL11
     /tmp/ccA1rBM0.s:195    .text:0000000000000150 .LVL12
     /tmp/ccA1rBM0.s:216    .text:0000000000000168 .LVL15
     /tmp/ccA1rBM0.s:2277   .debug_str:00000000000004bc .LASF124
     /tmp/ccA1rBM0.s:10     .text:0000000000000000 .LFB32
     /tmp/ccA1rBM0.s:25     .text:0000000000000010 .LFE32
     /tmp/ccA1rBM0.s:2245   .debug_str:00000000000003c7 .LASF125
     /tmp/ccA1rBM0.s:2355   .debug_str:0000000000000792 .LASF126
     /tmp/ccA1rBM0.s:70     .text:0000000000000034 .LFB31
     /tmp/ccA1rBM0.s:99     .text:0000000000000064 .LFE31
     /tmp/ccA1rBM0.s:84     .text:000000000000004c .LVL1
     /tmp/ccA1rBM0.s:88     .text:0000000000000054 .LVL2
     /tmp/ccA1rBM0.s:2257   .debug_str:0000000000000423 .LASF127
     /tmp/ccA1rBM0.s:31     .text:0000000000000010 .LFB30
     /tmp/ccA1rBM0.s:64     .text:0000000000000034 .LFE30
     /tmp/ccA1rBM0.s:2155   .debug_str:000000000000015d .LASF128
     /tmp/ccA1rBM0.s:2367   .debug_str:0000000000000802 .LASF143
     /tmp/ccA1rBM0.s:2171   .debug_str:00000000000001de .LASF144
     /tmp/ccA1rBM0.s:2289   .debug_str:000000000000050f .LASF129
     /tmp/ccA1rBM0.s:2159   .debug_str:000000000000016e .LASF130
     /tmp/ccA1rBM0.s:2221   .debug_str:0000000000000323 .LASF131
     /tmp/ccA1rBM0.s:2137   .debug_str:00000000000000d1 .LASF132
     /tmp/ccA1rBM0.s:2123   .debug_str:000000000000004d .LASF133
     /tmp/ccA1rBM0.s:2191   .debug_str:0000000000000252 .LASF134
     /tmp/ccA1rBM0.s:2273   .debug_str:000000000000049f .LASF135
GAS LISTING /tmp/ccA1rBM0.s 			page 14


     /tmp/ccA1rBM0.s:138    .text:00000000000000a8 .LVL4
     /tmp/ccA1rBM0.s:164    .text:00000000000000e0 .LVL8
     /tmp/ccA1rBM0.s:201    .text:0000000000000158 .LVL13
     /tmp/ccA1rBM0.s:208    .text:000000000000015c .LVL14
     /tmp/ccA1rBM0.s:247    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z8userMainv
interrupt
_ZN3PCB14createProccessEPFvvEPv
_ZN3PCB7runningE
_ZN3CCB8semInputE
_Z8sem_openPP3SCBj
_ZN3CCB9semOutputE
_ZN3CCB16inputBufferEmptyE
_Z13thread_createPP3PCBPFvPvES2_
_ZN3CCB9inputBodyEPv
_ZN3CCB12inputProccesE
_ZN3CCB10outputBodyEPv
_ZN3CCB13outputProcessE
_ZN9Scheduler11idleProcessE
_Z18thread_create_onlyPP3PCBPFvPvES2_
_Z15thread_dispatchv

GAS LISTING /tmp/ccqXNRES.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator9mem_allocEm
   9              	_ZN15MemoryAllocator9mem_allocEm:
  10              	.LFB9:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.h"
   2:src/MemoryAllocator.cpp **** 
   3:src/MemoryAllocator.cpp **** MemoryAllocator::FreeSegment* MemoryAllocator::head = nullptr;
   4:src/MemoryAllocator.cpp **** 
   5:src/MemoryAllocator.cpp **** void *MemoryAllocator::mem_alloc(size_t size) {
  12              		.loc 1 5 47
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
   6:src/MemoryAllocator.cpp ****     if(head == nullptr) { // ako prvi put alociramo memoriju, alociracemo head na pocetak mem segme
  21              		.loc 1 6 5
  22              		.loc 1 6 13 is_stmt 0
  23 000c 97070000 		ld	a5,.LANCHOR0
  23      83B70700 
  24              		.loc 1 6 5
  25 0014 638C0702 		beqz	a5,.L16
   7:src/MemoryAllocator.cpp ****         head = (FreeSegment*)HEAP_START_ADDR;
   8:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
   9:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR); // HEAP_END_ADDR je adresa 
  10:src/MemoryAllocator.cpp ****         head->next = nullptr;
  11:src/MemoryAllocator.cpp ****     }
  12:src/MemoryAllocator.cpp ****     else if(head == (FreeSegment*)HEAP_END_ADDR) { // ako ne postoji slobodan prostor
  26              		.loc 1 12 10 is_stmt 1
  27              		.loc 1 12 21 is_stmt 0
  28 0018 17070000 		la	a4,HEAP_END_ADDR
  28      03370700 
  29 0020 03370700 		ld	a4,0(a4)
  30              		.loc 1 12 10
  31 0024 638CE712 		beq	a5,a4,.L13
  32              	.L3:
  13:src/MemoryAllocator.cpp ****         return nullptr;
  14:src/MemoryAllocator.cpp ****     }
  15:src/MemoryAllocator.cpp **** 
  16:src/MemoryAllocator.cpp ****     size += SegmentOffset; // dodajemo zaglavlje
  33              		.loc 1 16 5 is_stmt 1
  34              		.loc 1 16 10 is_stmt 0
  35 0028 13078500 		addi	a4,a0,8
  36              	.LVL1:
  17:src/MemoryAllocator.cpp ****     size_t numOfBlocksToAllocate = sizeInBlocks(size);
  37              		.loc 1 17 5 is_stmt 1
  38              	.LBB33:
  39              	.LBB34:
GAS LISTING /tmp/ccqXNRES.s 			page 2


  40              		.file 2 "src/../h/MemoryAllocator.h"
   1:src/../h/MemoryAllocator.h **** #ifndef PROJECT_BASE_MEMORYALLOCATOR_H
   2:src/../h/MemoryAllocator.h **** #define PROJECT_BASE_MEMORYALLOCATOR_H
   3:src/../h/MemoryAllocator.h **** 
   4:src/../h/MemoryAllocator.h **** #include "hw.h"
   5:src/../h/MemoryAllocator.h **** 
   6:src/../h/MemoryAllocator.h **** class MemoryAllocator {
   7:src/../h/MemoryAllocator.h **** public:
   8:src/../h/MemoryAllocator.h ****     /*
   9:src/../h/MemoryAllocator.h ****     Alocira (najmanje) size bajtova memorije, zaokruženo i poravnato na blokove veličine MEM_BLOC
  10:src/../h/MemoryAllocator.h ****     Svaki alocirani segment ima zaglavlje sa velicinom tog segmenta(vraca se adresa nakon tog zagla
  11:src/../h/MemoryAllocator.h **** 
  12:src/../h/MemoryAllocator.h ****     Vraća:
  13:src/../h/MemoryAllocator.h ****     pokazivač na alocirani deo memorije u slučaju uspeha, nullptr u slučaju neuspeha
  14:src/../h/MemoryAllocator.h **** 
  15:src/../h/MemoryAllocator.h ****     Radi se po algoritmu first fit(alociramo prvi segment koji je >= size). Ako je preostao prostor
  16:src/../h/MemoryAllocator.h ****     jednog bloka, taj preostali prostor se pridruzuje ovom koji smo sad alocirali(jer nema poente d
  17:src/../h/MemoryAllocator.h ****     */
  18:src/../h/MemoryAllocator.h ****     static void* mem_alloc(size_t size);
  19:src/../h/MemoryAllocator.h ****     /*
  20:src/../h/MemoryAllocator.h ****     Oslobađa prostor prethodno zauzet pomoću mem_alloc.
  21:src/../h/MemoryAllocator.h ****     Vraća 0 u slučaju uspeha, BAD_POINTER  flag ako je dostavljen los pokazivac.
  22:src/../h/MemoryAllocator.h ****     Ako je moguce, spaja dva susedna slobodna segmenta u jedan veci
  23:src/../h/MemoryAllocator.h ****     */
  24:src/../h/MemoryAllocator.h ****     static int mem_free(void* memSegment);
  25:src/../h/MemoryAllocator.h **** 
  26:src/../h/MemoryAllocator.h ****     enum memFreeFlags {
  27:src/../h/MemoryAllocator.h ****         BAD_POINTER = -1 // nije koriscen pokazviac iz mem_alloc
  28:src/../h/MemoryAllocator.h ****     };
  29:src/../h/MemoryAllocator.h **** 
  30:src/../h/MemoryAllocator.h ****     // Vraca minimalan potreban broj blokova za alokaciju memorije velicine size bajtova
  31:src/../h/MemoryAllocator.h ****     static inline size_t sizeInBlocks(size_t size) {
  32:src/../h/MemoryAllocator.h ****         return (size / MEM_BLOCK_SIZE) + (size % MEM_BLOCK_SIZE > 0);
  41              		.loc 2 32 9
  42              		.loc 2 32 22 is_stmt 0
  43 002c 13586700 		srli	a6,a4,6
  44              		.loc 2 32 48
  45 0030 9377F703 		andi	a5,a4,63
  46              		.loc 2 32 65
  47 0034 B337F000 		snez	a5,a5
  48              		.loc 2 32 68
  49 0038 3308F800 		add	a6,a6,a5
  50              	.LVL2:
  51              	.LBE34:
  52              	.LBE33:
  18:src/MemoryAllocator.cpp **** 
  19:src/MemoryAllocator.cpp ****     FreeSegment *curr = head, *prev = nullptr;
  53              		.loc 1 19 5 is_stmt 1
  54              		.loc 1 19 18 is_stmt 0
  55 003c 17050000 		ld	a0,.LANCHOR0
  55      03350500 
  56              	.LVL3:
  57              		.loc 1 19 32
  58 0044 13060000 		li	a2,0
  59 0048 6F00800A 		j	.L12
  60              	.LVL4:
  61              	.L16:
GAS LISTING /tmp/ccqXNRES.s 			page 3


   7:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
  62              		.loc 1 7 9 is_stmt 1
   7:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
  63              		.loc 1 7 14 is_stmt 0
  64 004c 97060000 		la	a3,HEAP_START_ADDR
  64      83B60600 
  65 0054 83B70600 		ld	a5,0(a3)
  66 0058 17070000 		sd	a5,.LANCHOR0,a4
  66      2330F700 
   8:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR); // HEAP_END_ADDR je adresa 
  67              		.loc 1 8 9 is_stmt 1
   8:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR); // HEAP_END_ADDR je adresa 
  68              		.loc 1 8 24 is_stmt 0
  69 0060 23B0F700 		sd	a5,0(a5)
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  70              		.loc 1 9 9 is_stmt 1
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  71              		.loc 1 9 45 is_stmt 0
  72 0064 17070000 		la	a4,HEAP_END_ADDR
  72      03370700 
  73 006c 03370700 		ld	a4,0(a4)
  74 0070 83B60600 		ld	a3,0(a3)
  75 0074 3307D740 		sub	a4,a4,a3
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  76              		.loc 1 9 20
  77 0078 23B4E700 		sd	a4,8(a5)
  10:src/MemoryAllocator.cpp ****     }
  78              		.loc 1 10 9 is_stmt 1
  10:src/MemoryAllocator.cpp ****     }
  79              		.loc 1 10 20 is_stmt 0
  80 007c 23B80700 		sd	zero,16(a5)
  81 0080 6FF09FFA 		j	.L3
  82              	.LVL5:
  83              	.L19:
  84              	.LBB35:
  85              	.LBB36:
  86              	.LBB37:
  87              	.LBB38:
  20:src/MemoryAllocator.cpp ****     while(curr) {
  21:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = (curr->size/MEM_BLOCK_SIZE); // zaokruzujemo da donji ceo deo
  22:src/MemoryAllocator.cpp ****         size_t allocatedSize;
  23:src/MemoryAllocator.cpp ****         void* startOfAllocatedSpace = curr->baseAddr;
  24:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
  25:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
  26:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
  88              		.loc 1 26 17 is_stmt 1
  27:src/MemoryAllocator.cpp **** 
  28:src/MemoryAllocator.cpp ****                 if(prev == nullptr) { // ako smo na head pokazivacu
  89              		.loc 1 28 17
  90 0084 630E0600 		beqz	a2,.L17
  29:src/MemoryAllocator.cpp ****                     if(curr->next == nullptr) { // ako ne postoji slobodan prostor nakon alokacije
  30:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
  31:src/MemoryAllocator.cpp ****                     }
  32:src/MemoryAllocator.cpp ****                     else {
  33:src/MemoryAllocator.cpp ****                         head = curr->next;
  34:src/MemoryAllocator.cpp ****                     }
  35:src/MemoryAllocator.cpp ****                 }
GAS LISTING /tmp/ccqXNRES.s 			page 4


  36:src/MemoryAllocator.cpp ****                 else {
  37:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
  91              		.loc 1 37 21
  92              	.LVL6:
  93              	.LBB39:
  94              	.LBB40:
  33:src/../h/MemoryAllocator.h ****     }
  34:src/../h/MemoryAllocator.h **** 
  35:src/../h/MemoryAllocator.h ****     // Vraca velicinu numOfBlocks blokova u bajtovima
  36:src/../h/MemoryAllocator.h ****     static inline size_t blocksInSize(size_t numOfBlocks) {
  37:src/../h/MemoryAllocator.h ****         return numOfBlocks * MEM_BLOCK_SIZE;
  38:src/../h/MemoryAllocator.h ****     }
  39:src/../h/MemoryAllocator.h **** private:
  40:src/../h/MemoryAllocator.h ****     MemoryAllocator() {} // da bi se zabranilo pravljenje objekata
  41:src/../h/MemoryAllocator.h **** 
  42:src/../h/MemoryAllocator.h ****     struct FreeSegment { // Jednostruko ulancana lista slobodnih segmenata
  43:src/../h/MemoryAllocator.h ****         void* baseAddr; // pocetna adresa u segmentu
  44:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta
  45:src/../h/MemoryAllocator.h ****         FreeSegment* next; // sledeci element u ulancanoj listi
  46:src/../h/MemoryAllocator.h **** 
  47:src/../h/MemoryAllocator.h ****         // brise element iz ulancane liste koji se nalazi posle elementa prev
  48:src/../h/MemoryAllocator.h ****         static void remove(FreeSegment* prev) {
  49:src/../h/MemoryAllocator.h ****             if(!prev->next) return;
  95              		.loc 2 49 13
  96              		.loc 2 49 23 is_stmt 0
  97 0088 03370601 		ld	a4,16(a2)
  98              	.LVL7:
  99              		.loc 2 49 13
 100 008c 630A0704 		beqz	a4,.L14
  50:src/../h/MemoryAllocator.h **** 
  51:src/../h/MemoryAllocator.h ****             FreeSegment* curr = prev->next;
 101              		.loc 2 51 13 is_stmt 1
 102              	.LVL8:
  52:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 103              		.loc 2 52 13
 104              		.loc 2 52 32 is_stmt 0
 105 0090 03370701 		ld	a4,16(a4)
 106              	.LVL9:
 107              		.loc 2 52 24
 108 0094 2338E600 		sd	a4,16(a2)
 109              	.LVL10:
 110              	.LBE40:
 111              	.LBE39:
  26:src/MemoryAllocator.cpp **** 
 112              		.loc 1 26 31
 113 0098 13880700 		mv	a6,a5
 114              	.LVL11:
 115 009c 6F00C00A 		j	.L9
 116              	.LVL12:
 117              	.L17:
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 118              		.loc 1 29 21 is_stmt 1
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 119              		.loc 1 29 30 is_stmt 0
 120 00a0 03370501 		ld	a4,16(a0)
 121              	.LVL13:
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
GAS LISTING /tmp/ccqXNRES.s 			page 5


 122              		.loc 1 29 21
 123 00a4 630A0700 		beqz	a4,.L18
  33:src/MemoryAllocator.cpp ****                     }
 124              		.loc 1 33 25 is_stmt 1
  33:src/MemoryAllocator.cpp ****                     }
 125              		.loc 1 33 30 is_stmt 0
 126 00a8 97060000 		sd	a4,.LANCHOR0,a3
 126      23B0E600 
 127              	.LVL14:
  26:src/MemoryAllocator.cpp **** 
 128              		.loc 1 26 31
 129 00b0 13880700 		mv	a6,a5
 130              	.LVL15:
 131 00b4 6F004009 		j	.L9
 132              	.LVL16:
 133              	.L18:
  30:src/MemoryAllocator.cpp ****                     }
 134              		.loc 1 30 25 is_stmt 1
  30:src/MemoryAllocator.cpp ****                     }
 135              		.loc 1 30 30 is_stmt 0
 136 00b8 17070000 		la	a4,HEAP_END_ADDR
 136      03370700 
 137 00c0 03370700 		ld	a4,0(a4)
 138 00c4 97060000 		sd	a4,.LANCHOR0,a3
 138      23B0E600 
 139              	.LVL17:
  26:src/MemoryAllocator.cpp **** 
 140              		.loc 1 26 31
 141 00cc 13880700 		mv	a6,a5
 142              	.LVL18:
 143 00d0 6F008007 		j	.L9
 144              	.LVL19:
 145              	.L20:
 146              	.LBB41:
  38:src/MemoryAllocator.cpp ****                 }
  39:src/MemoryAllocator.cpp ****             }
  40:src/MemoryAllocator.cpp ****             else {
  41:src/MemoryAllocator.cpp ****                 allocatedSize = blocksInSize(numOfBlocksToAllocate);
  42:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
  43:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
  44:src/MemoryAllocator.cpp **** 
  45:src/MemoryAllocator.cpp ****                 FreeSegment* newSeg = (FreeSegment*)newBaseAddr;
  46:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
  47:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
  48:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
  49:src/MemoryAllocator.cpp **** 
  50:src/MemoryAllocator.cpp ****                 if(!prev) {
  51:src/MemoryAllocator.cpp ****                     head = newSeg;
 147              		.loc 1 51 21 is_stmt 1
 148              		.loc 1 51 26 is_stmt 0
 149 00d4 97070000 		sd	a4,.LANCHOR0,a5
 149      23B0E700 
 150 00dc 6F00C006 		j	.L9
 151              	.LVL20:
 152              	.L14:
 153              	.LBE41:
  26:src/MemoryAllocator.cpp **** 
GAS LISTING /tmp/ccqXNRES.s 			page 6


 154              		.loc 1 26 31
 155 00e0 13880700 		mv	a6,a5
 156              	.LVL21:
 157 00e4 6F004006 		j	.L9
 158              	.LVL22:
 159              	.L5:
 160              	.LBE38:
 161              	.LBE37:
 162              	.LBE36:
  52:src/MemoryAllocator.cpp ****                 }
  53:src/MemoryAllocator.cpp ****                 else {
  54:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
  55:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
  56:src/MemoryAllocator.cpp ****                 }
  57:src/MemoryAllocator.cpp ****             }
  58:src/MemoryAllocator.cpp **** 
  59:src/MemoryAllocator.cpp ****             ((AllocatedSpaceHeader*)startOfAllocatedSpace)->size = allocatedSize;
  60:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
  61:src/MemoryAllocator.cpp ****         }
  62:src/MemoryAllocator.cpp **** 
  63:src/MemoryAllocator.cpp ****         prev = curr;
 163              		.loc 1 63 9 is_stmt 1
  64:src/MemoryAllocator.cpp ****         curr = curr->next;
 164              		.loc 1 64 9
  63:src/MemoryAllocator.cpp ****         curr = curr->next;
 165              		.loc 1 63 14 is_stmt 0
 166 00e8 13060500 		mv	a2,a0
 167              		.loc 1 64 14
 168 00ec 03350501 		ld	a0,16(a0)
 169              	.LVL23:
 170              	.L12:
 171              	.LBE35:
  20:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = (curr->size/MEM_BLOCK_SIZE); // zaokruzujemo da donji ceo deo
 172              		.loc 1 20 5 is_stmt 1
  20:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = (curr->size/MEM_BLOCK_SIZE); // zaokruzujemo da donji ceo deo
 173              		.loc 1 20 11
 174 00f0 63000506 		beqz	a0,.L1
 175              	.LBB52:
  21:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 176              		.loc 1 21 9
  21:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 177              		.loc 1 21 45 is_stmt 0
 178 00f4 83378500 		ld	a5,8(a0)
  21:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 179              		.loc 1 21 16
 180 00f8 93D66700 		srli	a3,a5,6
 181              	.LVL24:
  22:src/MemoryAllocator.cpp ****         void* startOfAllocatedSpace = curr->baseAddr;
 182              		.loc 1 22 9 is_stmt 1
  23:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
 183              		.loc 1 23 9
  23:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
 184              		.loc 1 23 15 is_stmt 0
 185 00fc 83350500 		ld	a1,0(a0)
 186              	.LVL25:
  24:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
 187              		.loc 1 24 9 is_stmt 1
GAS LISTING /tmp/ccqXNRES.s 			page 7


 188              	.LBB51:
 189 0100 E3E4E7FE 		bltu	a5,a4,.L5
  24:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
 190              		.loc 1 24 31 is_stmt 0 discriminator 1
 191 0104 E3E206FF 		bltu	a3,a6,.L5
 192              	.LBB50:
  25:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
 193              		.loc 1 25 13 is_stmt 1
 194              	.LBB49:
 195 0108 E38E06F7 		beq	a3,a6,.L19
 196              	.LBB48:
  41:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
 197              		.loc 1 41 17
 198              	.LVL26:
 199              	.LBB42:
 200              	.LBB43:
  37:src/../h/MemoryAllocator.h ****     }
 201              		.loc 2 37 9
  37:src/../h/MemoryAllocator.h ****     }
 202              		.loc 2 37 30 is_stmt 0
 203 010c 13186800 		slli	a6,a6,6
 204              	.LVL27:
 205              	.LBE43:
 206              	.LBE42:
  42:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 207              		.loc 1 42 17 is_stmt 1
  42:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 208              		.loc 1 42 23 is_stmt 0
 209 0110 33870501 		add	a4,a1,a6
 210              	.LVL28:
  43:src/MemoryAllocator.cpp **** 
 211              		.loc 1 43 17 is_stmt 1
  43:src/MemoryAllocator.cpp **** 
 212              		.loc 1 43 24 is_stmt 0
 213 0114 B3870741 		sub	a5,a5,a6
 214              	.LVL29:
  45:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
 215              		.loc 1 45 17 is_stmt 1
  46:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 216              		.loc 1 46 17
  46:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 217              		.loc 1 46 34 is_stmt 0
 218 0118 2330E700 		sd	a4,0(a4)
  47:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 219              		.loc 1 47 17 is_stmt 1
  47:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 220              		.loc 1 47 30 is_stmt 0
 221 011c 2334F700 		sd	a5,8(a4)
  48:src/MemoryAllocator.cpp **** 
 222              		.loc 1 48 17 is_stmt 1
  48:src/MemoryAllocator.cpp **** 
 223              		.loc 1 48 38 is_stmt 0
 224 0120 83370501 		ld	a5,16(a0)
 225              	.LVL30:
  48:src/MemoryAllocator.cpp **** 
 226              		.loc 1 48 30
 227 0124 2338F700 		sd	a5,16(a4)
GAS LISTING /tmp/ccqXNRES.s 			page 8


  50:src/MemoryAllocator.cpp ****                     head = newSeg;
 228              		.loc 1 50 17 is_stmt 1
 229 0128 E30606FA 		beqz	a2,.L20
  54:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
 230              		.loc 1 54 21
 231              	.LVL31:
 232              	.LBB44:
 233              	.LBB45:
  49:src/../h/MemoryAllocator.h **** 
 234              		.loc 2 49 13
  49:src/../h/MemoryAllocator.h **** 
 235              		.loc 2 49 23 is_stmt 0
 236 012c 83370601 		ld	a5,16(a2)
  49:src/../h/MemoryAllocator.h **** 
 237              		.loc 2 49 13
 238 0130 63860700 		beqz	a5,.L11
  51:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 239              		.loc 2 51 13 is_stmt 1
 240              	.LVL32:
 241              		.loc 2 52 13
 242              		.loc 2 52 32 is_stmt 0
 243 0134 83B70701 		ld	a5,16(a5)
 244              	.LVL33:
 245              		.loc 2 52 24
 246 0138 2338F600 		sd	a5,16(a2)
 247              	.LVL34:
 248              	.L11:
 249              	.LBE45:
 250              	.LBE44:
  55:src/MemoryAllocator.cpp ****                 }
 251              		.loc 1 55 21 is_stmt 1
 252              	.LBB46:
 253              	.LBB47:
  53:src/../h/MemoryAllocator.h ****         }
  54:src/../h/MemoryAllocator.h **** 
  55:src/../h/MemoryAllocator.h ****         // dodaje element curr u ulancanu listu nakon elementa prev(samo menja prev->next curr->nex
  56:src/../h/MemoryAllocator.h ****         static void add(FreeSegment* prev, FreeSegment* curr) {
  57:src/../h/MemoryAllocator.h ****             curr->next = prev->next;
 254              		.loc 2 57 13
 255              		.loc 2 57 32 is_stmt 0
 256 013c 83370601 		ld	a5,16(a2)
 257              		.loc 2 57 24
 258 0140 2338F500 		sd	a5,16(a0)
  58:src/../h/MemoryAllocator.h ****             prev->next = curr;
 259              		.loc 2 58 13 is_stmt 1
 260              		.loc 2 58 24 is_stmt 0
 261 0144 2338A600 		sd	a0,16(a2)
 262              	.LVL35:
 263              	.L9:
 264              	.LBE47:
 265              	.LBE46:
 266              	.LBE48:
 267              	.LBE49:
  59:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 268              		.loc 1 59 13 is_stmt 1
  59:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 269              		.loc 1 59 66 is_stmt 0
GAS LISTING /tmp/ccqXNRES.s 			page 9


 270 0148 23B00501 		sd	a6,0(a1)
  60:src/MemoryAllocator.cpp ****         }
 271              		.loc 1 60 13 is_stmt 1
  60:src/MemoryAllocator.cpp ****         }
 272              		.loc 1 60 72 is_stmt 0
 273 014c 13858500 		addi	a0,a1,8
 274              	.LVL36:
 275              	.L1:
 276              	.LBE50:
 277              	.LBE51:
 278              	.LBE52:
  65:src/MemoryAllocator.cpp ****     }
  66:src/MemoryAllocator.cpp **** 
  67:src/MemoryAllocator.cpp ****     return nullptr; // ne postoji dovoljan slobodan prostor
  68:src/MemoryAllocator.cpp **** }
 279              		.loc 1 68 1
 280 0150 03348100 		ld	s0,8(sp)
 281              		.cfi_remember_state
 282              		.cfi_restore 8
 283              		.cfi_def_cfa 2, 16
 284 0154 13010101 		addi	sp,sp,16
 285              		.cfi_def_cfa_offset 0
 286 0158 67800000 		jr	ra
 287              	.LVL37:
 288              	.L13:
 289              		.cfi_restore_state
  13:src/MemoryAllocator.cpp ****     }
 290              		.loc 1 13 16
 291 015c 13050000 		li	a0,0
 292              	.LVL38:
 293 0160 6FF01FFF 		j	.L1
 294              		.cfi_endproc
 295              	.LFE9:
 297              		.align	2
 298              		.globl	_ZN15MemoryAllocator8mem_freeEPv
 300              	_ZN15MemoryAllocator8mem_freeEPv:
 301              	.LFB10:
  69:src/MemoryAllocator.cpp **** 
  70:src/MemoryAllocator.cpp **** int MemoryAllocator::mem_free(void *memSegment) {
 302              		.loc 1 70 49 is_stmt 1
 303              		.cfi_startproc
 304              	.LVL39:
 305 0164 130101FF 		addi	sp,sp,-16
 306              		.cfi_def_cfa_offset 16
 307 0168 23348100 		sd	s0,8(sp)
 308              		.cfi_offset 8, -8
 309 016c 13040101 		addi	s0,sp,16
 310              		.cfi_def_cfa 8, 0
  71:src/MemoryAllocator.cpp ****     if(!memSegment || (size_t)memSegment - SegmentOffset < (size_t)HEAP_START_ADDR) return BAD_POIN
 311              		.loc 1 71 5
 312 0170 63000516 		beqz	a0,.L30
 313              		.loc 1 71 42 is_stmt 0 discriminator 2
 314 0174 130785FF 		addi	a4,a0,-8
 315              		.loc 1 71 58 discriminator 2
 316 0178 97070000 		la	a5,HEAP_START_ADDR
 316      83B70700 
 317 0180 83B70700 		ld	a5,0(a5)
GAS LISTING /tmp/ccqXNRES.s 			page 10


 318              		.loc 1 71 20 discriminator 2
 319 0184 636AF714 		bltu	a4,a5,.L31
  72:src/MemoryAllocator.cpp **** 
  73:src/MemoryAllocator.cpp ****     size_t size = *(size_t*)((char*)memSegment - MemoryAllocator::SegmentOffset); // velicina koja 
 320              		.loc 1 73 5 is_stmt 1
 321              		.loc 1 73 12 is_stmt 0
 322 0188 833585FF 		ld	a1,-8(a0)
 323              	.LVL40:
  74:src/MemoryAllocator.cpp ****     memSegment = (void*)((char*)memSegment - MemoryAllocator::SegmentOffset); // pocetak segmenta u
 324              		.loc 1 74 5 is_stmt 1
  75:src/MemoryAllocator.cpp ****     if((char*)memSegment + size - 1 >= (char*)HEAP_END_ADDR || memSegment == nullptr
 325              		.loc 1 75 5
 326              		.loc 1 75 33 is_stmt 0
 327 018c 9386F5FF 		addi	a3,a1,-1
 328 0190 B306D700 		add	a3,a4,a3
 329              		.loc 1 75 40
 330 0194 17060000 		la	a2,HEAP_END_ADDR
 330      03360600 
 331 019c 03360600 		ld	a2,0(a2)
  76:src/MemoryAllocator.cpp ****         || !isStartOfBlock(memSegment) || size < MEM_BLOCK_SIZE) {
 332              		.loc 1 76 40
 333 01a0 63F0C614 		bgeu	a3,a2,.L32
  75:src/MemoryAllocator.cpp ****     if((char*)memSegment + size - 1 >= (char*)HEAP_END_ADDR || memSegment == nullptr
 334              		.loc 1 75 61
 335 01a4 63020714 		beqz	a4,.L33
 336              	.LVL41:
 337              	.LBB53:
 338              	.LBB54:
  59:src/../h/MemoryAllocator.h ****         }
  60:src/../h/MemoryAllocator.h ****     };
  61:src/../h/MemoryAllocator.h **** 
  62:src/../h/MemoryAllocator.h ****     struct AllocatedSpaceHeader { // Zaglavlje zauzetog segmenta
  63:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta(ukljucujuci i zaglavlje)
  64:src/../h/MemoryAllocator.h ****     };
  65:src/../h/MemoryAllocator.h **** 
  66:src/../h/MemoryAllocator.h ****     static const size_t SegmentOffset = sizeof(AllocatedSpaceHeader);
  67:src/../h/MemoryAllocator.h **** 
  68:src/../h/MemoryAllocator.h ****     static FreeSegment* head; // pocetak ulancane liste slobodnih segmenata
  69:src/../h/MemoryAllocator.h **** 
  70:src/../h/MemoryAllocator.h ****     // vraca relativnu adresu u odnosu na pocetak HEAP-a
  71:src/../h/MemoryAllocator.h ****     static inline size_t relativeAddress(void* address) {
  72:src/../h/MemoryAllocator.h ****         return (size_t)address - (size_t)HEAP_START_ADDR;
  73:src/../h/MemoryAllocator.h ****     }
  74:src/../h/MemoryAllocator.h **** 
  75:src/../h/MemoryAllocator.h ****     // vraca true ako je adresa pocetak bloka(relativno u odnosu na pocetak heap-a)
  76:src/../h/MemoryAllocator.h ****     static inline bool isStartOfBlock(void* address) {
  77:src/../h/MemoryAllocator.h ****         return relativeAddress(address) % MEM_BLOCK_SIZE == 0;
 339              		.loc 2 77 9 is_stmt 1
 340              	.LBB55:
 341              	.LBB56:
  72:src/../h/MemoryAllocator.h ****     }
 342              		.loc 2 72 9
  72:src/../h/MemoryAllocator.h ****     }
 343              		.loc 2 72 42 is_stmt 0
 344 01a8 B307F740 		sub	a5,a4,a5
 345              	.LVL42:
 346              	.LBE56:
GAS LISTING /tmp/ccqXNRES.s 			page 11


 347              	.LBE55:
 348              		.loc 2 77 41
 349 01ac 93F7F703 		andi	a5,a5,63
 350              	.LVL43:
 351              	.LBE54:
 352              	.LBE53:
 353              		.loc 1 76 9
 354 01b0 63900714 		bnez	a5,.L34
 355              		.loc 1 76 40 discriminator 3
 356 01b4 9307F003 		li	a5,63
 357 01b8 63F0B714 		bleu	a1,a5,.L35
  77:src/MemoryAllocator.cpp ****         return BAD_POINTER;
  78:src/MemoryAllocator.cpp ****     }
  79:src/MemoryAllocator.cpp **** 
  80:src/MemoryAllocator.cpp ****     if(head == HEAP_END_ADDR) { // ako je memorija puna onda samo oslobadja dati deo
 358              		.loc 1 80 5 is_stmt 1
 359              	.LBB57:
 360              		.loc 1 80 8 is_stmt 0
 361 01bc 97070000 		ld	a5,.LANCHOR0
 361      83B70700 
 362              		.loc 1 80 5
 363 01c4 6300F602 		beq	a2,a5,.L41
 364              	.LBE57:
  81:src/MemoryAllocator.cpp ****         FreeSegment* newFreeSegment = (FreeSegment*)memSegment;
  82:src/MemoryAllocator.cpp ****         newFreeSegment->size = size;
  83:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
  84:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
  85:src/MemoryAllocator.cpp **** 
  86:src/MemoryAllocator.cpp ****         head = newFreeSegment;
  87:src/MemoryAllocator.cpp ****         return 0;
  88:src/MemoryAllocator.cpp ****     }
  89:src/MemoryAllocator.cpp **** 
  90:src/MemoryAllocator.cpp ****     FreeSegment* curr = head, *prev = nullptr;
 365              		.loc 1 90 32
 366 01c8 13060000 		li	a2,0
 367              	.L23:
 368              	.LVL44:
  91:src/MemoryAllocator.cpp ****     // Ako nema greske posle while: ((char*)prev->baseAddr + prev->size) <= memSegment < curr->base
  92:src/MemoryAllocator.cpp ****     while(curr != nullptr && (char*)curr->baseAddr < (char*)memSegment) {
 369              		.loc 1 92 5 is_stmt 1
 370              		.loc 1 92 27
 371 01cc 638A0702 		beqz	a5,.L24
 372              		.loc 1 92 43 is_stmt 0 discriminator 1
 373 01d0 83B60700 		ld	a3,0(a5)
 374              		.loc 1 92 27 discriminator 1
 375 01d4 63F6E602 		bgeu	a3,a4,.L24
  93:src/MemoryAllocator.cpp ****         prev = curr;
 376              		.loc 1 93 9 is_stmt 1
 377              	.LVL45:
  94:src/MemoryAllocator.cpp ****         curr = curr->next;
 378              		.loc 1 94 9
  93:src/MemoryAllocator.cpp ****         prev = curr;
 379              		.loc 1 93 14 is_stmt 0
 380 01d8 13860700 		mv	a2,a5
 381              		.loc 1 94 14
 382 01dc 83B70701 		ld	a5,16(a5)
 383              	.LVL46:
GAS LISTING /tmp/ccqXNRES.s 			page 12


  92:src/MemoryAllocator.cpp ****         prev = curr;
 384              		.loc 1 92 5
 385 01e0 6FF0DFFE 		j	.L23
 386              	.LVL47:
 387              	.L41:
 388              	.LBB59:
 389              	.LBB58:
  81:src/MemoryAllocator.cpp ****         newFreeSegment->size = size;
 390              		.loc 1 81 9 is_stmt 1
  82:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
 391              		.loc 1 82 9
  82:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
 392              		.loc 1 82 30 is_stmt 0
 393 01e4 2330B500 		sd	a1,0(a0)
  83:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
 394              		.loc 1 83 9 is_stmt 1
  83:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
 395              		.loc 1 83 34 is_stmt 0
 396 01e8 233CE5FE 		sd	a4,-8(a0)
  84:src/MemoryAllocator.cpp **** 
 397              		.loc 1 84 9 is_stmt 1
  84:src/MemoryAllocator.cpp **** 
 398              		.loc 1 84 30 is_stmt 0
 399 01ec 23340500 		sd	zero,8(a0)
  86:src/MemoryAllocator.cpp ****         return 0;
 400              		.loc 1 86 9 is_stmt 1
  86:src/MemoryAllocator.cpp ****         return 0;
 401              		.loc 1 86 14 is_stmt 0
 402 01f0 97070000 		sd	a4,.LANCHOR0,a5
 402      23B0E700 
  87:src/MemoryAllocator.cpp ****     }
 403              		.loc 1 87 9 is_stmt 1
  87:src/MemoryAllocator.cpp ****     }
 404              		.loc 1 87 16 is_stmt 0
 405 01f8 13050000 		li	a0,0
 406 01fc 6F008004 		j	.L22
 407              	.LVL48:
 408              	.L24:
 409              	.LBE58:
 410              	.LBE59:
  95:src/MemoryAllocator.cpp ****     }
  96:src/MemoryAllocator.cpp **** 
  97:src/MemoryAllocator.cpp ****     if(prev == nullptr) {
 411              		.loc 1 97 5 is_stmt 1
 412              	.LBB60:
 413 0200 63080604 		beqz	a2,.L42
 414              	.LBB61:
  98:src/MemoryAllocator.cpp ****         if(curr == nullptr) { // nije se nijednom pozvao mem_alloc
  99:src/MemoryAllocator.cpp ****             return BAD_POINTER;
 100:src/MemoryAllocator.cpp ****         }
 101:src/MemoryAllocator.cpp ****         else {
 102:src/MemoryAllocator.cpp ****             FreeSegment* newFreeSegment = (FreeSegment*)memSegment;
 103:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 104:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 105:src/MemoryAllocator.cpp **** 
 106:src/MemoryAllocator.cpp ****             if((char*)head->baseAddr == ((char*)newFreeSegment->baseAddr + newFreeSegment->size)) {
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
GAS LISTING /tmp/ccqXNRES.s 			page 13


 108:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 109:src/MemoryAllocator.cpp ****             }
 110:src/MemoryAllocator.cpp ****             else {
 111:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head;
 112:src/MemoryAllocator.cpp ****             }
 113:src/MemoryAllocator.cpp ****             head = newFreeSegment;
 114:src/MemoryAllocator.cpp **** 
 115:src/MemoryAllocator.cpp ****             return 0;
 116:src/MemoryAllocator.cpp ****         }
 117:src/MemoryAllocator.cpp ****     }
 118:src/MemoryAllocator.cpp ****     else {
 119:src/MemoryAllocator.cpp ****         if((char*)prev->baseAddr + prev->size == (char*)memSegment) { // spajamo prethodni i novi s
 415              		.loc 1 119 9
 416              	.LBB62:
 417              		.loc 1 119 25 is_stmt 0
 418 0204 83360600 		ld	a3,0(a2)
 419              		.loc 1 119 42
 420 0208 03388600 		ld	a6,8(a2)
 421              		.loc 1 119 34
 422 020c B3860601 		add	a3,a3,a6
 423              		.loc 1 119 9
 424 0210 638AE608 		beq	a3,a4,.L43
 425              	.LBB63:
 120:src/MemoryAllocator.cpp ****             prev->size += size;
 121:src/MemoryAllocator.cpp ****         }
 122:src/MemoryAllocator.cpp ****         else {
 123:src/MemoryAllocator.cpp ****             FreeSegment *newFreeSegment = (FreeSegment *) memSegment;
 426              		.loc 1 123 13 is_stmt 1
 427              	.LVL49:
 124:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 428              		.loc 1 124 13
 429              		.loc 1 124 34 is_stmt 0
 430 0214 2330B500 		sd	a1,0(a0)
 125:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 431              		.loc 1 125 13 is_stmt 1
 432              		.loc 1 125 38 is_stmt 0
 433 0218 233CE5FE 		sd	a4,-8(a0)
 126:src/MemoryAllocator.cpp **** 
 127:src/MemoryAllocator.cpp ****             FreeSegment::add(prev, newFreeSegment); // ulancavamo prev i newFreeSegment
 434              		.loc 1 127 13 is_stmt 1
 435              	.LVL50:
 436              	.LBB64:
 437              	.LBB65:
  57:src/../h/MemoryAllocator.h ****             prev->next = curr;
 438              		.loc 2 57 13
  57:src/../h/MemoryAllocator.h ****             prev->next = curr;
 439              		.loc 2 57 32 is_stmt 0
 440 021c 83360601 		ld	a3,16(a2)
  57:src/../h/MemoryAllocator.h ****             prev->next = curr;
 441              		.loc 2 57 24
 442 0220 2334D500 		sd	a3,8(a0)
  58:src/../h/MemoryAllocator.h ****         }
 443              		.loc 2 58 13 is_stmt 1
  58:src/../h/MemoryAllocator.h ****         }
 444              		.loc 2 58 24 is_stmt 0
 445 0224 2338E600 		sd	a4,16(a2)
 446              	.LVL51:
GAS LISTING /tmp/ccqXNRES.s 			page 14


 447              	.LBE65:
 448              	.LBE64:
 128:src/MemoryAllocator.cpp ****             prev = newFreeSegment;
 449              		.loc 1 128 13 is_stmt 1
 450              	.L29:
 451              	.LBE63:
 452              	.LBE62:
 129:src/MemoryAllocator.cpp ****         }
 130:src/MemoryAllocator.cpp **** 
 131:src/MemoryAllocator.cpp ****         if(curr && (char*)curr->baseAddr == ((char*)prev->baseAddr + prev->size)) { // ako postoji 
 453              		.loc 1 131 9
 454 0228 6380070E 		beqz	a5,.L38
 455              		.loc 1 131 33 is_stmt 0 discriminator 1
 456 022c 83B50700 		ld	a1,0(a5)
 457              		.loc 1 131 59 discriminator 1
 458 0230 83360700 		ld	a3,0(a4)
 459              		.loc 1 131 76 discriminator 1
 460 0234 03368700 		ld	a2,8(a4)
 461              		.loc 1 131 68 discriminator 1
 462 0238 B386C600 		add	a3,a3,a2
 463              		.loc 1 131 17 discriminator 1
 464 023c 638CD506 		beq	a1,a3,.L44
 465              	.LBE61:
 466              	.LBE60:
 132:src/MemoryAllocator.cpp ****             prev->size += curr->size;
 133:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 134:src/MemoryAllocator.cpp ****         }
 135:src/MemoryAllocator.cpp ****     }
 136:src/MemoryAllocator.cpp **** 
 137:src/MemoryAllocator.cpp ****     return 0;
 467              		.loc 1 137 12
 468 0240 13050000 		li	a0,0
 469              	.LVL52:
 470              	.L22:
 138:src/MemoryAllocator.cpp **** }
 471              		.loc 1 138 1
 472 0244 03348100 		ld	s0,8(sp)
 473              		.cfi_remember_state
 474              		.cfi_restore 8
 475              		.cfi_def_cfa 2, 16
 476 0248 13010101 		addi	sp,sp,16
 477              		.cfi_def_cfa_offset 0
 478 024c 67800000 		jr	ra
 479              	.LVL53:
 480              	.L42:
 481              		.cfi_restore_state
  98:src/MemoryAllocator.cpp ****             return BAD_POINTER;
 482              		.loc 1 98 9 is_stmt 1
 483              	.LBB72:
 484              	.LBB67:
 485 0250 6388070A 		beqz	a5,.L37
 486              	.LBB68:
 102:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 487              		.loc 1 102 13
 488              	.LVL54:
 103:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 489              		.loc 1 103 13
GAS LISTING /tmp/ccqXNRES.s 			page 15


 103:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 490              		.loc 1 103 34 is_stmt 0
 491 0254 2330B500 		sd	a1,0(a0)
 104:src/MemoryAllocator.cpp **** 
 492              		.loc 1 104 13 is_stmt 1
 104:src/MemoryAllocator.cpp **** 
 493              		.loc 1 104 38 is_stmt 0
 494 0258 233CE5FE 		sd	a4,-8(a0)
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 495              		.loc 1 106 13 is_stmt 1
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 496              		.loc 1 106 16 is_stmt 0
 497 025c 97070000 		ld	a5,.LANCHOR0
 497      83B70700 
 498              	.LVL55:
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 499              		.loc 1 106 29
 500 0264 03B60700 		ld	a2,0(a5)
 501              	.LVL56:
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 502              		.loc 1 106 74
 503 0268 B306B700 		add	a3,a4,a1
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 504              		.loc 1 106 13
 505 026c 630CD600 		beq	a2,a3,.L45
 111:src/MemoryAllocator.cpp ****             }
 506              		.loc 1 111 17 is_stmt 1
 111:src/MemoryAllocator.cpp ****             }
 507              		.loc 1 111 38 is_stmt 0
 508 0270 2334F500 		sd	a5,8(a0)
 509              	.LVL57:
 510              	.L27:
 113:src/MemoryAllocator.cpp **** 
 511              		.loc 1 113 13 is_stmt 1
 113:src/MemoryAllocator.cpp **** 
 512              		.loc 1 113 18 is_stmt 0
 513 0274 97070000 		sd	a4,.LANCHOR0,a5
 513      23B0E700 
 115:src/MemoryAllocator.cpp ****         }
 514              		.loc 1 115 13 is_stmt 1
 115:src/MemoryAllocator.cpp ****         }
 515              		.loc 1 115 20 is_stmt 0
 516 027c 13050000 		li	a0,0
 517 0280 6FF05FFC 		j	.L22
 518              	.LVL58:
 519              	.L45:
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 520              		.loc 1 107 17 is_stmt 1
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 521              		.loc 1 107 47 is_stmt 0
 522 0284 83B78700 		ld	a5,8(a5)
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 523              		.loc 1 107 38
 524 0288 B385B700 		add	a1,a5,a1
 525              	.LVL59:
 526 028c 2330B500 		sd	a1,0(a0)
 527              	.LVL60:
GAS LISTING /tmp/ccqXNRES.s 			page 16


 108:src/MemoryAllocator.cpp ****             }
 528              		.loc 1 108 17 is_stmt 1
 108:src/MemoryAllocator.cpp ****             }
 529              		.loc 1 108 46 is_stmt 0
 530 0290 97070000 		ld	a5,.LANCHOR0
 530      83B70700 
 531 0298 83B70701 		ld	a5,16(a5)
 108:src/MemoryAllocator.cpp ****             }
 532              		.loc 1 108 38
 533 029c 2334F500 		sd	a5,8(a0)
 534 02a0 6FF05FFD 		j	.L27
 535              	.LVL61:
 536              	.L43:
 537              	.LBE68:
 538              	.LBE67:
 539              	.LBB69:
 540              	.LBB66:
 120:src/MemoryAllocator.cpp ****         }
 541              		.loc 1 120 13 is_stmt 1
 120:src/MemoryAllocator.cpp ****         }
 542              		.loc 1 120 24 is_stmt 0
 543 02a4 B305B800 		add	a1,a6,a1
 544              	.LVL62:
 545 02a8 2334B600 		sd	a1,8(a2)
 546              	.LVL63:
 547 02ac 13070600 		mv	a4,a2
 548              	.LVL64:
 549 02b0 6FF09FF7 		j	.L29
 550              	.LVL65:
 551              	.L44:
 552              	.LBE66:
 132:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 553              		.loc 1 132 13 is_stmt 1
 132:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 554              		.loc 1 132 33 is_stmt 0
 555 02b4 83B68700 		ld	a3,8(a5)
 132:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 556              		.loc 1 132 24
 557 02b8 3306D600 		add	a2,a2,a3
 558 02bc 2334C700 		sd	a2,8(a4)
 133:src/MemoryAllocator.cpp ****         }
 559              		.loc 1 133 13 is_stmt 1
 133:src/MemoryAllocator.cpp ****         }
 560              		.loc 1 133 32 is_stmt 0
 561 02c0 83B70701 		ld	a5,16(a5)
 562              	.LVL66:
 133:src/MemoryAllocator.cpp ****         }
 563              		.loc 1 133 24
 564 02c4 2338F700 		sd	a5,16(a4)
 565              	.LBE69:
 566              	.LBE72:
 137:src/MemoryAllocator.cpp **** }
 567              		.loc 1 137 12
 568 02c8 13050000 		li	a0,0
 569              	.LVL67:
 570              	.LBB73:
 571              	.LBB70:
GAS LISTING /tmp/ccqXNRES.s 			page 17


 572 02cc 6FF09FF7 		j	.L22
 573              	.LVL68:
 574              	.L30:
 575              	.LBE70:
 576              	.LBE73:
  71:src/MemoryAllocator.cpp **** 
 577              		.loc 1 71 92
 578 02d0 1305F0FF 		li	a0,-1
 579              	.LVL69:
 580 02d4 6FF01FF7 		j	.L22
 581              	.LVL70:
 582              	.L31:
 583 02d8 1305F0FF 		li	a0,-1
 584              	.LVL71:
 585 02dc 6FF09FF6 		j	.L22
 586              	.LVL72:
 587              	.L32:
  77:src/MemoryAllocator.cpp ****     }
 588              		.loc 1 77 16
 589 02e0 1305F0FF 		li	a0,-1
 590 02e4 6FF01FF6 		j	.L22
 591              	.L33:
 592 02e8 1305F0FF 		li	a0,-1
 593 02ec 6FF09FF5 		j	.L22
 594              	.L34:
 595 02f0 1305F0FF 		li	a0,-1
 596 02f4 6FF01FF5 		j	.L22
 597              	.L35:
 598 02f8 1305F0FF 		li	a0,-1
 599 02fc 6FF09FF4 		j	.L22
 600              	.LVL73:
 601              	.L37:
 602              	.LBB74:
 603              	.LBB71:
  99:src/MemoryAllocator.cpp ****         }
 604              		.loc 1 99 20
 605 0300 1305F0FF 		li	a0,-1
 606 0304 6FF01FF4 		j	.L22
 607              	.LVL74:
 608              	.L38:
 609              	.LBE71:
 610              	.LBE74:
 137:src/MemoryAllocator.cpp **** }
 611              		.loc 1 137 12
 612 0308 13050000 		li	a0,0
 613              	.LVL75:
 614 030c 6FF09FF3 		j	.L22
 615              		.cfi_endproc
 616              	.LFE10:
 618              		.globl	_ZN15MemoryAllocator4headE
 619              		.bss
 620              		.align	3
 621              		.set	.LANCHOR0,. + 0
 624              	_ZN15MemoryAllocator4headE:
 625 0000 00000000 		.zero	8
 625      00000000 
 626              		.text
GAS LISTING /tmp/ccqXNRES.s 			page 18


 627              	.Letext0:
 628              		.file 3 "src/../h/hw.h"
GAS LISTING /tmp/ccqXNRES.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccqXNRES.s:9      .text:0000000000000000 _ZN15MemoryAllocator9mem_allocEm
     /tmp/ccqXNRES.s:13     .text:0000000000000000 .L0 
     /tmp/ccqXNRES.s:15     .text:0000000000000000 .L0 
     /tmp/ccqXNRES.s:16     .text:0000000000000004 .L0 
     /tmp/ccqXNRES.s:18     .text:0000000000000008 .L0 
     /tmp/ccqXNRES.s:20     .text:000000000000000c .L0 
     /tmp/ccqXNRES.s:22     .text:000000000000000c .L0 
     /tmp/ccqXNRES.s:23     .text:000000000000000c .L0 
     /tmp/ccqXNRES.s:25     .text:0000000000000014 .L0 
     /tmp/ccqXNRES.s:27     .text:0000000000000018 .L0 
     /tmp/ccqXNRES.s:28     .text:0000000000000018 .L0 
     /tmp/ccqXNRES.s:31     .text:0000000000000024 .L0 
     /tmp/ccqXNRES.s:34     .text:0000000000000028 .L0 
     /tmp/ccqXNRES.s:35     .text:0000000000000028 .L0 
     /tmp/ccqXNRES.s:41     .text:000000000000002c .L0 
     /tmp/ccqXNRES.s:42     .text:000000000000002c .L0 
     /tmp/ccqXNRES.s:43     .text:000000000000002c .L0 
     /tmp/ccqXNRES.s:45     .text:0000000000000030 .L0 
     /tmp/ccqXNRES.s:47     .text:0000000000000034 .L0 
     /tmp/ccqXNRES.s:49     .text:0000000000000038 .L0 
     /tmp/ccqXNRES.s:54     .text:000000000000003c .L0 
     /tmp/ccqXNRES.s:55     .text:000000000000003c .L0 
     /tmp/ccqXNRES.s:58     .text:0000000000000044 .L0 
     /tmp/ccqXNRES.s:63     .text:000000000000004c .L0 
     /tmp/ccqXNRES.s:64     .text:000000000000004c .L0 
     /tmp/ccqXNRES.s:68     .text:0000000000000060 .L0 
     /tmp/ccqXNRES.s:69     .text:0000000000000060 .L0 
     /tmp/ccqXNRES.s:71     .text:0000000000000064 .L0 
     /tmp/ccqXNRES.s:72     .text:0000000000000064 .L0 
     /tmp/ccqXNRES.s:77     .text:0000000000000078 .L0 
     /tmp/ccqXNRES.s:79     .text:000000000000007c .L0 
     /tmp/ccqXNRES.s:80     .text:000000000000007c .L0 
     /tmp/ccqXNRES.s:89     .text:0000000000000084 .L0 
     /tmp/ccqXNRES.s:90     .text:0000000000000084 .L0 
     /tmp/ccqXNRES.s:95     .text:0000000000000088 .L0 
     /tmp/ccqXNRES.s:96     .text:0000000000000088 .L0 
     /tmp/ccqXNRES.s:97     .text:0000000000000088 .L0 
     /tmp/ccqXNRES.s:100    .text:000000000000008c .L0 
     /tmp/ccqXNRES.s:103    .text:0000000000000090 .L0 
     /tmp/ccqXNRES.s:104    .text:0000000000000090 .L0 
     /tmp/ccqXNRES.s:105    .text:0000000000000090 .L0 
     /tmp/ccqXNRES.s:108    .text:0000000000000094 .L0 
     /tmp/ccqXNRES.s:113    .text:0000000000000098 .L0 
     /tmp/ccqXNRES.s:119    .text:00000000000000a0 .L0 
     /tmp/ccqXNRES.s:120    .text:00000000000000a0 .L0 
     /tmp/ccqXNRES.s:123    .text:00000000000000a4 .L0 
     /tmp/ccqXNRES.s:125    .text:00000000000000a8 .L0 
     /tmp/ccqXNRES.s:126    .text:00000000000000a8 .L0 
     /tmp/ccqXNRES.s:129    .text:00000000000000b0 .L0 
     /tmp/ccqXNRES.s:135    .text:00000000000000b8 .L0 
     /tmp/ccqXNRES.s:136    .text:00000000000000b8 .L0 
     /tmp/ccqXNRES.s:141    .text:00000000000000cc .L0 
     /tmp/ccqXNRES.s:148    .text:00000000000000d4 .L0 
     /tmp/ccqXNRES.s:149    .text:00000000000000d4 .L0 
     /tmp/ccqXNRES.s:155    .text:00000000000000e0 .L0 
GAS LISTING /tmp/ccqXNRES.s 			page 20


     /tmp/ccqXNRES.s:164    .text:00000000000000e8 .L0 
     /tmp/ccqXNRES.s:165    .text:00000000000000e8 .L0 
     /tmp/ccqXNRES.s:166    .text:00000000000000e8 .L0 
     /tmp/ccqXNRES.s:168    .text:00000000000000ec .L0 
     /tmp/ccqXNRES.s:173    .text:00000000000000f0 .L0 
     /tmp/ccqXNRES.s:174    .text:00000000000000f0 .L0 
     /tmp/ccqXNRES.s:177    .text:00000000000000f4 .L0 
     /tmp/ccqXNRES.s:178    .text:00000000000000f4 .L0 
     /tmp/ccqXNRES.s:180    .text:00000000000000f8 .L0 
     /tmp/ccqXNRES.s:183    .text:00000000000000fc .L0 
     /tmp/ccqXNRES.s:184    .text:00000000000000fc .L0 
     /tmp/ccqXNRES.s:185    .text:00000000000000fc .L0 
     /tmp/ccqXNRES.s:189    .text:0000000000000100 .L0 
     /tmp/ccqXNRES.s:191    .text:0000000000000104 .L0 
     /tmp/ccqXNRES.s:195    .text:0000000000000108 .L0 
     /tmp/ccqXNRES.s:201    .text:000000000000010c .L0 
     /tmp/ccqXNRES.s:202    .text:000000000000010c .L0 
     /tmp/ccqXNRES.s:203    .text:000000000000010c .L0 
     /tmp/ccqXNRES.s:208    .text:0000000000000110 .L0 
     /tmp/ccqXNRES.s:209    .text:0000000000000110 .L0 
     /tmp/ccqXNRES.s:212    .text:0000000000000114 .L0 
     /tmp/ccqXNRES.s:213    .text:0000000000000114 .L0 
     /tmp/ccqXNRES.s:216    .text:0000000000000118 .L0 
     /tmp/ccqXNRES.s:217    .text:0000000000000118 .L0 
     /tmp/ccqXNRES.s:218    .text:0000000000000118 .L0 
     /tmp/ccqXNRES.s:220    .text:000000000000011c .L0 
     /tmp/ccqXNRES.s:221    .text:000000000000011c .L0 
     /tmp/ccqXNRES.s:223    .text:0000000000000120 .L0 
     /tmp/ccqXNRES.s:224    .text:0000000000000120 .L0 
     /tmp/ccqXNRES.s:227    .text:0000000000000124 .L0 
     /tmp/ccqXNRES.s:229    .text:0000000000000128 .L0 
     /tmp/ccqXNRES.s:234    .text:000000000000012c .L0 
     /tmp/ccqXNRES.s:235    .text:000000000000012c .L0 
     /tmp/ccqXNRES.s:236    .text:000000000000012c .L0 
     /tmp/ccqXNRES.s:238    .text:0000000000000130 .L0 
     /tmp/ccqXNRES.s:241    .text:0000000000000134 .L0 
     /tmp/ccqXNRES.s:242    .text:0000000000000134 .L0 
     /tmp/ccqXNRES.s:243    .text:0000000000000134 .L0 
     /tmp/ccqXNRES.s:246    .text:0000000000000138 .L0 
     /tmp/ccqXNRES.s:254    .text:000000000000013c .L0 
     /tmp/ccqXNRES.s:255    .text:000000000000013c .L0 
     /tmp/ccqXNRES.s:256    .text:000000000000013c .L0 
     /tmp/ccqXNRES.s:258    .text:0000000000000140 .L0 
     /tmp/ccqXNRES.s:260    .text:0000000000000144 .L0 
     /tmp/ccqXNRES.s:261    .text:0000000000000144 .L0 
     /tmp/ccqXNRES.s:269    .text:0000000000000148 .L0 
     /tmp/ccqXNRES.s:270    .text:0000000000000148 .L0 
     /tmp/ccqXNRES.s:272    .text:000000000000014c .L0 
     /tmp/ccqXNRES.s:273    .text:000000000000014c .L0 
     /tmp/ccqXNRES.s:280    .text:0000000000000150 .L0 
     /tmp/ccqXNRES.s:281    .text:0000000000000154 .L0 
     /tmp/ccqXNRES.s:282    .text:0000000000000154 .L0 
     /tmp/ccqXNRES.s:283    .text:0000000000000154 .L0 
     /tmp/ccqXNRES.s:285    .text:0000000000000158 .L0 
     /tmp/ccqXNRES.s:289    .text:000000000000015c .L0 
     /tmp/ccqXNRES.s:291    .text:000000000000015c .L0 
     /tmp/ccqXNRES.s:294    .text:0000000000000164 .L0 
GAS LISTING /tmp/ccqXNRES.s 			page 21


     /tmp/ccqXNRES.s:300    .text:0000000000000164 _ZN15MemoryAllocator8mem_freeEPv
     /tmp/ccqXNRES.s:303    .text:0000000000000164 .L0 
     /tmp/ccqXNRES.s:305    .text:0000000000000164 .L0 
     /tmp/ccqXNRES.s:306    .text:0000000000000168 .L0 
     /tmp/ccqXNRES.s:308    .text:000000000000016c .L0 
     /tmp/ccqXNRES.s:310    .text:0000000000000170 .L0 
     /tmp/ccqXNRES.s:312    .text:0000000000000170 .L0 
     /tmp/ccqXNRES.s:314    .text:0000000000000174 .L0 
     /tmp/ccqXNRES.s:316    .text:0000000000000178 .L0 
     /tmp/ccqXNRES.s:319    .text:0000000000000184 .L0 
     /tmp/ccqXNRES.s:321    .text:0000000000000188 .L0 
     /tmp/ccqXNRES.s:322    .text:0000000000000188 .L0 
     /tmp/ccqXNRES.s:325    .text:000000000000018c .L0 
     /tmp/ccqXNRES.s:326    .text:000000000000018c .L0 
     /tmp/ccqXNRES.s:327    .text:000000000000018c .L0 
     /tmp/ccqXNRES.s:330    .text:0000000000000194 .L0 
     /tmp/ccqXNRES.s:333    .text:00000000000001a0 .L0 
     /tmp/ccqXNRES.s:335    .text:00000000000001a4 .L0 
     /tmp/ccqXNRES.s:342    .text:00000000000001a8 .L0 
     /tmp/ccqXNRES.s:343    .text:00000000000001a8 .L0 
     /tmp/ccqXNRES.s:344    .text:00000000000001a8 .L0 
     /tmp/ccqXNRES.s:349    .text:00000000000001ac .L0 
     /tmp/ccqXNRES.s:354    .text:00000000000001b0 .L0 
     /tmp/ccqXNRES.s:356    .text:00000000000001b4 .L0 
     /tmp/ccqXNRES.s:360    .text:00000000000001bc .L0 
     /tmp/ccqXNRES.s:361    .text:00000000000001bc .L0 
     /tmp/ccqXNRES.s:363    .text:00000000000001c4 .L0 
     /tmp/ccqXNRES.s:366    .text:00000000000001c8 .L0 
     /tmp/ccqXNRES.s:370    .text:00000000000001cc .L0 
     /tmp/ccqXNRES.s:371    .text:00000000000001cc .L0 
     /tmp/ccqXNRES.s:373    .text:00000000000001d0 .L0 
     /tmp/ccqXNRES.s:375    .text:00000000000001d4 .L0 
     /tmp/ccqXNRES.s:378    .text:00000000000001d8 .L0 
     /tmp/ccqXNRES.s:379    .text:00000000000001d8 .L0 
     /tmp/ccqXNRES.s:380    .text:00000000000001d8 .L0 
     /tmp/ccqXNRES.s:382    .text:00000000000001dc .L0 
     /tmp/ccqXNRES.s:385    .text:00000000000001e0 .L0 
     /tmp/ccqXNRES.s:391    .text:00000000000001e4 .L0 
     /tmp/ccqXNRES.s:392    .text:00000000000001e4 .L0 
     /tmp/ccqXNRES.s:393    .text:00000000000001e4 .L0 
     /tmp/ccqXNRES.s:395    .text:00000000000001e8 .L0 
     /tmp/ccqXNRES.s:396    .text:00000000000001e8 .L0 
     /tmp/ccqXNRES.s:398    .text:00000000000001ec .L0 
     /tmp/ccqXNRES.s:399    .text:00000000000001ec .L0 
     /tmp/ccqXNRES.s:401    .text:00000000000001f0 .L0 
     /tmp/ccqXNRES.s:402    .text:00000000000001f0 .L0 
     /tmp/ccqXNRES.s:404    .text:00000000000001f8 .L0 
     /tmp/ccqXNRES.s:405    .text:00000000000001f8 .L0 
     /tmp/ccqXNRES.s:413    .text:0000000000000200 .L0 
     /tmp/ccqXNRES.s:417    .text:0000000000000204 .L0 
     /tmp/ccqXNRES.s:418    .text:0000000000000204 .L0 
     /tmp/ccqXNRES.s:420    .text:0000000000000208 .L0 
     /tmp/ccqXNRES.s:422    .text:000000000000020c .L0 
     /tmp/ccqXNRES.s:424    .text:0000000000000210 .L0 
     /tmp/ccqXNRES.s:428    .text:0000000000000214 .L0 
     /tmp/ccqXNRES.s:429    .text:0000000000000214 .L0 
     /tmp/ccqXNRES.s:430    .text:0000000000000214 .L0 
GAS LISTING /tmp/ccqXNRES.s 			page 22


     /tmp/ccqXNRES.s:432    .text:0000000000000218 .L0 
     /tmp/ccqXNRES.s:433    .text:0000000000000218 .L0 
     /tmp/ccqXNRES.s:438    .text:000000000000021c .L0 
     /tmp/ccqXNRES.s:439    .text:000000000000021c .L0 
     /tmp/ccqXNRES.s:440    .text:000000000000021c .L0 
     /tmp/ccqXNRES.s:442    .text:0000000000000220 .L0 
     /tmp/ccqXNRES.s:444    .text:0000000000000224 .L0 
     /tmp/ccqXNRES.s:445    .text:0000000000000224 .L0 
     /tmp/ccqXNRES.s:453    .text:0000000000000228 .L0 
     /tmp/ccqXNRES.s:454    .text:0000000000000228 .L0 
     /tmp/ccqXNRES.s:456    .text:000000000000022c .L0 
     /tmp/ccqXNRES.s:458    .text:0000000000000230 .L0 
     /tmp/ccqXNRES.s:460    .text:0000000000000234 .L0 
     /tmp/ccqXNRES.s:462    .text:0000000000000238 .L0 
     /tmp/ccqXNRES.s:464    .text:000000000000023c .L0 
     /tmp/ccqXNRES.s:468    .text:0000000000000240 .L0 
     /tmp/ccqXNRES.s:472    .text:0000000000000244 .L0 
     /tmp/ccqXNRES.s:473    .text:0000000000000248 .L0 
     /tmp/ccqXNRES.s:474    .text:0000000000000248 .L0 
     /tmp/ccqXNRES.s:475    .text:0000000000000248 .L0 
     /tmp/ccqXNRES.s:477    .text:000000000000024c .L0 
     /tmp/ccqXNRES.s:481    .text:0000000000000250 .L0 
     /tmp/ccqXNRES.s:485    .text:0000000000000250 .L0 
     /tmp/ccqXNRES.s:489    .text:0000000000000254 .L0 
     /tmp/ccqXNRES.s:490    .text:0000000000000254 .L0 
     /tmp/ccqXNRES.s:491    .text:0000000000000254 .L0 
     /tmp/ccqXNRES.s:493    .text:0000000000000258 .L0 
     /tmp/ccqXNRES.s:494    .text:0000000000000258 .L0 
     /tmp/ccqXNRES.s:496    .text:000000000000025c .L0 
     /tmp/ccqXNRES.s:497    .text:000000000000025c .L0 
     /tmp/ccqXNRES.s:500    .text:0000000000000264 .L0 
     /tmp/ccqXNRES.s:503    .text:0000000000000268 .L0 
     /tmp/ccqXNRES.s:505    .text:000000000000026c .L0 
     /tmp/ccqXNRES.s:507    .text:0000000000000270 .L0 
     /tmp/ccqXNRES.s:508    .text:0000000000000270 .L0 
     /tmp/ccqXNRES.s:512    .text:0000000000000274 .L0 
     /tmp/ccqXNRES.s:513    .text:0000000000000274 .L0 
     /tmp/ccqXNRES.s:515    .text:000000000000027c .L0 
     /tmp/ccqXNRES.s:516    .text:000000000000027c .L0 
     /tmp/ccqXNRES.s:521    .text:0000000000000284 .L0 
     /tmp/ccqXNRES.s:522    .text:0000000000000284 .L0 
     /tmp/ccqXNRES.s:524    .text:0000000000000288 .L0 
     /tmp/ccqXNRES.s:529    .text:0000000000000290 .L0 
     /tmp/ccqXNRES.s:530    .text:0000000000000290 .L0 
     /tmp/ccqXNRES.s:533    .text:000000000000029c .L0 
     /tmp/ccqXNRES.s:542    .text:00000000000002a4 .L0 
     /tmp/ccqXNRES.s:543    .text:00000000000002a4 .L0 
     /tmp/ccqXNRES.s:554    .text:00000000000002b4 .L0 
     /tmp/ccqXNRES.s:555    .text:00000000000002b4 .L0 
     /tmp/ccqXNRES.s:557    .text:00000000000002b8 .L0 
     /tmp/ccqXNRES.s:560    .text:00000000000002c0 .L0 
     /tmp/ccqXNRES.s:561    .text:00000000000002c0 .L0 
     /tmp/ccqXNRES.s:564    .text:00000000000002c4 .L0 
     /tmp/ccqXNRES.s:568    .text:00000000000002c8 .L0 
     /tmp/ccqXNRES.s:578    .text:00000000000002d0 .L0 
     /tmp/ccqXNRES.s:589    .text:00000000000002e0 .L0 
     /tmp/ccqXNRES.s:605    .text:0000000000000300 .L0 
GAS LISTING /tmp/ccqXNRES.s 			page 23


     /tmp/ccqXNRES.s:612    .text:0000000000000308 .L0 
     /tmp/ccqXNRES.s:615    .text:0000000000000310 .L0 
     /tmp/ccqXNRES.s:624    .bss:0000000000000000 _ZN15MemoryAllocator4headE
     /tmp/ccqXNRES.s:621    .bss:0000000000000000 .LANCHOR0
     /tmp/ccqXNRES.s:629    .text:0000000000000310 .L0 
     /tmp/ccqXNRES.s:23     .text:000000000000000c .L0 
     /tmp/ccqXNRES.s:28     .text:0000000000000018 .L0 
     /tmp/ccqXNRES.s:55     .text:000000000000003c .L0 
     /tmp/ccqXNRES.s:64     .text:000000000000004c .L0 
     /tmp/ccqXNRES.s:66     .text:0000000000000058 .L0 
     /tmp/ccqXNRES.s:72     .text:0000000000000064 .L0 
     /tmp/ccqXNRES.s:126    .text:00000000000000a8 .L0 
     /tmp/ccqXNRES.s:136    .text:00000000000000b8 .L0 
     /tmp/ccqXNRES.s:138    .text:00000000000000c4 .L0 
     /tmp/ccqXNRES.s:149    .text:00000000000000d4 .L0 
     /tmp/ccqXNRES.s:316    .text:0000000000000178 .L0 
     /tmp/ccqXNRES.s:330    .text:0000000000000194 .L0 
     /tmp/ccqXNRES.s:361    .text:00000000000001bc .L0 
     /tmp/ccqXNRES.s:402    .text:00000000000001f0 .L0 
     /tmp/ccqXNRES.s:497    .text:000000000000025c .L0 
     /tmp/ccqXNRES.s:513    .text:0000000000000274 .L0 
     /tmp/ccqXNRES.s:530    .text:0000000000000290 .L0 
     /tmp/ccqXNRES.s:61     .text:000000000000004c .L16
     /tmp/ccqXNRES.s:288    .text:000000000000015c .L13
     /tmp/ccqXNRES.s:170    .text:00000000000000f0 .L12
     /tmp/ccqXNRES.s:32     .text:0000000000000028 .L3
     /tmp/ccqXNRES.s:117    .text:00000000000000a0 .L17
     /tmp/ccqXNRES.s:152    .text:00000000000000e0 .L14
     /tmp/ccqXNRES.s:263    .text:0000000000000148 .L9
     /tmp/ccqXNRES.s:133    .text:00000000000000b8 .L18
     /tmp/ccqXNRES.s:275    .text:0000000000000150 .L1
     /tmp/ccqXNRES.s:159    .text:00000000000000e8 .L5
     /tmp/ccqXNRES.s:83     .text:0000000000000084 .L19
     /tmp/ccqXNRES.s:145    .text:00000000000000d4 .L20
     /tmp/ccqXNRES.s:248    .text:000000000000013c .L11
     /tmp/ccqXNRES.s:574    .text:00000000000002d0 .L30
     /tmp/ccqXNRES.s:582    .text:00000000000002d8 .L31
     /tmp/ccqXNRES.s:587    .text:00000000000002e0 .L32
     /tmp/ccqXNRES.s:591    .text:00000000000002e8 .L33
     /tmp/ccqXNRES.s:594    .text:00000000000002f0 .L34
     /tmp/ccqXNRES.s:597    .text:00000000000002f8 .L35
     /tmp/ccqXNRES.s:387    .text:00000000000001e4 .L41
     /tmp/ccqXNRES.s:408    .text:0000000000000200 .L24
     /tmp/ccqXNRES.s:367    .text:00000000000001cc .L23
     /tmp/ccqXNRES.s:470    .text:0000000000000244 .L22
     /tmp/ccqXNRES.s:480    .text:0000000000000250 .L42
     /tmp/ccqXNRES.s:536    .text:00000000000002a4 .L43
     /tmp/ccqXNRES.s:608    .text:0000000000000308 .L38
     /tmp/ccqXNRES.s:551    .text:00000000000002b4 .L44
     /tmp/ccqXNRES.s:601    .text:0000000000000300 .L37
     /tmp/ccqXNRES.s:519    .text:0000000000000284 .L45
     /tmp/ccqXNRES.s:510    .text:0000000000000274 .L27
     /tmp/ccqXNRES.s:450    .text:0000000000000228 .L29
     /tmp/ccqXNRES.s:1302   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccqXNRES.s:2687   .debug_str:00000000000001bf .LASF52
     /tmp/ccqXNRES.s:2717   .debug_str:0000000000000375 .LASF53
     /tmp/ccqXNRES.s:2741   .debug_str:000000000000048d .LASF54
GAS LISTING /tmp/ccqXNRES.s 			page 24


     /tmp/ccqXNRES.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccqXNRES.s:627    .text:0000000000000310 .Letext0
     /tmp/ccqXNRES.s:2629   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccqXNRES.s:2699   .debug_str:00000000000002d9 .LASF0
     /tmp/ccqXNRES.s:2677   .debug_str:000000000000016e .LASF1
     /tmp/ccqXNRES.s:2667   .debug_str:000000000000012a .LASF2
     /tmp/ccqXNRES.s:2647   .debug_str:0000000000000073 .LASF4
     /tmp/ccqXNRES.s:2673   .debug_str:0000000000000150 .LASF3
     /tmp/ccqXNRES.s:2637   .debug_str:0000000000000039 .LASF5
     /tmp/ccqXNRES.s:2631   .debug_str:0000000000000000 .LASF6
     /tmp/ccqXNRES.s:2659   .debug_str:00000000000000d8 .LASF7
     /tmp/ccqXNRES.s:2709   .debug_str:000000000000031e .LASF8
     /tmp/ccqXNRES.s:2645   .debug_str:0000000000000065 .LASF9
     /tmp/ccqXNRES.s:2751   .debug_str:00000000000004c9 .LASF10
     /tmp/ccqXNRES.s:2663   .debug_str:00000000000000fa .LASF11
     /tmp/ccqXNRES.s:2737   .debug_str:0000000000000473 .LASF12
     /tmp/ccqXNRES.s:2719   .debug_str:000000000000038d .LASF13
     /tmp/ccqXNRES.s:2679   .debug_str:0000000000000181 .LASF14
     /tmp/ccqXNRES.s:2653   .debug_str:000000000000008d .LASF15
     /tmp/ccqXNRES.s:2713   .debug_str:0000000000000356 .LASF16
     /tmp/ccqXNRES.s:2635   .debug_str:0000000000000029 .LASF30
     /tmp/ccqXNRES.s:2707   .debug_str:0000000000000311 .LASF55
     /tmp/ccqXNRES.s:2743   .debug_str:00000000000004ab .LASF56
     /tmp/ccqXNRES.s:2675   .debug_str:0000000000000162 .LASF20
     /tmp/ccqXNRES.s:2715   .debug_str:000000000000036c .LASF17
     /tmp/ccqXNRES.s:2747   .debug_str:00000000000004bf .LASF18
     /tmp/ccqXNRES.s:2639   .debug_str:0000000000000040 .LASF19
     /tmp/ccqXNRES.s:2683   .debug_str:00000000000001a2 .LASF34
     /tmp/ccqXNRES.s:2725   .debug_str:00000000000003cf .LASF36
     /tmp/ccqXNRES.s:2735   .debug_str:0000000000000445 .LASF57
     /tmp/ccqXNRES.s:2681   .debug_str:000000000000018d .LASF21
     /tmp/ccqXNRES.s:2739   .debug_str:0000000000000483 .LASF22
     /tmp/ccqXNRES.s:2731   .debug_str:0000000000000418 .LASF24
     /tmp/ccqXNRES.s:2721   .debug_str:000000000000039d .LASF23
     /tmp/ccqXNRES.s:2665   .debug_str:0000000000000109 .LASF25
     /tmp/ccqXNRES.s:2729   .debug_str:000000000000040b .LASF26
     /tmp/ccqXNRES.s:2689   .debug_str:0000000000000283 .LASF27
     /tmp/ccqXNRES.s:2669   .debug_str:0000000000000138 .LASF28
     /tmp/ccqXNRES.s:2657   .debug_str:00000000000000b3 .LASF29
     /tmp/ccqXNRES.s:2691   .debug_str:00000000000002a8 .LASF32
     /tmp/ccqXNRES.s:2727   .debug_str:00000000000003fd .LASF58
     /tmp/ccqXNRES.s:2693   .debug_str:00000000000002c1 .LASF59
     /tmp/ccqXNRES.s:2655   .debug_str:00000000000000a3 .LASF31
     /tmp/ccqXNRES.s:2723   .debug_str:00000000000003a6 .LASF33
     /tmp/ccqXNRES.s:2701   .debug_str:00000000000002e6 .LASF35
     /tmp/ccqXNRES.s:2711   .debug_str:000000000000032e .LASF37
     /tmp/ccqXNRES.s:2649   .debug_str:000000000000007a .LASF38
     /tmp/ccqXNRES.s:2641   .debug_str:0000000000000045 .LASF60
     /tmp/ccqXNRES.s:301    .text:0000000000000164 .LFB10
     /tmp/ccqXNRES.s:616    .text:0000000000000310 .LFE10
     /tmp/ccqXNRES.s:2671   .debug_str:0000000000000145 .LASF42
     /tmp/ccqXNRES.s:1937   .debug_loc:0000000000000000 .LLST18
     /tmp/ccqXNRES.s:2013   .debug_loc:000000000000011c .LLST19
     /tmp/ccqXNRES.s:2643   .debug_str:0000000000000060 .LASF39
     /tmp/ccqXNRES.s:2046   .debug_loc:00000000000001b3 .LLST20
     /tmp/ccqXNRES.s:2749   .debug_str:00000000000004c4 .LASF40
     /tmp/ccqXNRES.s:2078   .debug_loc:0000000000000249 .LLST21
GAS LISTING /tmp/ccqXNRES.s 			page 25


     /tmp/ccqXNRES.s:389    .text:00000000000001e4 .LBB58
     /tmp/ccqXNRES.s:409    .text:0000000000000200 .LBE58
     /tmp/ccqXNRES.s:2661   .debug_str:00000000000000eb .LASF41
     /tmp/ccqXNRES.s:2121   .debug_loc:0000000000000317 .LLST24
     /tmp/ccqXNRES.s:486    .text:0000000000000254 .LBB68
     /tmp/ccqXNRES.s:537    .text:00000000000002a4 .LBE68
     /tmp/ccqXNRES.s:2128   .debug_loc:000000000000033a .LLST28
     /tmp/ccqXNRES.s:425    .text:0000000000000214 .LBB63
     /tmp/ccqXNRES.s:451    .text:0000000000000228 .LBE63
     /tmp/ccqXNRES.s:2135   .debug_loc:000000000000035d .LLST25
     /tmp/ccqXNRES.s:436    .text:000000000000021c .LBB64
     /tmp/ccqXNRES.s:448    .text:0000000000000228 .LBE64
     /tmp/ccqXNRES.s:2142   .debug_loc:0000000000000380 .LLST26
     /tmp/ccqXNRES.s:2149   .debug_loc:00000000000003a3 .LLST27
     /tmp/ccqXNRES.s:337    .text:00000000000001a8 .LBB53
     /tmp/ccqXNRES.s:352    .text:00000000000001b0 .LBE53
     /tmp/ccqXNRES.s:2156   .debug_loc:00000000000003c6 .LLST22
     /tmp/ccqXNRES.s:340    .text:00000000000001a8 .LBB55
     /tmp/ccqXNRES.s:347    .text:00000000000001ac .LBE55
     /tmp/ccqXNRES.s:2163   .debug_loc:00000000000003e9 .LLST23
     /tmp/ccqXNRES.s:10     .text:0000000000000000 .LFB9
     /tmp/ccqXNRES.s:295    .text:0000000000000164 .LFE9
     /tmp/ccqXNRES.s:2170   .debug_loc:000000000000040c .LLST0
     /tmp/ccqXNRES.s:2685   .debug_str:00000000000001a9 .LASF43
     /tmp/ccqXNRES.s:2235   .debug_loc:00000000000004ff .LLST1
     /tmp/ccqXNRES.s:2388   .debug_loc:0000000000000659 .LLST2
     /tmp/ccqXNRES.s:2408   .debug_loc:00000000000006b6 .LLST3
     /tmp/ccqXNRES.s:2615   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccqXNRES.s:2705   .debug_str:00000000000002fd .LASF44
     /tmp/ccqXNRES.s:2428   .debug_loc:0000000000000713 .LLST5
     /tmp/ccqXNRES.s:2651   .debug_str:000000000000007f .LASF45
     /tmp/ccqXNRES.s:2463   .debug_loc:000000000000079d .LLST6
     /tmp/ccqXNRES.s:2633   .debug_str:0000000000000013 .LASF46
     /tmp/ccqXNRES.s:2482   .debug_loc:00000000000007f9 .LLST7
     /tmp/ccqXNRES.s:2695   .debug_str:00000000000002c6 .LASF47
     /tmp/ccqXNRES.s:2493   .debug_loc:000000000000082f .LLST10
     /tmp/ccqXNRES.s:2745   .debug_str:00000000000004b7 .LASF48
     /tmp/ccqXNRES.s:2504   .debug_loc:0000000000000865 .LLST11
     /tmp/ccqXNRES.s:2697   .debug_str:00000000000002d2 .LASF49
     /tmp/ccqXNRES.s:2521   .debug_loc:00000000000008b0 .LLST12
     /tmp/ccqXNRES.s:199    .text:000000000000010c .LBB42
     /tmp/ccqXNRES.s:206    .text:0000000000000110 .LBE42
     /tmp/ccqXNRES.s:2532   .debug_loc:00000000000008e6 .LLST13
     /tmp/ccqXNRES.s:232    .text:000000000000012c .LBB44
     /tmp/ccqXNRES.s:250    .text:000000000000013c .LBE44
     /tmp/ccqXNRES.s:2539   .debug_loc:0000000000000909 .LLST14
     /tmp/ccqXNRES.s:2546   .debug_loc:000000000000092c .LLST15
     /tmp/ccqXNRES.s:252    .text:000000000000013c .LBB46
     /tmp/ccqXNRES.s:265    .text:0000000000000148 .LBE46
     /tmp/ccqXNRES.s:2558   .debug_loc:0000000000000963 .LLST16
     /tmp/ccqXNRES.s:2565   .debug_loc:0000000000000986 .LLST17
     /tmp/ccqXNRES.s:93     .text:0000000000000088 .LBB39
     /tmp/ccqXNRES.s:111    .text:0000000000000098 .LBE39
     /tmp/ccqXNRES.s:2572   .debug_loc:00000000000009a9 .LLST8
     /tmp/ccqXNRES.s:2583   .debug_loc:00000000000009df .LLST9
     /tmp/ccqXNRES.s:38     .text:000000000000002c .LBB33
     /tmp/ccqXNRES.s:52     .text:000000000000003c .LBE33
GAS LISTING /tmp/ccqXNRES.s 			page 26


     /tmp/ccqXNRES.s:2595   .debug_loc:0000000000000a16 .LLST4
     /tmp/ccqXNRES.s:2703   .debug_str:00000000000002f5 .LASF50
     /tmp/ccqXNRES.s:2733   .debug_str:0000000000000439 .LASF51
     /tmp/ccqXNRES.s:304    .text:0000000000000164 .LVL39
     /tmp/ccqXNRES.s:323    .text:000000000000018c .LVL40
     /tmp/ccqXNRES.s:446    .text:0000000000000228 .LVL51
     /tmp/ccqXNRES.s:469    .text:0000000000000244 .LVL52
     /tmp/ccqXNRES.s:479    .text:0000000000000250 .LVL53
     /tmp/ccqXNRES.s:548    .text:00000000000002b0 .LVL64
     /tmp/ccqXNRES.s:569    .text:00000000000002cc .LVL67
     /tmp/ccqXNRES.s:573    .text:00000000000002d0 .LVL68
     /tmp/ccqXNRES.s:579    .text:00000000000002d4 .LVL69
     /tmp/ccqXNRES.s:581    .text:00000000000002d8 .LVL70
     /tmp/ccqXNRES.s:584    .text:00000000000002dc .LVL71
     /tmp/ccqXNRES.s:586    .text:00000000000002e0 .LVL72
     /tmp/ccqXNRES.s:607    .text:0000000000000308 .LVL74
     /tmp/ccqXNRES.s:613    .text:000000000000030c .LVL75
     /tmp/ccqXNRES.s:509    .text:0000000000000274 .LVL57
     /tmp/ccqXNRES.s:518    .text:0000000000000284 .LVL58
     /tmp/ccqXNRES.s:525    .text:000000000000028c .LVL59
     /tmp/ccqXNRES.s:527    .text:0000000000000290 .LVL60
     /tmp/ccqXNRES.s:535    .text:00000000000002a4 .LVL61
     /tmp/ccqXNRES.s:544    .text:00000000000002a8 .LVL62
     /tmp/ccqXNRES.s:546    .text:00000000000002ac .LVL63
     /tmp/ccqXNRES.s:368    .text:00000000000001cc .LVL44
     /tmp/ccqXNRES.s:377    .text:00000000000001d8 .LVL45
     /tmp/ccqXNRES.s:383    .text:00000000000001e0 .LVL46
     /tmp/ccqXNRES.s:386    .text:00000000000001e4 .LVL47
     /tmp/ccqXNRES.s:407    .text:0000000000000200 .LVL48
     /tmp/ccqXNRES.s:498    .text:0000000000000264 .LVL55
     /tmp/ccqXNRES.s:562    .text:00000000000002c4 .LVL66
     /tmp/ccqXNRES.s:600    .text:0000000000000300 .LVL73
     /tmp/ccqXNRES.s:501    .text:0000000000000268 .LVL56
     /tmp/ccqXNRES.s:550    .text:00000000000002b4 .LVL65
     /tmp/ccqXNRES.s:488    .text:0000000000000254 .LVL54
     /tmp/ccqXNRES.s:427    .text:0000000000000214 .LVL49
     /tmp/ccqXNRES.s:435    .text:000000000000021c .LVL50
     /tmp/ccqXNRES.s:336    .text:00000000000001a8 .LVL41
     /tmp/ccqXNRES.s:350    .text:00000000000001b0 .LVL43
     /tmp/ccqXNRES.s:345    .text:00000000000001ac .LVL42
     /tmp/ccqXNRES.s:14     .text:0000000000000000 .LVL0
     /tmp/ccqXNRES.s:36     .text:000000000000002c .LVL1
     /tmp/ccqXNRES.s:60     .text:000000000000004c .LVL4
     /tmp/ccqXNRES.s:82     .text:0000000000000084 .LVL5
     /tmp/ccqXNRES.s:98     .text:000000000000008c .LVL7
     /tmp/ccqXNRES.s:116    .text:00000000000000a0 .LVL12
     /tmp/ccqXNRES.s:121    .text:00000000000000a4 .LVL13
     /tmp/ccqXNRES.s:158    .text:00000000000000e8 .LVL22
     /tmp/ccqXNRES.s:210    .text:0000000000000114 .LVL28
     /tmp/ccqXNRES.s:274    .text:0000000000000150 .LVL36
     /tmp/ccqXNRES.s:287    .text:000000000000015c .LVL37
     /tmp/ccqXNRES.s:292    .text:0000000000000160 .LVL38
     /tmp/ccqXNRES.s:50     .text:000000000000003c .LVL2
     /tmp/ccqXNRES.s:114    .text:000000000000009c .LVL11
     /tmp/ccqXNRES.s:130    .text:00000000000000b4 .LVL15
     /tmp/ccqXNRES.s:132    .text:00000000000000b8 .LVL16
     /tmp/ccqXNRES.s:142    .text:00000000000000d0 .LVL18
GAS LISTING /tmp/ccqXNRES.s 			page 27


     /tmp/ccqXNRES.s:151    .text:00000000000000e0 .LVL20
     /tmp/ccqXNRES.s:156    .text:00000000000000e4 .LVL21
     /tmp/ccqXNRES.s:204    .text:0000000000000110 .LVL27
     /tmp/ccqXNRES.s:56     .text:0000000000000044 .LVL3
     /tmp/ccqXNRES.s:169    .text:00000000000000f0 .LVL23
     /tmp/ccqXNRES.s:127    .text:00000000000000b0 .LVL14
     /tmp/ccqXNRES.s:139    .text:00000000000000cc .LVL17
     /tmp/ccqXNRES.s:144    .text:00000000000000d4 .LVL19
     /tmp/ccqXNRES.s:181    .text:00000000000000fc .LVL24
     /tmp/ccqXNRES.s:262    .text:0000000000000148 .LVL35
     /tmp/ccqXNRES.s:186    .text:0000000000000100 .LVL25
     /tmp/ccqXNRES.s:214    .text:0000000000000118 .LVL29
     /tmp/ccqXNRES.s:225    .text:0000000000000124 .LVL30
     /tmp/ccqXNRES.s:247    .text:000000000000013c .LVL34
     /tmp/ccqXNRES.s:198    .text:000000000000010c .LVL26
     /tmp/ccqXNRES.s:231    .text:000000000000012c .LVL31
     /tmp/ccqXNRES.s:240    .text:0000000000000134 .LVL32
     /tmp/ccqXNRES.s:244    .text:0000000000000138 .LVL33
     /tmp/ccqXNRES.s:92     .text:0000000000000088 .LVL6
     /tmp/ccqXNRES.s:102    .text:0000000000000090 .LVL8
     /tmp/ccqXNRES.s:106    .text:0000000000000094 .LVL9
     /tmp/ccqXNRES.s:109    .text:0000000000000098 .LVL10
     /tmp/ccqXNRES.s:630    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccqXNRES.s:84     .text:0000000000000084 .LBB35
     /tmp/ccqXNRES.s:171    .text:00000000000000f0 .LBE35
     /tmp/ccqXNRES.s:175    .text:00000000000000f4 .LBB52
     /tmp/ccqXNRES.s:278    .text:0000000000000150 .LBE52
     /tmp/ccqXNRES.s:146    .text:00000000000000d4 .LBB41
     /tmp/ccqXNRES.s:153    .text:00000000000000e0 .LBE41
     /tmp/ccqXNRES.s:196    .text:000000000000010c .LBB48
     /tmp/ccqXNRES.s:266    .text:0000000000000148 .LBE48

UNDEFINED SYMBOLS
HEAP_END_ADDR
HEAP_START_ADDR

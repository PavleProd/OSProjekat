GAS LISTING /tmp/ccivhpoy.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator9mem_allocEm
   9              	_ZN15MemoryAllocator9mem_allocEm:
  10              	.LFB11:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.h"
   2:src/MemoryAllocator.cpp **** 
   3:src/MemoryAllocator.cpp **** MemoryAllocator::FreeSegment* MemoryAllocator::head = nullptr;
   4:src/MemoryAllocator.cpp **** void *MemoryAllocator::mem_alloc(size_t size) {
  12              		.loc 1 4 47
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
   5:src/MemoryAllocator.cpp ****     if(head == nullptr) { // ako prvi put alociramo memoriju, alociracemo head na pocetak mem segme
  21              		.loc 1 5 5
  22              		.loc 1 5 13 is_stmt 0
  23 000c 97070000 		ld	a5,.LANCHOR0
  23      83B70700 
  24              		.loc 1 5 5
  25 0014 638C0702 		beqz	a5,.L16
   6:src/MemoryAllocator.cpp ****         head = (FreeSegment*)userHeapStartAddr();
   7:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)((char*)userHeapStartAddr() + (size_t)(1<<24));
   8:src/MemoryAllocator.cpp ****         head->size = ((size_t)userHeapEndAddr() - (size_t)userHeapStartAddr()); // HEAP_END_ADDR je
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  10:src/MemoryAllocator.cpp ****     }
  11:src/MemoryAllocator.cpp ****     else if(head == (FreeSegment*)userHeapEndAddr()) { // ako ne postoji slobodan prostor
  26              		.loc 1 11 10 is_stmt 1
  27              	.LBB57:
  28              	.LBB58:
  29              		.file 2 "src/../h/MemoryAllocator.h"
   1:src/../h/MemoryAllocator.h **** #ifndef PROJECT_BASE_MEMORYALLOCATOR_H
   2:src/../h/MemoryAllocator.h **** #define PROJECT_BASE_MEMORYALLOCATOR_H
   3:src/../h/MemoryAllocator.h **** 
   4:src/../h/MemoryAllocator.h **** #include "hw.h"
   5:src/../h/MemoryAllocator.h **** 
   6:src/../h/MemoryAllocator.h **** class MemoryAllocator {
   7:src/../h/MemoryAllocator.h **** public:
   8:src/../h/MemoryAllocator.h ****     /*
   9:src/../h/MemoryAllocator.h ****     Alocira (najmanje) size bajtova memorije, zaokruženo i poravnato na blokove veličine MEM_BLOC
  10:src/../h/MemoryAllocator.h ****     Svaki alocirani segment ima zaglavlje sa velicinom tog segmenta(vraca se adresa nakon tog zagla
  11:src/../h/MemoryAllocator.h **** 
  12:src/../h/MemoryAllocator.h ****     Vraća:
  13:src/../h/MemoryAllocator.h ****     pokazivač na alocirani deo memorije u slučaju uspeha, nullptr u slučaju neuspeha
  14:src/../h/MemoryAllocator.h **** 
  15:src/../h/MemoryAllocator.h ****     Radi se po algoritmu first fit(alociramo prvi segment koji je >= size). Ako je preostao prostor
  16:src/../h/MemoryAllocator.h ****     jednog bloka, taj preostali prostor se pridruzuje ovom koji smo sad alocirali(jer nema poente d
  17:src/../h/MemoryAllocator.h ****     */
GAS LISTING /tmp/ccivhpoy.s 			page 2


  18:src/../h/MemoryAllocator.h ****     static void* mem_alloc(size_t size);
  19:src/../h/MemoryAllocator.h ****     /*
  20:src/../h/MemoryAllocator.h ****     Oslobađa prostor prethodno zauzet pomoću mem_alloc.
  21:src/../h/MemoryAllocator.h ****     Vraća 0 u slučaju uspeha, BAD_POINTER  flag ako je dostavljen los pokazivac.
  22:src/../h/MemoryAllocator.h ****     Ako je moguce, spaja dva susedna slobodna segmenta u jedan veci
  23:src/../h/MemoryAllocator.h ****     */
  24:src/../h/MemoryAllocator.h ****     static int mem_free(void* memSegment);
  25:src/../h/MemoryAllocator.h **** 
  26:src/../h/MemoryAllocator.h ****     enum memFreeFlags {
  27:src/../h/MemoryAllocator.h ****         BAD_POINTER = -1 // nije koriscen pokazviac iz mem_alloc
  28:src/../h/MemoryAllocator.h ****     };
  29:src/../h/MemoryAllocator.h **** 
  30:src/../h/MemoryAllocator.h ****     // Vraca minimalan potreban broj blokova za alokaciju memorije velicine size bajtova
  31:src/../h/MemoryAllocator.h ****     static inline size_t sizeInBlocks(size_t size) {
  32:src/../h/MemoryAllocator.h ****         return (size / MEM_BLOCK_SIZE) + (size % MEM_BLOCK_SIZE > 0);
  33:src/../h/MemoryAllocator.h ****     }
  34:src/../h/MemoryAllocator.h **** 
  35:src/../h/MemoryAllocator.h ****     // Vraca velicinu numOfBlocks blokova u bajtovima
  36:src/../h/MemoryAllocator.h ****     static inline size_t blocksInSize(size_t numOfBlocks) {
  37:src/../h/MemoryAllocator.h ****         return numOfBlocks * MEM_BLOCK_SIZE;
  38:src/../h/MemoryAllocator.h ****     }
  39:src/../h/MemoryAllocator.h **** 
  40:src/../h/MemoryAllocator.h **** private:
  41:src/../h/MemoryAllocator.h ****     MemoryAllocator() {} // da bi se zabranilo pravljenje objekata
  42:src/../h/MemoryAllocator.h **** 
  43:src/../h/MemoryAllocator.h ****     struct FreeSegment { // Jednostruko ulancana lista slobodnih segmenata
  44:src/../h/MemoryAllocator.h ****         void* baseAddr; // pocetna adresa u segmentu
  45:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta
  46:src/../h/MemoryAllocator.h ****         FreeSegment* next; // sledeci element u ulancanoj listi
  47:src/../h/MemoryAllocator.h **** 
  48:src/../h/MemoryAllocator.h ****         // brise element iz ulancane liste koji se nalazi posle elementa prev
  49:src/../h/MemoryAllocator.h ****         static void remove(FreeSegment* prev) {
  50:src/../h/MemoryAllocator.h ****             if(!prev->next) return;
  51:src/../h/MemoryAllocator.h **** 
  52:src/../h/MemoryAllocator.h ****             FreeSegment* curr = prev->next;
  53:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
  54:src/../h/MemoryAllocator.h ****         }
  55:src/../h/MemoryAllocator.h **** 
  56:src/../h/MemoryAllocator.h ****         // dodaje element curr u ulancanu listu nakon elementa prev(samo menja prev->next curr->nex
  57:src/../h/MemoryAllocator.h ****         static void add(FreeSegment* prev, FreeSegment* curr) {
  58:src/../h/MemoryAllocator.h ****             curr->next = prev->next;
  59:src/../h/MemoryAllocator.h ****             prev->next = curr;
  60:src/../h/MemoryAllocator.h ****         }
  61:src/../h/MemoryAllocator.h ****     };
  62:src/../h/MemoryAllocator.h **** 
  63:src/../h/MemoryAllocator.h ****     struct AllocatedSpaceHeader { // Zaglavlje zauzetog segmenta
  64:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta(ukljucujuci i zaglavlje)
  65:src/../h/MemoryAllocator.h ****     };
  66:src/../h/MemoryAllocator.h **** 
  67:src/../h/MemoryAllocator.h ****     static const size_t SegmentOffset = sizeof(AllocatedSpaceHeader);
  68:src/../h/MemoryAllocator.h **** 
  69:src/../h/MemoryAllocator.h ****     static FreeSegment* head; // pocetak ulancane liste slobodnih segmenata
  70:src/../h/MemoryAllocator.h **** 
  71:src/../h/MemoryAllocator.h ****     // vraca relativnu adresu u odnosu na pocetak HEAP-a
  72:src/../h/MemoryAllocator.h ****     static inline size_t relativeAddress(void* address) {
  73:src/../h/MemoryAllocator.h ****         return (size_t)address - (size_t)userHeapStartAddr();
  74:src/../h/MemoryAllocator.h ****     }
GAS LISTING /tmp/ccivhpoy.s 			page 3


  75:src/../h/MemoryAllocator.h **** 
  76:src/../h/MemoryAllocator.h ****     // vraca true ako je adresa pocetak bloka(relativno u odnosu na pocetak heap-a)
  77:src/../h/MemoryAllocator.h ****     static inline bool isStartOfBlock(void* address) {
  78:src/../h/MemoryAllocator.h ****         return relativeAddress(address) % MEM_BLOCK_SIZE == 0;
  79:src/../h/MemoryAllocator.h ****     }
  80:src/../h/MemoryAllocator.h **** 
  81:src/../h/MemoryAllocator.h ****     static void* userHeapStartAddr() {
  82:src/../h/MemoryAllocator.h ****         return (void*)((char*)HEAP_START_ADDR + (1<<24));
  83:src/../h/MemoryAllocator.h ****     }
  84:src/../h/MemoryAllocator.h **** 
  85:src/../h/MemoryAllocator.h ****     static void* userHeapEndAddr() {
  86:src/../h/MemoryAllocator.h ****         return (void*)HEAP_END_ADDR;
  30              		.loc 2 86 9
  31              		.loc 2 86 23 is_stmt 0
  32 0018 17070000 		la	a4,HEAP_END_ADDR
  32      03370700 
  33 0020 03370700 		ld	a4,0(a4)
  34              	.LBE58:
  35              	.LBE57:
  36              		.loc 1 11 10
  37 0024 6382E714 		beq	a5,a4,.L13
  38              	.L3:
  12:src/MemoryAllocator.cpp ****         return nullptr;
  13:src/MemoryAllocator.cpp ****     }
  14:src/MemoryAllocator.cpp **** 
  15:src/MemoryAllocator.cpp ****     size += SegmentOffset; // dodajemo zaglavlje
  39              		.loc 1 15 5 is_stmt 1
  40              		.loc 1 15 10 is_stmt 0
  41 0028 13078500 		addi	a4,a0,8
  42              	.LVL1:
  16:src/MemoryAllocator.cpp ****     size_t numOfBlocksToAllocate = sizeInBlocks(size);
  43              		.loc 1 16 5 is_stmt 1
  44              	.LBB59:
  45              	.LBB60:
  32:src/../h/MemoryAllocator.h ****     }
  46              		.loc 2 32 9
  32:src/../h/MemoryAllocator.h ****     }
  47              		.loc 2 32 22 is_stmt 0
  48 002c 13586700 		srli	a6,a4,6
  32:src/../h/MemoryAllocator.h ****     }
  49              		.loc 2 32 48
  50 0030 9377F703 		andi	a5,a4,63
  32:src/../h/MemoryAllocator.h ****     }
  51              		.loc 2 32 65
  52 0034 B337F000 		snez	a5,a5
  32:src/../h/MemoryAllocator.h ****     }
  53              		.loc 2 32 68
  54 0038 3308F800 		add	a6,a6,a5
  55              	.LVL2:
  56              	.LBE60:
  57              	.LBE59:
  17:src/MemoryAllocator.cpp **** 
  18:src/MemoryAllocator.cpp ****     FreeSegment *curr = head, *prev = nullptr;
  58              		.loc 1 18 5 is_stmt 1
  59              		.loc 1 18 18 is_stmt 0
  60 003c 17050000 		ld	a0,.LANCHOR0
  60      03350500 
GAS LISTING /tmp/ccivhpoy.s 			page 4


  61              	.LVL3:
  62              		.loc 1 18 32
  63 0044 13060000 		li	a2,0
  64 0048 6F00400B 		j	.L12
  65              	.LVL4:
  66              	.L16:
   6:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)((char*)userHeapStartAddr() + (size_t)(1<<24));
  67              		.loc 1 6 9 is_stmt 1
  68              	.LBB61:
  69              	.LBB62:
  82:src/../h/MemoryAllocator.h ****     }
  70              		.loc 2 82 9
  82:src/../h/MemoryAllocator.h ****     }
  71              		.loc 2 82 16 is_stmt 0
  72 004c 97070000 		la	a5,HEAP_START_ADDR
  72      83B70700 
  73 0054 03B70700 		ld	a4,0(a5)
  82:src/../h/MemoryAllocator.h ****     }
  74              		.loc 2 82 56
  75 0058 B7070001 		li	a5,16777216
  76 005c B307F700 		add	a5,a4,a5
  77              	.LBE62:
  78              	.LBE61:
   6:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)((char*)userHeapStartAddr() + (size_t)(1<<24));
  79              		.loc 1 6 14
  80 0060 97060000 		sd	a5,.LANCHOR0,a3
  80      23B0F600 
   7:src/MemoryAllocator.cpp ****         head->size = ((size_t)userHeapEndAddr() - (size_t)userHeapStartAddr()); // HEAP_END_ADDR je
  81              		.loc 1 7 9 is_stmt 1
  82:src/../h/MemoryAllocator.h ****     }
  82              		.loc 2 82 9
   7:src/MemoryAllocator.cpp ****         head->size = ((size_t)userHeapEndAddr() - (size_t)userHeapStartAddr()); // HEAP_END_ADDR je
  83              		.loc 1 7 26 is_stmt 0
  84 0068 B7060002 		li	a3,33554432
  85 006c 3307D700 		add	a4,a4,a3
   7:src/MemoryAllocator.cpp ****         head->size = ((size_t)userHeapEndAddr() - (size_t)userHeapStartAddr()); // HEAP_END_ADDR je
  86              		.loc 1 7 24
  87 0070 23B0E700 		sd	a4,0(a5)
   8:src/MemoryAllocator.cpp ****         head->next = nullptr;
  88              		.loc 1 8 9 is_stmt 1
  89              	.LBB63:
  90              	.LBB64:
  91              		.loc 2 86 9
  92              		.loc 2 86 23 is_stmt 0
  93 0074 17070000 		la	a4,HEAP_END_ADDR
  93      03370700 
  94 007c 03370700 		ld	a4,0(a4)
  95              	.LBE64:
  96              	.LBE63:
  82:src/../h/MemoryAllocator.h ****     }
  97              		.loc 2 82 9 is_stmt 1
   8:src/MemoryAllocator.cpp ****         head->next = nullptr;
  98              		.loc 1 8 49 is_stmt 0
  99 0080 3307F740 		sub	a4,a4,a5
   8:src/MemoryAllocator.cpp ****         head->next = nullptr;
 100              		.loc 1 8 20
 101 0084 23B4E700 		sd	a4,8(a5)
GAS LISTING /tmp/ccivhpoy.s 			page 5


   9:src/MemoryAllocator.cpp ****     }
 102              		.loc 1 9 9 is_stmt 1
   9:src/MemoryAllocator.cpp ****     }
 103              		.loc 1 9 20 is_stmt 0
 104 0088 23B80700 		sd	zero,16(a5)
 105 008c 6FF0DFF9 		j	.L3
 106              	.LVL5:
 107              	.L19:
 108              	.LBB65:
 109              	.LBB66:
 110              	.LBB67:
 111              	.LBB68:
  19:src/MemoryAllocator.cpp ****     while(curr) {
  20:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = (curr->size/MEM_BLOCK_SIZE); // zaokruzujemo da donji ceo deo
  21:src/MemoryAllocator.cpp ****         size_t allocatedSize;
  22:src/MemoryAllocator.cpp ****         void* startOfAllocatedSpace = curr->baseAddr;
  23:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
  24:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
  25:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
 112              		.loc 1 25 17 is_stmt 1
  26:src/MemoryAllocator.cpp **** 
  27:src/MemoryAllocator.cpp ****                 if(prev == nullptr) { // ako smo na head pokazivacu
 113              		.loc 1 27 17
 114 0090 630E0600 		beqz	a2,.L17
  28:src/MemoryAllocator.cpp ****                     if(curr->next == nullptr) { // ako ne postoji slobodan prostor nakon alokacije
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)userHeapEndAddr();
  30:src/MemoryAllocator.cpp ****                     }
  31:src/MemoryAllocator.cpp ****                     else {
  32:src/MemoryAllocator.cpp ****                         head = curr->next;
  33:src/MemoryAllocator.cpp ****                     }
  34:src/MemoryAllocator.cpp ****                 }
  35:src/MemoryAllocator.cpp ****                 else {
  36:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
 115              		.loc 1 36 21
 116              	.LVL6:
 117              	.LBB69:
 118              	.LBB70:
  50:src/../h/MemoryAllocator.h **** 
 119              		.loc 2 50 13
  50:src/../h/MemoryAllocator.h **** 
 120              		.loc 2 50 23 is_stmt 0
 121 0094 03370601 		ld	a4,16(a2)
 122              	.LVL7:
  50:src/../h/MemoryAllocator.h **** 
 123              		.loc 2 50 13
 124 0098 630A0704 		beqz	a4,.L14
  52:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 125              		.loc 2 52 13 is_stmt 1
 126              	.LVL8:
  53:src/../h/MemoryAllocator.h ****         }
 127              		.loc 2 53 13
  53:src/../h/MemoryAllocator.h ****         }
 128              		.loc 2 53 32 is_stmt 0
 129 009c 03370701 		ld	a4,16(a4)
 130              	.LVL9:
  53:src/../h/MemoryAllocator.h ****         }
 131              		.loc 2 53 24
GAS LISTING /tmp/ccivhpoy.s 			page 6


 132 00a0 2338E600 		sd	a4,16(a2)
 133              	.LVL10:
 134              	.LBE70:
 135              	.LBE69:
  25:src/MemoryAllocator.cpp **** 
 136              		.loc 1 25 31
 137 00a4 13880700 		mv	a6,a5
 138              	.LVL11:
 139 00a8 6F00C00A 		j	.L9
 140              	.LVL12:
 141              	.L17:
  28:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)userHeapEndAddr();
 142              		.loc 1 28 21 is_stmt 1
  28:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)userHeapEndAddr();
 143              		.loc 1 28 30 is_stmt 0
 144 00ac 03370501 		ld	a4,16(a0)
 145              	.LVL13:
  28:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)userHeapEndAddr();
 146              		.loc 1 28 21
 147 00b0 630A0700 		beqz	a4,.L18
  32:src/MemoryAllocator.cpp ****                     }
 148              		.loc 1 32 25 is_stmt 1
  32:src/MemoryAllocator.cpp ****                     }
 149              		.loc 1 32 30 is_stmt 0
 150 00b4 97060000 		sd	a4,.LANCHOR0,a3
 150      23B0E600 
 151              	.LVL14:
  25:src/MemoryAllocator.cpp **** 
 152              		.loc 1 25 31
 153 00bc 13880700 		mv	a6,a5
 154              	.LVL15:
 155 00c0 6F004009 		j	.L9
 156              	.LVL16:
 157              	.L18:
  29:src/MemoryAllocator.cpp ****                     }
 158              		.loc 1 29 25 is_stmt 1
 159              	.LBB71:
 160              	.LBB72:
 161              		.loc 2 86 9
 162              		.loc 2 86 23 is_stmt 0
 163 00c4 17070000 		la	a4,HEAP_END_ADDR
 163      03370700 
 164 00cc 03370700 		ld	a4,0(a4)
 165              	.LBE72:
 166              	.LBE71:
  29:src/MemoryAllocator.cpp ****                     }
 167              		.loc 1 29 30
 168 00d0 97060000 		sd	a4,.LANCHOR0,a3
 168      23B0E600 
 169              	.LVL17:
  25:src/MemoryAllocator.cpp **** 
 170              		.loc 1 25 31
 171 00d8 13880700 		mv	a6,a5
 172              	.LVL18:
 173 00dc 6F008007 		j	.L9
 174              	.LVL19:
 175              	.L20:
GAS LISTING /tmp/ccivhpoy.s 			page 7


 176              	.LBB73:
  37:src/MemoryAllocator.cpp ****                 }
  38:src/MemoryAllocator.cpp ****             }
  39:src/MemoryAllocator.cpp ****             else {
  40:src/MemoryAllocator.cpp ****                 allocatedSize = blocksInSize(numOfBlocksToAllocate);
  41:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
  42:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
  43:src/MemoryAllocator.cpp **** 
  44:src/MemoryAllocator.cpp ****                 FreeSegment* newSeg = (FreeSegment*)newBaseAddr;
  45:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
  46:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
  47:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
  48:src/MemoryAllocator.cpp **** 
  49:src/MemoryAllocator.cpp ****                 if(!prev) {
  50:src/MemoryAllocator.cpp ****                     head = newSeg;
 177              		.loc 1 50 21 is_stmt 1
 178              		.loc 1 50 26 is_stmt 0
 179 00e0 97070000 		sd	a4,.LANCHOR0,a5
 179      23B0E700 
 180 00e8 6F00C006 		j	.L9
 181              	.LVL20:
 182              	.L14:
 183              	.LBE73:
  25:src/MemoryAllocator.cpp **** 
 184              		.loc 1 25 31
 185 00ec 13880700 		mv	a6,a5
 186              	.LVL21:
 187 00f0 6F004006 		j	.L9
 188              	.LVL22:
 189              	.L5:
 190              	.LBE68:
 191              	.LBE67:
 192              	.LBE66:
  51:src/MemoryAllocator.cpp ****                 }
  52:src/MemoryAllocator.cpp ****                 else {
  53:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
  54:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
  55:src/MemoryAllocator.cpp ****                 }
  56:src/MemoryAllocator.cpp ****             }
  57:src/MemoryAllocator.cpp **** 
  58:src/MemoryAllocator.cpp ****             ((AllocatedSpaceHeader*)startOfAllocatedSpace)->size = allocatedSize;
  59:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
  60:src/MemoryAllocator.cpp ****         }
  61:src/MemoryAllocator.cpp **** 
  62:src/MemoryAllocator.cpp ****         prev = curr;
 193              		.loc 1 62 9 is_stmt 1
  63:src/MemoryAllocator.cpp ****         curr = curr->next;
 194              		.loc 1 63 9
  62:src/MemoryAllocator.cpp ****         curr = curr->next;
 195              		.loc 1 62 14 is_stmt 0
 196 00f4 13060500 		mv	a2,a0
 197              		.loc 1 63 14
 198 00f8 03350501 		ld	a0,16(a0)
 199              	.LVL23:
 200              	.L12:
 201              	.LBE65:
  19:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = (curr->size/MEM_BLOCK_SIZE); // zaokruzujemo da donji ceo deo
GAS LISTING /tmp/ccivhpoy.s 			page 8


 202              		.loc 1 19 5 is_stmt 1
  19:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = (curr->size/MEM_BLOCK_SIZE); // zaokruzujemo da donji ceo deo
 203              		.loc 1 19 11
 204 00fc 63000506 		beqz	a0,.L1
 205              	.LBB84:
  20:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 206              		.loc 1 20 9
  20:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 207              		.loc 1 20 45 is_stmt 0
 208 0100 83378500 		ld	a5,8(a0)
  20:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 209              		.loc 1 20 16
 210 0104 93D66700 		srli	a3,a5,6
 211              	.LVL24:
  21:src/MemoryAllocator.cpp ****         void* startOfAllocatedSpace = curr->baseAddr;
 212              		.loc 1 21 9 is_stmt 1
  22:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
 213              		.loc 1 22 9
  22:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
 214              		.loc 1 22 15 is_stmt 0
 215 0108 83350500 		ld	a1,0(a0)
 216              	.LVL25:
  23:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
 217              		.loc 1 23 9 is_stmt 1
 218              	.LBB83:
 219 010c E3E4E7FE 		bltu	a5,a4,.L5
  23:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
 220              		.loc 1 23 31 is_stmt 0 discriminator 1
 221 0110 E3E206FF 		bltu	a3,a6,.L5
 222              	.LBB82:
  24:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
 223              		.loc 1 24 13 is_stmt 1
 224              	.LBB81:
 225 0114 E38E06F7 		beq	a3,a6,.L19
 226              	.LBB80:
  40:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
 227              		.loc 1 40 17
 228              	.LVL26:
 229              	.LBB74:
 230              	.LBB75:
  37:src/../h/MemoryAllocator.h ****     }
 231              		.loc 2 37 9
  37:src/../h/MemoryAllocator.h ****     }
 232              		.loc 2 37 30 is_stmt 0
 233 0118 13186800 		slli	a6,a6,6
 234              	.LVL27:
 235              	.LBE75:
 236              	.LBE74:
  41:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 237              		.loc 1 41 17 is_stmt 1
  41:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 238              		.loc 1 41 23 is_stmt 0
 239 011c 33870501 		add	a4,a1,a6
 240              	.LVL28:
  42:src/MemoryAllocator.cpp **** 
 241              		.loc 1 42 17 is_stmt 1
  42:src/MemoryAllocator.cpp **** 
GAS LISTING /tmp/ccivhpoy.s 			page 9


 242              		.loc 1 42 24 is_stmt 0
 243 0120 B3870741 		sub	a5,a5,a6
 244              	.LVL29:
  44:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
 245              		.loc 1 44 17 is_stmt 1
  45:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 246              		.loc 1 45 17
  45:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 247              		.loc 1 45 34 is_stmt 0
 248 0124 2330E700 		sd	a4,0(a4)
  46:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 249              		.loc 1 46 17 is_stmt 1
  46:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 250              		.loc 1 46 30 is_stmt 0
 251 0128 2334F700 		sd	a5,8(a4)
  47:src/MemoryAllocator.cpp **** 
 252              		.loc 1 47 17 is_stmt 1
  47:src/MemoryAllocator.cpp **** 
 253              		.loc 1 47 38 is_stmt 0
 254 012c 83370501 		ld	a5,16(a0)
 255              	.LVL30:
  47:src/MemoryAllocator.cpp **** 
 256              		.loc 1 47 30
 257 0130 2338F700 		sd	a5,16(a4)
  49:src/MemoryAllocator.cpp ****                     head = newSeg;
 258              		.loc 1 49 17 is_stmt 1
 259 0134 E30606FA 		beqz	a2,.L20
  53:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
 260              		.loc 1 53 21
 261              	.LVL31:
 262              	.LBB76:
 263              	.LBB77:
  50:src/../h/MemoryAllocator.h **** 
 264              		.loc 2 50 13
  50:src/../h/MemoryAllocator.h **** 
 265              		.loc 2 50 23 is_stmt 0
 266 0138 83370601 		ld	a5,16(a2)
  50:src/../h/MemoryAllocator.h **** 
 267              		.loc 2 50 13
 268 013c 63860700 		beqz	a5,.L11
  52:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 269              		.loc 2 52 13 is_stmt 1
 270              	.LVL32:
  53:src/../h/MemoryAllocator.h ****         }
 271              		.loc 2 53 13
  53:src/../h/MemoryAllocator.h ****         }
 272              		.loc 2 53 32 is_stmt 0
 273 0140 83B70701 		ld	a5,16(a5)
 274              	.LVL33:
  53:src/../h/MemoryAllocator.h ****         }
 275              		.loc 2 53 24
 276 0144 2338F600 		sd	a5,16(a2)
 277              	.LVL34:
 278              	.L11:
 279              	.LBE77:
 280              	.LBE76:
  54:src/MemoryAllocator.cpp ****                 }
GAS LISTING /tmp/ccivhpoy.s 			page 10


 281              		.loc 1 54 21 is_stmt 1
 282              	.LBB78:
 283              	.LBB79:
  58:src/../h/MemoryAllocator.h ****             prev->next = curr;
 284              		.loc 2 58 13
  58:src/../h/MemoryAllocator.h ****             prev->next = curr;
 285              		.loc 2 58 32 is_stmt 0
 286 0148 83370601 		ld	a5,16(a2)
  58:src/../h/MemoryAllocator.h ****             prev->next = curr;
 287              		.loc 2 58 24
 288 014c 2338F500 		sd	a5,16(a0)
  59:src/../h/MemoryAllocator.h ****         }
 289              		.loc 2 59 13 is_stmt 1
  59:src/../h/MemoryAllocator.h ****         }
 290              		.loc 2 59 24 is_stmt 0
 291 0150 2338A600 		sd	a0,16(a2)
 292              	.LVL35:
 293              	.L9:
 294              	.LBE79:
 295              	.LBE78:
 296              	.LBE80:
 297              	.LBE81:
  58:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 298              		.loc 1 58 13 is_stmt 1
  58:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 299              		.loc 1 58 66 is_stmt 0
 300 0154 23B00501 		sd	a6,0(a1)
  59:src/MemoryAllocator.cpp ****         }
 301              		.loc 1 59 13 is_stmt 1
  59:src/MemoryAllocator.cpp ****         }
 302              		.loc 1 59 72 is_stmt 0
 303 0158 13858500 		addi	a0,a1,8
 304              	.LVL36:
 305              	.L1:
 306              	.LBE82:
 307              	.LBE83:
 308              	.LBE84:
  64:src/MemoryAllocator.cpp ****     }
  65:src/MemoryAllocator.cpp **** 
  66:src/MemoryAllocator.cpp ****     return nullptr; // ne postoji dovoljan slobodan prostor
  67:src/MemoryAllocator.cpp **** }
 309              		.loc 1 67 1
 310 015c 03348100 		ld	s0,8(sp)
 311              		.cfi_remember_state
 312              		.cfi_restore 8
 313              		.cfi_def_cfa 2, 16
 314 0160 13010101 		addi	sp,sp,16
 315              		.cfi_def_cfa_offset 0
 316 0164 67800000 		jr	ra
 317              	.LVL37:
 318              	.L13:
 319              		.cfi_restore_state
  12:src/MemoryAllocator.cpp ****     }
 320              		.loc 1 12 16
 321 0168 13050000 		li	a0,0
 322              	.LVL38:
 323 016c 6FF01FFF 		j	.L1
GAS LISTING /tmp/ccivhpoy.s 			page 11


 324              		.cfi_endproc
 325              	.LFE11:
 327              		.align	2
 328              		.globl	_ZN15MemoryAllocator8mem_freeEPv
 330              	_ZN15MemoryAllocator8mem_freeEPv:
 331              	.LFB12:
  68:src/MemoryAllocator.cpp **** 
  69:src/MemoryAllocator.cpp **** int MemoryAllocator::mem_free(void *memSegment) {
 332              		.loc 1 69 49 is_stmt 1
 333              		.cfi_startproc
 334              	.LVL39:
 335 0170 130101FF 		addi	sp,sp,-16
 336              		.cfi_def_cfa_offset 16
 337 0174 23348100 		sd	s0,8(sp)
 338              		.cfi_offset 8, -8
 339 0178 13040101 		addi	s0,sp,16
 340              		.cfi_def_cfa 8, 0
  70:src/MemoryAllocator.cpp ****     if(!memSegment || (size_t)memSegment - SegmentOffset < (size_t)userHeapStartAddr()) return BAD_
 341              		.loc 1 70 5
 342              		.loc 1 70 20 is_stmt 0
 343 017c 63040516 		beqz	a0,.L30
 344              		.loc 1 70 42 discriminator 2
 345 0180 130785FF 		addi	a4,a0,-8
 346              	.LBB85:
 347              	.LBB86:
  82:src/../h/MemoryAllocator.h ****     }
 348              		.loc 2 82 9 is_stmt 1 discriminator 2
  82:src/../h/MemoryAllocator.h ****     }
 349              		.loc 2 82 16 is_stmt 0 discriminator 2
 350 0184 97070000 		la	a5,HEAP_START_ADDR
 350      83B70700 
 351 018c 83B70700 		ld	a5,0(a5)
  82:src/../h/MemoryAllocator.h ****     }
 352              		.loc 2 82 56 discriminator 2
 353 0190 B7060001 		li	a3,16777216
 354 0194 B387D700 		add	a5,a5,a3
 355              	.LBE86:
 356              	.LBE85:
 357              		.loc 1 70 20 discriminator 2
 358 0198 636AF714 		bltu	a4,a5,.L31
  71:src/MemoryAllocator.cpp **** 
  72:src/MemoryAllocator.cpp ****     size_t size = *(size_t*)((char*)memSegment - MemoryAllocator::SegmentOffset); // velicina koja 
 359              		.loc 1 72 5 is_stmt 1
 360              		.loc 1 72 12 is_stmt 0
 361 019c 833585FF 		ld	a1,-8(a0)
 362              	.LVL40:
  73:src/MemoryAllocator.cpp ****     memSegment = (void*)((char*)memSegment - MemoryAllocator::SegmentOffset); // pocetak segmenta u
 363              		.loc 1 73 5 is_stmt 1
  74:src/MemoryAllocator.cpp ****     if((char*)memSegment + size - 1 >= (char*)userHeapEndAddr() || memSegment == nullptr
 364              		.loc 1 74 5
 365              		.loc 1 74 33 is_stmt 0
 366 01a0 9386F5FF 		addi	a3,a1,-1
 367 01a4 B306D700 		add	a3,a4,a3
 368              	.LBB87:
 369              	.LBB88:
 370              		.loc 2 86 9 is_stmt 1
 371              		.loc 2 86 23 is_stmt 0
GAS LISTING /tmp/ccivhpoy.s 			page 12


 372 01a8 17060000 		la	a2,HEAP_END_ADDR
 372      03360600 
 373 01b0 03360600 		ld	a2,0(a2)
 374              	.LBE88:
 375              	.LBE87:
  75:src/MemoryAllocator.cpp ****         || !isStartOfBlock(memSegment) || size < MEM_BLOCK_SIZE) {
 376              		.loc 1 75 40
 377 01b4 63F0C614 		bgeu	a3,a2,.L32
  74:src/MemoryAllocator.cpp ****     if((char*)memSegment + size - 1 >= (char*)userHeapEndAddr() || memSegment == nullptr
 378              		.loc 1 74 65
 379 01b8 63020714 		beqz	a4,.L33
 380              	.LVL41:
 381              	.LBB89:
 382              	.LBB90:
  78:src/../h/MemoryAllocator.h ****     }
 383              		.loc 2 78 9 is_stmt 1
 384              	.LBB91:
 385              	.LBB92:
  73:src/../h/MemoryAllocator.h ****     }
 386              		.loc 2 73 9
 387              	.LBE92:
 388              	.LBE91:
 389              	.LBE90:
 390              	.LBE89:
  82:src/../h/MemoryAllocator.h ****     }
 391              		.loc 2 82 9
 392              	.LBB96:
 393              	.LBB95:
 394              	.LBB94:
 395              	.LBB93:
  73:src/../h/MemoryAllocator.h ****     }
 396              		.loc 2 73 60 is_stmt 0
 397 01bc B307F740 		sub	a5,a4,a5
 398              	.LVL42:
 399              	.LBE93:
 400              	.LBE94:
  78:src/../h/MemoryAllocator.h ****     }
 401              		.loc 2 78 41
 402 01c0 93F7F703 		andi	a5,a5,63
 403              	.LVL43:
 404              	.LBE95:
 405              	.LBE96:
 406              		.loc 1 75 9
 407 01c4 63900714 		bnez	a5,.L34
 408              		.loc 1 75 40 discriminator 3
 409 01c8 9307F003 		li	a5,63
 410 01cc 63F0B714 		bleu	a1,a5,.L35
  76:src/MemoryAllocator.cpp ****         return BAD_POINTER;
  77:src/MemoryAllocator.cpp ****     }
  78:src/MemoryAllocator.cpp **** 
  79:src/MemoryAllocator.cpp ****     if(head == (FreeSegment*)userHeapEndAddr()) { // ako je memorija puna onda samo oslobadja dati 
 411              		.loc 1 79 5 is_stmt 1
 412              		.loc 2 86 9
 413              	.LBB97:
 414              		.loc 1 79 13 is_stmt 0
 415 01d0 97070000 		ld	a5,.LANCHOR0
 415      83B70700 
GAS LISTING /tmp/ccivhpoy.s 			page 13


 416              		.loc 1 79 5
 417 01d8 6380C702 		beq	a5,a2,.L41
 418              	.LBE97:
  80:src/MemoryAllocator.cpp ****         FreeSegment* newFreeSegment = (FreeSegment*)memSegment;
  81:src/MemoryAllocator.cpp ****         newFreeSegment->size = size;
  82:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
  83:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
  84:src/MemoryAllocator.cpp **** 
  85:src/MemoryAllocator.cpp ****         head = newFreeSegment;
  86:src/MemoryAllocator.cpp ****         return 0;
  87:src/MemoryAllocator.cpp ****     }
  88:src/MemoryAllocator.cpp **** 
  89:src/MemoryAllocator.cpp ****     FreeSegment* curr = head, *prev = nullptr;
 419              		.loc 1 89 32
 420 01dc 13060000 		li	a2,0
 421              	.L23:
 422              	.LVL44:
  90:src/MemoryAllocator.cpp ****     // Ako nema greske posle while: ((char*)prev->baseAddr + prev->size) <= memSegment < curr->base
  91:src/MemoryAllocator.cpp ****     while(curr != nullptr && (char*)curr->baseAddr < (char*)memSegment) {
 423              		.loc 1 91 5 is_stmt 1
 424              		.loc 1 91 27
 425 01e0 638A0702 		beqz	a5,.L24
 426              		.loc 1 91 43 is_stmt 0 discriminator 1
 427 01e4 83B60700 		ld	a3,0(a5)
 428              		.loc 1 91 27 discriminator 1
 429 01e8 63F6E602 		bgeu	a3,a4,.L24
  92:src/MemoryAllocator.cpp ****         prev = curr;
 430              		.loc 1 92 9 is_stmt 1
 431              	.LVL45:
  93:src/MemoryAllocator.cpp ****         curr = curr->next;
 432              		.loc 1 93 9
  92:src/MemoryAllocator.cpp ****         prev = curr;
 433              		.loc 1 92 14 is_stmt 0
 434 01ec 13860700 		mv	a2,a5
 435              		.loc 1 93 14
 436 01f0 83B70701 		ld	a5,16(a5)
 437              	.LVL46:
  91:src/MemoryAllocator.cpp ****         prev = curr;
 438              		.loc 1 91 5
 439 01f4 6FF0DFFE 		j	.L23
 440              	.LVL47:
 441              	.L41:
 442              	.LBB99:
 443              	.LBB98:
  80:src/MemoryAllocator.cpp ****         newFreeSegment->size = size;
 444              		.loc 1 80 9 is_stmt 1
  81:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
 445              		.loc 1 81 9
  81:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
 446              		.loc 1 81 30 is_stmt 0
 447 01f8 2330B500 		sd	a1,0(a0)
  82:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
 448              		.loc 1 82 9 is_stmt 1
  82:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
 449              		.loc 1 82 34 is_stmt 0
 450 01fc 233CE5FE 		sd	a4,-8(a0)
  83:src/MemoryAllocator.cpp **** 
GAS LISTING /tmp/ccivhpoy.s 			page 14


 451              		.loc 1 83 9 is_stmt 1
  83:src/MemoryAllocator.cpp **** 
 452              		.loc 1 83 30 is_stmt 0
 453 0200 23340500 		sd	zero,8(a0)
  85:src/MemoryAllocator.cpp ****         return 0;
 454              		.loc 1 85 9 is_stmt 1
  85:src/MemoryAllocator.cpp ****         return 0;
 455              		.loc 1 85 14 is_stmt 0
 456 0204 97070000 		sd	a4,.LANCHOR0,a5
 456      23B0E700 
  86:src/MemoryAllocator.cpp ****     }
 457              		.loc 1 86 9 is_stmt 1
  86:src/MemoryAllocator.cpp ****     }
 458              		.loc 1 86 16 is_stmt 0
 459 020c 13050000 		li	a0,0
 460 0210 6F008004 		j	.L22
 461              	.LVL48:
 462              	.L24:
 463              	.LBE98:
 464              	.LBE99:
  94:src/MemoryAllocator.cpp ****     }
  95:src/MemoryAllocator.cpp **** 
  96:src/MemoryAllocator.cpp ****     if(prev == nullptr) {
 465              		.loc 1 96 5 is_stmt 1
 466              	.LBB100:
 467 0214 63080604 		beqz	a2,.L42
 468              	.LBB101:
  97:src/MemoryAllocator.cpp ****         if(curr == nullptr) { // nije se nijednom pozvao mem_alloc
  98:src/MemoryAllocator.cpp ****             return BAD_POINTER;
  99:src/MemoryAllocator.cpp ****         }
 100:src/MemoryAllocator.cpp ****         else {
 101:src/MemoryAllocator.cpp ****             FreeSegment* newFreeSegment = (FreeSegment*)memSegment;
 102:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 103:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 104:src/MemoryAllocator.cpp **** 
 105:src/MemoryAllocator.cpp ****             if((char*)head->baseAddr == ((char*)newFreeSegment->baseAddr + newFreeSegment->size)) {
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 108:src/MemoryAllocator.cpp ****             }
 109:src/MemoryAllocator.cpp ****             else {
 110:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head;
 111:src/MemoryAllocator.cpp ****             }
 112:src/MemoryAllocator.cpp ****             head = newFreeSegment;
 113:src/MemoryAllocator.cpp **** 
 114:src/MemoryAllocator.cpp ****             return 0;
 115:src/MemoryAllocator.cpp ****         }
 116:src/MemoryAllocator.cpp ****     }
 117:src/MemoryAllocator.cpp ****     else {
 118:src/MemoryAllocator.cpp ****         if((char*)prev->baseAddr + prev->size == (char*)memSegment) { // spajamo prethodni i novi s
 469              		.loc 1 118 9
 470              	.LBB102:
 471              		.loc 1 118 25 is_stmt 0
 472 0218 83360600 		ld	a3,0(a2)
 473              		.loc 1 118 42
 474 021c 03388600 		ld	a6,8(a2)
 475              		.loc 1 118 34
 476 0220 B3860601 		add	a3,a3,a6
GAS LISTING /tmp/ccivhpoy.s 			page 15


 477              		.loc 1 118 9
 478 0224 638AE608 		beq	a3,a4,.L43
 479              	.LBB103:
 119:src/MemoryAllocator.cpp ****             prev->size += size;
 120:src/MemoryAllocator.cpp ****         }
 121:src/MemoryAllocator.cpp ****         else {
 122:src/MemoryAllocator.cpp ****             FreeSegment *newFreeSegment = (FreeSegment *) memSegment;
 480              		.loc 1 122 13 is_stmt 1
 481              	.LVL49:
 123:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 482              		.loc 1 123 13
 483              		.loc 1 123 34 is_stmt 0
 484 0228 2330B500 		sd	a1,0(a0)
 124:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 485              		.loc 1 124 13 is_stmt 1
 486              		.loc 1 124 38 is_stmt 0
 487 022c 233CE5FE 		sd	a4,-8(a0)
 125:src/MemoryAllocator.cpp **** 
 126:src/MemoryAllocator.cpp ****             FreeSegment::add(prev, newFreeSegment); // ulancavamo prev i newFreeSegment
 488              		.loc 1 126 13 is_stmt 1
 489              	.LVL50:
 490              	.LBB104:
 491              	.LBB105:
  58:src/../h/MemoryAllocator.h ****             prev->next = curr;
 492              		.loc 2 58 13
  58:src/../h/MemoryAllocator.h ****             prev->next = curr;
 493              		.loc 2 58 32 is_stmt 0
 494 0230 83360601 		ld	a3,16(a2)
  58:src/../h/MemoryAllocator.h ****             prev->next = curr;
 495              		.loc 2 58 24
 496 0234 2334D500 		sd	a3,8(a0)
  59:src/../h/MemoryAllocator.h ****         }
 497              		.loc 2 59 13 is_stmt 1
  59:src/../h/MemoryAllocator.h ****         }
 498              		.loc 2 59 24 is_stmt 0
 499 0238 2338E600 		sd	a4,16(a2)
 500              	.LVL51:
 501              	.LBE105:
 502              	.LBE104:
 127:src/MemoryAllocator.cpp ****             prev = newFreeSegment;
 503              		.loc 1 127 13 is_stmt 1
 504              	.L29:
 505              	.LBE103:
 506              	.LBE102:
 128:src/MemoryAllocator.cpp ****         }
 129:src/MemoryAllocator.cpp **** 
 130:src/MemoryAllocator.cpp ****         if(curr && (char*)curr->baseAddr == ((char*)prev->baseAddr + prev->size)) { // ako postoji 
 507              		.loc 1 130 9
 508 023c 6380070E 		beqz	a5,.L38
 509              		.loc 1 130 33 is_stmt 0 discriminator 1
 510 0240 83B50700 		ld	a1,0(a5)
 511              		.loc 1 130 59 discriminator 1
 512 0244 83360700 		ld	a3,0(a4)
 513              		.loc 1 130 76 discriminator 1
 514 0248 03368700 		ld	a2,8(a4)
 515              		.loc 1 130 68 discriminator 1
 516 024c B386C600 		add	a3,a3,a2
GAS LISTING /tmp/ccivhpoy.s 			page 16


 517              		.loc 1 130 17 discriminator 1
 518 0250 638CD506 		beq	a1,a3,.L44
 519              	.LBE101:
 520              	.LBE100:
 131:src/MemoryAllocator.cpp ****             prev->size += curr->size;
 132:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 133:src/MemoryAllocator.cpp ****         }
 134:src/MemoryAllocator.cpp ****     }
 135:src/MemoryAllocator.cpp **** 
 136:src/MemoryAllocator.cpp ****     return 0;
 521              		.loc 1 136 12
 522 0254 13050000 		li	a0,0
 523              	.LVL52:
 524              	.L22:
 137:src/MemoryAllocator.cpp **** }
 525              		.loc 1 137 1
 526 0258 03348100 		ld	s0,8(sp)
 527              		.cfi_remember_state
 528              		.cfi_restore 8
 529              		.cfi_def_cfa 2, 16
 530 025c 13010101 		addi	sp,sp,16
 531              		.cfi_def_cfa_offset 0
 532 0260 67800000 		jr	ra
 533              	.LVL53:
 534              	.L42:
 535              		.cfi_restore_state
  97:src/MemoryAllocator.cpp ****             return BAD_POINTER;
 536              		.loc 1 97 9 is_stmt 1
 537              	.LBB112:
 538              	.LBB107:
 539 0264 6388070A 		beqz	a5,.L37
 540              	.LBB108:
 101:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 541              		.loc 1 101 13
 542              	.LVL54:
 102:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 543              		.loc 1 102 13
 102:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 544              		.loc 1 102 34 is_stmt 0
 545 0268 2330B500 		sd	a1,0(a0)
 103:src/MemoryAllocator.cpp **** 
 546              		.loc 1 103 13 is_stmt 1
 103:src/MemoryAllocator.cpp **** 
 547              		.loc 1 103 38 is_stmt 0
 548 026c 233CE5FE 		sd	a4,-8(a0)
 105:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 549              		.loc 1 105 13 is_stmt 1
 105:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 550              		.loc 1 105 16 is_stmt 0
 551 0270 97070000 		ld	a5,.LANCHOR0
 551      83B70700 
 552              	.LVL55:
 105:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 553              		.loc 1 105 29
 554 0278 03B60700 		ld	a2,0(a5)
 555              	.LVL56:
 105:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
GAS LISTING /tmp/ccivhpoy.s 			page 17


 556              		.loc 1 105 74
 557 027c B306B700 		add	a3,a4,a1
 105:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 558              		.loc 1 105 13
 559 0280 630CD600 		beq	a2,a3,.L45
 110:src/MemoryAllocator.cpp ****             }
 560              		.loc 1 110 17 is_stmt 1
 110:src/MemoryAllocator.cpp ****             }
 561              		.loc 1 110 38 is_stmt 0
 562 0284 2334F500 		sd	a5,8(a0)
 563              	.LVL57:
 564              	.L27:
 112:src/MemoryAllocator.cpp **** 
 565              		.loc 1 112 13 is_stmt 1
 112:src/MemoryAllocator.cpp **** 
 566              		.loc 1 112 18 is_stmt 0
 567 0288 97070000 		sd	a4,.LANCHOR0,a5
 567      23B0E700 
 114:src/MemoryAllocator.cpp ****         }
 568              		.loc 1 114 13 is_stmt 1
 114:src/MemoryAllocator.cpp ****         }
 569              		.loc 1 114 20 is_stmt 0
 570 0290 13050000 		li	a0,0
 571 0294 6FF05FFC 		j	.L22
 572              	.LVL58:
 573              	.L45:
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 574              		.loc 1 106 17 is_stmt 1
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 575              		.loc 1 106 47 is_stmt 0
 576 0298 83B78700 		ld	a5,8(a5)
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 577              		.loc 1 106 38
 578 029c B385B700 		add	a1,a5,a1
 579              	.LVL59:
 580 02a0 2330B500 		sd	a1,0(a0)
 581              	.LVL60:
 107:src/MemoryAllocator.cpp ****             }
 582              		.loc 1 107 17 is_stmt 1
 107:src/MemoryAllocator.cpp ****             }
 583              		.loc 1 107 46 is_stmt 0
 584 02a4 97070000 		ld	a5,.LANCHOR0
 584      83B70700 
 585 02ac 83B70701 		ld	a5,16(a5)
 107:src/MemoryAllocator.cpp ****             }
 586              		.loc 1 107 38
 587 02b0 2334F500 		sd	a5,8(a0)
 588 02b4 6FF05FFD 		j	.L27
 589              	.LVL61:
 590              	.L43:
 591              	.LBE108:
 592              	.LBE107:
 593              	.LBB109:
 594              	.LBB106:
 119:src/MemoryAllocator.cpp ****         }
 595              		.loc 1 119 13 is_stmt 1
 119:src/MemoryAllocator.cpp ****         }
GAS LISTING /tmp/ccivhpoy.s 			page 18


 596              		.loc 1 119 24 is_stmt 0
 597 02b8 B305B800 		add	a1,a6,a1
 598              	.LVL62:
 599 02bc 2334B600 		sd	a1,8(a2)
 600              	.LVL63:
 601 02c0 13070600 		mv	a4,a2
 602              	.LVL64:
 603 02c4 6FF09FF7 		j	.L29
 604              	.LVL65:
 605              	.L44:
 606              	.LBE106:
 131:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 607              		.loc 1 131 13 is_stmt 1
 131:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 608              		.loc 1 131 33 is_stmt 0
 609 02c8 83B68700 		ld	a3,8(a5)
 131:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 610              		.loc 1 131 24
 611 02cc 3306D600 		add	a2,a2,a3
 612 02d0 2334C700 		sd	a2,8(a4)
 132:src/MemoryAllocator.cpp ****         }
 613              		.loc 1 132 13 is_stmt 1
 132:src/MemoryAllocator.cpp ****         }
 614              		.loc 1 132 32 is_stmt 0
 615 02d4 83B70701 		ld	a5,16(a5)
 616              	.LVL66:
 132:src/MemoryAllocator.cpp ****         }
 617              		.loc 1 132 24
 618 02d8 2338F700 		sd	a5,16(a4)
 619              	.LBE109:
 620              	.LBE112:
 136:src/MemoryAllocator.cpp **** }
 621              		.loc 1 136 12
 622 02dc 13050000 		li	a0,0
 623              	.LVL67:
 624              	.LBB113:
 625              	.LBB110:
 626 02e0 6FF09FF7 		j	.L22
 627              	.LVL68:
 628              	.L30:
 629              	.LBE110:
 630              	.LBE113:
  70:src/MemoryAllocator.cpp **** 
 631              		.loc 1 70 96
 632 02e4 1305F0FF 		li	a0,-1
 633              	.LVL69:
 634 02e8 6FF01FF7 		j	.L22
 635              	.LVL70:
 636              	.L31:
 637 02ec 1305F0FF 		li	a0,-1
 638              	.LVL71:
 639 02f0 6FF09FF6 		j	.L22
 640              	.LVL72:
 641              	.L32:
  76:src/MemoryAllocator.cpp ****     }
 642              		.loc 1 76 16
 643 02f4 1305F0FF 		li	a0,-1
GAS LISTING /tmp/ccivhpoy.s 			page 19


 644 02f8 6FF01FF6 		j	.L22
 645              	.L33:
 646 02fc 1305F0FF 		li	a0,-1
 647 0300 6FF09FF5 		j	.L22
 648              	.L34:
 649 0304 1305F0FF 		li	a0,-1
 650 0308 6FF01FF5 		j	.L22
 651              	.L35:
 652 030c 1305F0FF 		li	a0,-1
 653 0310 6FF09FF4 		j	.L22
 654              	.LVL73:
 655              	.L37:
 656              	.LBB114:
 657              	.LBB111:
  98:src/MemoryAllocator.cpp ****         }
 658              		.loc 1 98 20
 659 0314 1305F0FF 		li	a0,-1
 660 0318 6FF01FF4 		j	.L22
 661              	.LVL74:
 662              	.L38:
 663              	.LBE111:
 664              	.LBE114:
 136:src/MemoryAllocator.cpp **** }
 665              		.loc 1 136 12
 666 031c 13050000 		li	a0,0
 667              	.LVL75:
 668 0320 6FF09FF3 		j	.L22
 669              		.cfi_endproc
 670              	.LFE12:
 672              		.globl	_ZN15MemoryAllocator4headE
 673              		.bss
 674              		.align	3
 675              		.set	.LANCHOR0,. + 0
 678              	_ZN15MemoryAllocator4headE:
 679 0000 00000000 		.zero	8
 679      00000000 
 680              		.text
 681              	.Letext0:
 682              		.file 3 "src/../h/hw.h"
GAS LISTING /tmp/ccivhpoy.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccivhpoy.s:9      .text:0000000000000000 _ZN15MemoryAllocator9mem_allocEm
     /tmp/ccivhpoy.s:13     .text:0000000000000000 .L0 
     /tmp/ccivhpoy.s:15     .text:0000000000000000 .L0 
     /tmp/ccivhpoy.s:16     .text:0000000000000004 .L0 
     /tmp/ccivhpoy.s:18     .text:0000000000000008 .L0 
     /tmp/ccivhpoy.s:20     .text:000000000000000c .L0 
     /tmp/ccivhpoy.s:22     .text:000000000000000c .L0 
     /tmp/ccivhpoy.s:23     .text:000000000000000c .L0 
     /tmp/ccivhpoy.s:25     .text:0000000000000014 .L0 
     /tmp/ccivhpoy.s:30     .text:0000000000000018 .L0 
     /tmp/ccivhpoy.s:31     .text:0000000000000018 .L0 
     /tmp/ccivhpoy.s:32     .text:0000000000000018 .L0 
     /tmp/ccivhpoy.s:37     .text:0000000000000024 .L0 
     /tmp/ccivhpoy.s:40     .text:0000000000000028 .L0 
     /tmp/ccivhpoy.s:41     .text:0000000000000028 .L0 
     /tmp/ccivhpoy.s:46     .text:000000000000002c .L0 
     /tmp/ccivhpoy.s:47     .text:000000000000002c .L0 
     /tmp/ccivhpoy.s:48     .text:000000000000002c .L0 
     /tmp/ccivhpoy.s:50     .text:0000000000000030 .L0 
     /tmp/ccivhpoy.s:52     .text:0000000000000034 .L0 
     /tmp/ccivhpoy.s:54     .text:0000000000000038 .L0 
     /tmp/ccivhpoy.s:59     .text:000000000000003c .L0 
     /tmp/ccivhpoy.s:60     .text:000000000000003c .L0 
     /tmp/ccivhpoy.s:63     .text:0000000000000044 .L0 
     /tmp/ccivhpoy.s:70     .text:000000000000004c .L0 
     /tmp/ccivhpoy.s:71     .text:000000000000004c .L0 
     /tmp/ccivhpoy.s:72     .text:000000000000004c .L0 
     /tmp/ccivhpoy.s:75     .text:0000000000000058 .L0 
     /tmp/ccivhpoy.s:80     .text:0000000000000060 .L0 
     /tmp/ccivhpoy.s:82     .text:0000000000000068 .L0 
     /tmp/ccivhpoy.s:83     .text:0000000000000068 .L0 
     /tmp/ccivhpoy.s:84     .text:0000000000000068 .L0 
     /tmp/ccivhpoy.s:87     .text:0000000000000070 .L0 
     /tmp/ccivhpoy.s:91     .text:0000000000000074 .L0 
     /tmp/ccivhpoy.s:92     .text:0000000000000074 .L0 
     /tmp/ccivhpoy.s:93     .text:0000000000000074 .L0 
     /tmp/ccivhpoy.s:98     .text:0000000000000080 .L0 
     /tmp/ccivhpoy.s:99     .text:0000000000000080 .L0 
     /tmp/ccivhpoy.s:101    .text:0000000000000084 .L0 
     /tmp/ccivhpoy.s:103    .text:0000000000000088 .L0 
     /tmp/ccivhpoy.s:104    .text:0000000000000088 .L0 
     /tmp/ccivhpoy.s:113    .text:0000000000000090 .L0 
     /tmp/ccivhpoy.s:114    .text:0000000000000090 .L0 
     /tmp/ccivhpoy.s:119    .text:0000000000000094 .L0 
     /tmp/ccivhpoy.s:120    .text:0000000000000094 .L0 
     /tmp/ccivhpoy.s:121    .text:0000000000000094 .L0 
     /tmp/ccivhpoy.s:124    .text:0000000000000098 .L0 
     /tmp/ccivhpoy.s:127    .text:000000000000009c .L0 
     /tmp/ccivhpoy.s:128    .text:000000000000009c .L0 
     /tmp/ccivhpoy.s:129    .text:000000000000009c .L0 
     /tmp/ccivhpoy.s:132    .text:00000000000000a0 .L0 
     /tmp/ccivhpoy.s:137    .text:00000000000000a4 .L0 
     /tmp/ccivhpoy.s:143    .text:00000000000000ac .L0 
     /tmp/ccivhpoy.s:144    .text:00000000000000ac .L0 
     /tmp/ccivhpoy.s:147    .text:00000000000000b0 .L0 
GAS LISTING /tmp/ccivhpoy.s 			page 21


     /tmp/ccivhpoy.s:149    .text:00000000000000b4 .L0 
     /tmp/ccivhpoy.s:150    .text:00000000000000b4 .L0 
     /tmp/ccivhpoy.s:153    .text:00000000000000bc .L0 
     /tmp/ccivhpoy.s:161    .text:00000000000000c4 .L0 
     /tmp/ccivhpoy.s:162    .text:00000000000000c4 .L0 
     /tmp/ccivhpoy.s:163    .text:00000000000000c4 .L0 
     /tmp/ccivhpoy.s:168    .text:00000000000000d0 .L0 
     /tmp/ccivhpoy.s:171    .text:00000000000000d8 .L0 
     /tmp/ccivhpoy.s:178    .text:00000000000000e0 .L0 
     /tmp/ccivhpoy.s:179    .text:00000000000000e0 .L0 
     /tmp/ccivhpoy.s:185    .text:00000000000000ec .L0 
     /tmp/ccivhpoy.s:194    .text:00000000000000f4 .L0 
     /tmp/ccivhpoy.s:195    .text:00000000000000f4 .L0 
     /tmp/ccivhpoy.s:196    .text:00000000000000f4 .L0 
     /tmp/ccivhpoy.s:198    .text:00000000000000f8 .L0 
     /tmp/ccivhpoy.s:203    .text:00000000000000fc .L0 
     /tmp/ccivhpoy.s:204    .text:00000000000000fc .L0 
     /tmp/ccivhpoy.s:207    .text:0000000000000100 .L0 
     /tmp/ccivhpoy.s:208    .text:0000000000000100 .L0 
     /tmp/ccivhpoy.s:210    .text:0000000000000104 .L0 
     /tmp/ccivhpoy.s:213    .text:0000000000000108 .L0 
     /tmp/ccivhpoy.s:214    .text:0000000000000108 .L0 
     /tmp/ccivhpoy.s:215    .text:0000000000000108 .L0 
     /tmp/ccivhpoy.s:219    .text:000000000000010c .L0 
     /tmp/ccivhpoy.s:221    .text:0000000000000110 .L0 
     /tmp/ccivhpoy.s:225    .text:0000000000000114 .L0 
     /tmp/ccivhpoy.s:231    .text:0000000000000118 .L0 
     /tmp/ccivhpoy.s:232    .text:0000000000000118 .L0 
     /tmp/ccivhpoy.s:233    .text:0000000000000118 .L0 
     /tmp/ccivhpoy.s:238    .text:000000000000011c .L0 
     /tmp/ccivhpoy.s:239    .text:000000000000011c .L0 
     /tmp/ccivhpoy.s:242    .text:0000000000000120 .L0 
     /tmp/ccivhpoy.s:243    .text:0000000000000120 .L0 
     /tmp/ccivhpoy.s:246    .text:0000000000000124 .L0 
     /tmp/ccivhpoy.s:247    .text:0000000000000124 .L0 
     /tmp/ccivhpoy.s:248    .text:0000000000000124 .L0 
     /tmp/ccivhpoy.s:250    .text:0000000000000128 .L0 
     /tmp/ccivhpoy.s:251    .text:0000000000000128 .L0 
     /tmp/ccivhpoy.s:253    .text:000000000000012c .L0 
     /tmp/ccivhpoy.s:254    .text:000000000000012c .L0 
     /tmp/ccivhpoy.s:257    .text:0000000000000130 .L0 
     /tmp/ccivhpoy.s:259    .text:0000000000000134 .L0 
     /tmp/ccivhpoy.s:264    .text:0000000000000138 .L0 
     /tmp/ccivhpoy.s:265    .text:0000000000000138 .L0 
     /tmp/ccivhpoy.s:266    .text:0000000000000138 .L0 
     /tmp/ccivhpoy.s:268    .text:000000000000013c .L0 
     /tmp/ccivhpoy.s:271    .text:0000000000000140 .L0 
     /tmp/ccivhpoy.s:272    .text:0000000000000140 .L0 
     /tmp/ccivhpoy.s:273    .text:0000000000000140 .L0 
     /tmp/ccivhpoy.s:276    .text:0000000000000144 .L0 
     /tmp/ccivhpoy.s:284    .text:0000000000000148 .L0 
     /tmp/ccivhpoy.s:285    .text:0000000000000148 .L0 
     /tmp/ccivhpoy.s:286    .text:0000000000000148 .L0 
     /tmp/ccivhpoy.s:288    .text:000000000000014c .L0 
     /tmp/ccivhpoy.s:290    .text:0000000000000150 .L0 
     /tmp/ccivhpoy.s:291    .text:0000000000000150 .L0 
     /tmp/ccivhpoy.s:299    .text:0000000000000154 .L0 
GAS LISTING /tmp/ccivhpoy.s 			page 22


     /tmp/ccivhpoy.s:300    .text:0000000000000154 .L0 
     /tmp/ccivhpoy.s:302    .text:0000000000000158 .L0 
     /tmp/ccivhpoy.s:303    .text:0000000000000158 .L0 
     /tmp/ccivhpoy.s:310    .text:000000000000015c .L0 
     /tmp/ccivhpoy.s:311    .text:0000000000000160 .L0 
     /tmp/ccivhpoy.s:312    .text:0000000000000160 .L0 
     /tmp/ccivhpoy.s:313    .text:0000000000000160 .L0 
     /tmp/ccivhpoy.s:315    .text:0000000000000164 .L0 
     /tmp/ccivhpoy.s:319    .text:0000000000000168 .L0 
     /tmp/ccivhpoy.s:321    .text:0000000000000168 .L0 
     /tmp/ccivhpoy.s:324    .text:0000000000000170 .L0 
     /tmp/ccivhpoy.s:330    .text:0000000000000170 _ZN15MemoryAllocator8mem_freeEPv
     /tmp/ccivhpoy.s:333    .text:0000000000000170 .L0 
     /tmp/ccivhpoy.s:335    .text:0000000000000170 .L0 
     /tmp/ccivhpoy.s:336    .text:0000000000000174 .L0 
     /tmp/ccivhpoy.s:338    .text:0000000000000178 .L0 
     /tmp/ccivhpoy.s:340    .text:000000000000017c .L0 
     /tmp/ccivhpoy.s:342    .text:000000000000017c .L0 
     /tmp/ccivhpoy.s:343    .text:000000000000017c .L0 
     /tmp/ccivhpoy.s:345    .text:0000000000000180 .L0 
     /tmp/ccivhpoy.s:349    .text:0000000000000184 .L0 
     /tmp/ccivhpoy.s:350    .text:0000000000000184 .L0 
     /tmp/ccivhpoy.s:353    .text:0000000000000190 .L0 
     /tmp/ccivhpoy.s:358    .text:0000000000000198 .L0 
     /tmp/ccivhpoy.s:360    .text:000000000000019c .L0 
     /tmp/ccivhpoy.s:361    .text:000000000000019c .L0 
     /tmp/ccivhpoy.s:364    .text:00000000000001a0 .L0 
     /tmp/ccivhpoy.s:365    .text:00000000000001a0 .L0 
     /tmp/ccivhpoy.s:366    .text:00000000000001a0 .L0 
     /tmp/ccivhpoy.s:371    .text:00000000000001a8 .L0 
     /tmp/ccivhpoy.s:372    .text:00000000000001a8 .L0 
     /tmp/ccivhpoy.s:377    .text:00000000000001b4 .L0 
     /tmp/ccivhpoy.s:379    .text:00000000000001b8 .L0 
     /tmp/ccivhpoy.s:386    .text:00000000000001bc .L0 
     /tmp/ccivhpoy.s:391    .text:00000000000001bc .L0 
     /tmp/ccivhpoy.s:396    .text:00000000000001bc .L0 
     /tmp/ccivhpoy.s:397    .text:00000000000001bc .L0 
     /tmp/ccivhpoy.s:402    .text:00000000000001c0 .L0 
     /tmp/ccivhpoy.s:407    .text:00000000000001c4 .L0 
     /tmp/ccivhpoy.s:409    .text:00000000000001c8 .L0 
     /tmp/ccivhpoy.s:412    .text:00000000000001d0 .L0 
     /tmp/ccivhpoy.s:414    .text:00000000000001d0 .L0 
     /tmp/ccivhpoy.s:415    .text:00000000000001d0 .L0 
     /tmp/ccivhpoy.s:417    .text:00000000000001d8 .L0 
     /tmp/ccivhpoy.s:420    .text:00000000000001dc .L0 
     /tmp/ccivhpoy.s:424    .text:00000000000001e0 .L0 
     /tmp/ccivhpoy.s:425    .text:00000000000001e0 .L0 
     /tmp/ccivhpoy.s:427    .text:00000000000001e4 .L0 
     /tmp/ccivhpoy.s:429    .text:00000000000001e8 .L0 
     /tmp/ccivhpoy.s:432    .text:00000000000001ec .L0 
     /tmp/ccivhpoy.s:433    .text:00000000000001ec .L0 
     /tmp/ccivhpoy.s:434    .text:00000000000001ec .L0 
     /tmp/ccivhpoy.s:436    .text:00000000000001f0 .L0 
     /tmp/ccivhpoy.s:439    .text:00000000000001f4 .L0 
     /tmp/ccivhpoy.s:445    .text:00000000000001f8 .L0 
     /tmp/ccivhpoy.s:446    .text:00000000000001f8 .L0 
     /tmp/ccivhpoy.s:447    .text:00000000000001f8 .L0 
GAS LISTING /tmp/ccivhpoy.s 			page 23


     /tmp/ccivhpoy.s:449    .text:00000000000001fc .L0 
     /tmp/ccivhpoy.s:450    .text:00000000000001fc .L0 
     /tmp/ccivhpoy.s:452    .text:0000000000000200 .L0 
     /tmp/ccivhpoy.s:453    .text:0000000000000200 .L0 
     /tmp/ccivhpoy.s:455    .text:0000000000000204 .L0 
     /tmp/ccivhpoy.s:456    .text:0000000000000204 .L0 
     /tmp/ccivhpoy.s:458    .text:000000000000020c .L0 
     /tmp/ccivhpoy.s:459    .text:000000000000020c .L0 
     /tmp/ccivhpoy.s:467    .text:0000000000000214 .L0 
     /tmp/ccivhpoy.s:471    .text:0000000000000218 .L0 
     /tmp/ccivhpoy.s:472    .text:0000000000000218 .L0 
     /tmp/ccivhpoy.s:474    .text:000000000000021c .L0 
     /tmp/ccivhpoy.s:476    .text:0000000000000220 .L0 
     /tmp/ccivhpoy.s:478    .text:0000000000000224 .L0 
     /tmp/ccivhpoy.s:482    .text:0000000000000228 .L0 
     /tmp/ccivhpoy.s:483    .text:0000000000000228 .L0 
     /tmp/ccivhpoy.s:484    .text:0000000000000228 .L0 
     /tmp/ccivhpoy.s:486    .text:000000000000022c .L0 
     /tmp/ccivhpoy.s:487    .text:000000000000022c .L0 
     /tmp/ccivhpoy.s:492    .text:0000000000000230 .L0 
     /tmp/ccivhpoy.s:493    .text:0000000000000230 .L0 
     /tmp/ccivhpoy.s:494    .text:0000000000000230 .L0 
     /tmp/ccivhpoy.s:496    .text:0000000000000234 .L0 
     /tmp/ccivhpoy.s:498    .text:0000000000000238 .L0 
     /tmp/ccivhpoy.s:499    .text:0000000000000238 .L0 
     /tmp/ccivhpoy.s:507    .text:000000000000023c .L0 
     /tmp/ccivhpoy.s:508    .text:000000000000023c .L0 
     /tmp/ccivhpoy.s:510    .text:0000000000000240 .L0 
     /tmp/ccivhpoy.s:512    .text:0000000000000244 .L0 
     /tmp/ccivhpoy.s:514    .text:0000000000000248 .L0 
     /tmp/ccivhpoy.s:516    .text:000000000000024c .L0 
     /tmp/ccivhpoy.s:518    .text:0000000000000250 .L0 
     /tmp/ccivhpoy.s:522    .text:0000000000000254 .L0 
     /tmp/ccivhpoy.s:526    .text:0000000000000258 .L0 
     /tmp/ccivhpoy.s:527    .text:000000000000025c .L0 
     /tmp/ccivhpoy.s:528    .text:000000000000025c .L0 
     /tmp/ccivhpoy.s:529    .text:000000000000025c .L0 
     /tmp/ccivhpoy.s:531    .text:0000000000000260 .L0 
     /tmp/ccivhpoy.s:535    .text:0000000000000264 .L0 
     /tmp/ccivhpoy.s:539    .text:0000000000000264 .L0 
     /tmp/ccivhpoy.s:543    .text:0000000000000268 .L0 
     /tmp/ccivhpoy.s:544    .text:0000000000000268 .L0 
     /tmp/ccivhpoy.s:545    .text:0000000000000268 .L0 
     /tmp/ccivhpoy.s:547    .text:000000000000026c .L0 
     /tmp/ccivhpoy.s:548    .text:000000000000026c .L0 
     /tmp/ccivhpoy.s:550    .text:0000000000000270 .L0 
     /tmp/ccivhpoy.s:551    .text:0000000000000270 .L0 
     /tmp/ccivhpoy.s:554    .text:0000000000000278 .L0 
     /tmp/ccivhpoy.s:557    .text:000000000000027c .L0 
     /tmp/ccivhpoy.s:559    .text:0000000000000280 .L0 
     /tmp/ccivhpoy.s:561    .text:0000000000000284 .L0 
     /tmp/ccivhpoy.s:562    .text:0000000000000284 .L0 
     /tmp/ccivhpoy.s:566    .text:0000000000000288 .L0 
     /tmp/ccivhpoy.s:567    .text:0000000000000288 .L0 
     /tmp/ccivhpoy.s:569    .text:0000000000000290 .L0 
     /tmp/ccivhpoy.s:570    .text:0000000000000290 .L0 
     /tmp/ccivhpoy.s:575    .text:0000000000000298 .L0 
GAS LISTING /tmp/ccivhpoy.s 			page 24


     /tmp/ccivhpoy.s:576    .text:0000000000000298 .L0 
     /tmp/ccivhpoy.s:578    .text:000000000000029c .L0 
     /tmp/ccivhpoy.s:583    .text:00000000000002a4 .L0 
     /tmp/ccivhpoy.s:584    .text:00000000000002a4 .L0 
     /tmp/ccivhpoy.s:587    .text:00000000000002b0 .L0 
     /tmp/ccivhpoy.s:596    .text:00000000000002b8 .L0 
     /tmp/ccivhpoy.s:597    .text:00000000000002b8 .L0 
     /tmp/ccivhpoy.s:608    .text:00000000000002c8 .L0 
     /tmp/ccivhpoy.s:609    .text:00000000000002c8 .L0 
     /tmp/ccivhpoy.s:611    .text:00000000000002cc .L0 
     /tmp/ccivhpoy.s:614    .text:00000000000002d4 .L0 
     /tmp/ccivhpoy.s:615    .text:00000000000002d4 .L0 
     /tmp/ccivhpoy.s:618    .text:00000000000002d8 .L0 
     /tmp/ccivhpoy.s:622    .text:00000000000002dc .L0 
     /tmp/ccivhpoy.s:632    .text:00000000000002e4 .L0 
     /tmp/ccivhpoy.s:643    .text:00000000000002f4 .L0 
     /tmp/ccivhpoy.s:659    .text:0000000000000314 .L0 
     /tmp/ccivhpoy.s:666    .text:000000000000031c .L0 
     /tmp/ccivhpoy.s:669    .text:0000000000000324 .L0 
     /tmp/ccivhpoy.s:678    .bss:0000000000000000 _ZN15MemoryAllocator4headE
     /tmp/ccivhpoy.s:675    .bss:0000000000000000 .LANCHOR0
     /tmp/ccivhpoy.s:683    .text:0000000000000324 .L0 
     /tmp/ccivhpoy.s:23     .text:000000000000000c .L0 
     /tmp/ccivhpoy.s:32     .text:0000000000000018 .L0 
     /tmp/ccivhpoy.s:60     .text:000000000000003c .L0 
     /tmp/ccivhpoy.s:72     .text:000000000000004c .L0 
     /tmp/ccivhpoy.s:80     .text:0000000000000060 .L0 
     /tmp/ccivhpoy.s:93     .text:0000000000000074 .L0 
     /tmp/ccivhpoy.s:150    .text:00000000000000b4 .L0 
     /tmp/ccivhpoy.s:163    .text:00000000000000c4 .L0 
     /tmp/ccivhpoy.s:168    .text:00000000000000d0 .L0 
     /tmp/ccivhpoy.s:179    .text:00000000000000e0 .L0 
     /tmp/ccivhpoy.s:350    .text:0000000000000184 .L0 
     /tmp/ccivhpoy.s:372    .text:00000000000001a8 .L0 
     /tmp/ccivhpoy.s:415    .text:00000000000001d0 .L0 
     /tmp/ccivhpoy.s:456    .text:0000000000000204 .L0 
     /tmp/ccivhpoy.s:551    .text:0000000000000270 .L0 
     /tmp/ccivhpoy.s:567    .text:0000000000000288 .L0 
     /tmp/ccivhpoy.s:584    .text:00000000000002a4 .L0 
     /tmp/ccivhpoy.s:66     .text:000000000000004c .L16
     /tmp/ccivhpoy.s:318    .text:0000000000000168 .L13
     /tmp/ccivhpoy.s:200    .text:00000000000000fc .L12
     /tmp/ccivhpoy.s:38     .text:0000000000000028 .L3
     /tmp/ccivhpoy.s:141    .text:00000000000000ac .L17
     /tmp/ccivhpoy.s:182    .text:00000000000000ec .L14
     /tmp/ccivhpoy.s:293    .text:0000000000000154 .L9
     /tmp/ccivhpoy.s:157    .text:00000000000000c4 .L18
     /tmp/ccivhpoy.s:305    .text:000000000000015c .L1
     /tmp/ccivhpoy.s:189    .text:00000000000000f4 .L5
     /tmp/ccivhpoy.s:107    .text:0000000000000090 .L19
     /tmp/ccivhpoy.s:175    .text:00000000000000e0 .L20
     /tmp/ccivhpoy.s:278    .text:0000000000000148 .L11
     /tmp/ccivhpoy.s:628    .text:00000000000002e4 .L30
     /tmp/ccivhpoy.s:636    .text:00000000000002ec .L31
     /tmp/ccivhpoy.s:641    .text:00000000000002f4 .L32
     /tmp/ccivhpoy.s:645    .text:00000000000002fc .L33
     /tmp/ccivhpoy.s:648    .text:0000000000000304 .L34
GAS LISTING /tmp/ccivhpoy.s 			page 25


     /tmp/ccivhpoy.s:651    .text:000000000000030c .L35
     /tmp/ccivhpoy.s:441    .text:00000000000001f8 .L41
     /tmp/ccivhpoy.s:462    .text:0000000000000214 .L24
     /tmp/ccivhpoy.s:421    .text:00000000000001e0 .L23
     /tmp/ccivhpoy.s:524    .text:0000000000000258 .L22
     /tmp/ccivhpoy.s:534    .text:0000000000000264 .L42
     /tmp/ccivhpoy.s:590    .text:00000000000002b8 .L43
     /tmp/ccivhpoy.s:662    .text:000000000000031c .L38
     /tmp/ccivhpoy.s:605    .text:00000000000002c8 .L44
     /tmp/ccivhpoy.s:655    .text:0000000000000314 .L37
     /tmp/ccivhpoy.s:573    .text:0000000000000298 .L45
     /tmp/ccivhpoy.s:564    .text:0000000000000288 .L27
     /tmp/ccivhpoy.s:504    .text:000000000000023c .L29
     /tmp/ccivhpoy.s:1423   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccivhpoy.s:2871   .debug_str:000000000000022b .LASF54
     /tmp/ccivhpoy.s:2901   .debug_str:00000000000003e1 .LASF55
     /tmp/ccivhpoy.s:2827   .debug_str:000000000000007a .LASF56
     /tmp/ccivhpoy.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccivhpoy.s:681    .text:0000000000000324 .Letext0
     /tmp/ccivhpoy.s:2807   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccivhpoy.s:2883   .debug_str:0000000000000345 .LASF0
     /tmp/ccivhpoy.s:2857   .debug_str:000000000000019e .LASF1
     /tmp/ccivhpoy.s:2847   .debug_str:000000000000015a .LASF2
     /tmp/ccivhpoy.s:2825   .debug_str:0000000000000073 .LASF4
     /tmp/ccivhpoy.s:2853   .debug_str:0000000000000180 .LASF3
     /tmp/ccivhpoy.s:2815   .debug_str:0000000000000039 .LASF5
     /tmp/ccivhpoy.s:2809   .debug_str:0000000000000000 .LASF6
     /tmp/ccivhpoy.s:2839   .debug_str:0000000000000108 .LASF7
     /tmp/ccivhpoy.s:2893   .debug_str:000000000000038a .LASF8
     /tmp/ccivhpoy.s:2823   .debug_str:0000000000000065 .LASF9
     /tmp/ccivhpoy.s:2937   .debug_str:0000000000000544 .LASF10
     /tmp/ccivhpoy.s:2843   .debug_str:000000000000012a .LASF11
     /tmp/ccivhpoy.s:2925   .debug_str:000000000000050c .LASF12
     /tmp/ccivhpoy.s:2903   .debug_str:00000000000003f9 .LASF13
     /tmp/ccivhpoy.s:2859   .debug_str:00000000000001b1 .LASF14
     /tmp/ccivhpoy.s:2833   .debug_str:00000000000000bd .LASF15
     /tmp/ccivhpoy.s:2897   .debug_str:00000000000003c2 .LASF16
     /tmp/ccivhpoy.s:2813   .debug_str:0000000000000029 .LASF30
     /tmp/ccivhpoy.s:2891   .debug_str:000000000000037d .LASF57
     /tmp/ccivhpoy.s:2929   .debug_str:0000000000000526 .LASF58
     /tmp/ccivhpoy.s:2855   .debug_str:0000000000000192 .LASF20
     /tmp/ccivhpoy.s:2899   .debug_str:00000000000003d8 .LASF17
     /tmp/ccivhpoy.s:2933   .debug_str:000000000000053a .LASF18
     /tmp/ccivhpoy.s:2817   .debug_str:0000000000000040 .LASF19
     /tmp/ccivhpoy.s:2863   .debug_str:00000000000001d2 .LASF59
     /tmp/ccivhpoy.s:2909   .debug_str:000000000000043b .LASF60
     /tmp/ccivhpoy.s:2921   .debug_str:00000000000004b6 .LASF61
     /tmp/ccivhpoy.s:2861   .debug_str:00000000000001bd .LASF21
     /tmp/ccivhpoy.s:2927   .debug_str:000000000000051c .LASF22
     /tmp/ccivhpoy.s:2917   .debug_str:0000000000000489 .LASF24
     /tmp/ccivhpoy.s:2905   .debug_str:0000000000000409 .LASF23
     /tmp/ccivhpoy.s:2845   .debug_str:0000000000000139 .LASF25
     /tmp/ccivhpoy.s:2915   .debug_str:000000000000047c .LASF26
     /tmp/ccivhpoy.s:2873   .debug_str:00000000000002ef .LASF27
     /tmp/ccivhpoy.s:2849   .debug_str:0000000000000168 .LASF28
     /tmp/ccivhpoy.s:2837   .debug_str:00000000000000e3 .LASF29
     /tmp/ccivhpoy.s:2875   .debug_str:0000000000000314 .LASF32
GAS LISTING /tmp/ccivhpoy.s 			page 26


     /tmp/ccivhpoy.s:2913   .debug_str:000000000000046e .LASF62
     /tmp/ccivhpoy.s:2877   .debug_str:000000000000032d .LASF63
     /tmp/ccivhpoy.s:2835   .debug_str:00000000000000d3 .LASF31
     /tmp/ccivhpoy.s:2907   .debug_str:0000000000000412 .LASF33
     /tmp/ccivhpoy.s:2885   .debug_str:0000000000000352 .LASF34
     /tmp/ccivhpoy.s:2895   .debug_str:000000000000039a .LASF35
     /tmp/ccivhpoy.s:2865   .debug_str:00000000000001d9 .LASF36
     /tmp/ccivhpoy.s:2867   .debug_str:00000000000001eb .LASF38
     /tmp/ccivhpoy.s:2831   .debug_str:00000000000000ad .LASF37
     /tmp/ccivhpoy.s:2923   .debug_str:00000000000004e4 .LASF39
     /tmp/ccivhpoy.s:2911   .debug_str:0000000000000469 .LASF40
     /tmp/ccivhpoy.s:2819   .debug_str:0000000000000045 .LASF64
     /tmp/ccivhpoy.s:331    .text:0000000000000170 .LFB12
     /tmp/ccivhpoy.s:670    .text:0000000000000324 .LFE12
     /tmp/ccivhpoy.s:2851   .debug_str:0000000000000175 .LASF44
     /tmp/ccivhpoy.s:2103   .debug_loc:0000000000000000 .LLST18
     /tmp/ccivhpoy.s:2179   .debug_loc:000000000000011c .LLST19
     /tmp/ccivhpoy.s:2821   .debug_str:0000000000000060 .LASF41
     /tmp/ccivhpoy.s:2212   .debug_loc:00000000000001b3 .LLST20
     /tmp/ccivhpoy.s:2935   .debug_str:000000000000053f .LASF42
     /tmp/ccivhpoy.s:2244   .debug_loc:0000000000000249 .LLST21
     /tmp/ccivhpoy.s:443    .text:00000000000001f8 .LBB98
     /tmp/ccivhpoy.s:463    .text:0000000000000214 .LBE98
     /tmp/ccivhpoy.s:2841   .debug_str:000000000000011b .LASF43
     /tmp/ccivhpoy.s:2287   .debug_loc:0000000000000317 .LLST24
     /tmp/ccivhpoy.s:540    .text:0000000000000268 .LBB108
     /tmp/ccivhpoy.s:591    .text:00000000000002b8 .LBE108
     /tmp/ccivhpoy.s:2294   .debug_loc:000000000000033a .LLST28
     /tmp/ccivhpoy.s:479    .text:0000000000000228 .LBB103
     /tmp/ccivhpoy.s:505    .text:000000000000023c .LBE103
     /tmp/ccivhpoy.s:2301   .debug_loc:000000000000035d .LLST25
     /tmp/ccivhpoy.s:490    .text:0000000000000230 .LBB104
     /tmp/ccivhpoy.s:502    .text:000000000000023c .LBE104
     /tmp/ccivhpoy.s:2308   .debug_loc:0000000000000380 .LLST26
     /tmp/ccivhpoy.s:2315   .debug_loc:00000000000003a3 .LLST27
     /tmp/ccivhpoy.s:346    .text:0000000000000184 .LBB85
     /tmp/ccivhpoy.s:356    .text:0000000000000198 .LBE85
     /tmp/ccivhpoy.s:368    .text:00000000000001a8 .LBB87
     /tmp/ccivhpoy.s:375    .text:00000000000001b4 .LBE87
     /tmp/ccivhpoy.s:381    .text:00000000000001bc .LBB89
     /tmp/ccivhpoy.s:2781   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccivhpoy.s:2322   .debug_loc:00000000000003c6 .LLST22
     /tmp/ccivhpoy.s:384    .text:00000000000001bc .LBB91
     /tmp/ccivhpoy.s:2329   .debug_loc:00000000000003e9 .LLST23
     /tmp/ccivhpoy.s:10     .text:0000000000000000 .LFB11
     /tmp/ccivhpoy.s:325    .text:0000000000000170 .LFE11
     /tmp/ccivhpoy.s:2336   .debug_loc:000000000000040c .LLST0
     /tmp/ccivhpoy.s:2869   .debug_str:0000000000000215 .LASF45
     /tmp/ccivhpoy.s:2401   .debug_loc:00000000000004ff .LLST1
     /tmp/ccivhpoy.s:2554   .debug_loc:0000000000000659 .LLST2
     /tmp/ccivhpoy.s:2574   .debug_loc:00000000000006b6 .LLST3
     /tmp/ccivhpoy.s:2889   .debug_str:0000000000000369 .LASF46
     /tmp/ccivhpoy.s:2594   .debug_loc:0000000000000713 .LLST5
     /tmp/ccivhpoy.s:2829   .debug_str:000000000000009f .LASF47
     /tmp/ccivhpoy.s:2629   .debug_loc:000000000000079d .LLST6
     /tmp/ccivhpoy.s:2811   .debug_str:0000000000000013 .LASF48
     /tmp/ccivhpoy.s:2648   .debug_loc:00000000000007f9 .LLST7
GAS LISTING /tmp/ccivhpoy.s 			page 27


     /tmp/ccivhpoy.s:2879   .debug_str:0000000000000332 .LASF49
     /tmp/ccivhpoy.s:2659   .debug_loc:000000000000082f .LLST10
     /tmp/ccivhpoy.s:2931   .debug_str:0000000000000532 .LASF50
     /tmp/ccivhpoy.s:2670   .debug_loc:0000000000000865 .LLST11
     /tmp/ccivhpoy.s:2881   .debug_str:000000000000033e .LASF51
     /tmp/ccivhpoy.s:2687   .debug_loc:00000000000008b0 .LLST12
     /tmp/ccivhpoy.s:229    .text:0000000000000118 .LBB74
     /tmp/ccivhpoy.s:236    .text:000000000000011c .LBE74
     /tmp/ccivhpoy.s:2698   .debug_loc:00000000000008e6 .LLST13
     /tmp/ccivhpoy.s:262    .text:0000000000000138 .LBB76
     /tmp/ccivhpoy.s:280    .text:0000000000000148 .LBE76
     /tmp/ccivhpoy.s:2705   .debug_loc:0000000000000909 .LLST14
     /tmp/ccivhpoy.s:2712   .debug_loc:000000000000092c .LLST15
     /tmp/ccivhpoy.s:282    .text:0000000000000148 .LBB78
     /tmp/ccivhpoy.s:295    .text:0000000000000154 .LBE78
     /tmp/ccivhpoy.s:2724   .debug_loc:0000000000000963 .LLST16
     /tmp/ccivhpoy.s:2731   .debug_loc:0000000000000986 .LLST17
     /tmp/ccivhpoy.s:117    .text:0000000000000094 .LBB69
     /tmp/ccivhpoy.s:135    .text:00000000000000a4 .LBE69
     /tmp/ccivhpoy.s:2738   .debug_loc:00000000000009a9 .LLST8
     /tmp/ccivhpoy.s:2749   .debug_loc:00000000000009df .LLST9
     /tmp/ccivhpoy.s:159    .text:00000000000000c4 .LBB71
     /tmp/ccivhpoy.s:166    .text:00000000000000d0 .LBE71
     /tmp/ccivhpoy.s:27     .text:0000000000000018 .LBB57
     /tmp/ccivhpoy.s:35     .text:0000000000000024 .LBE57
     /tmp/ccivhpoy.s:44     .text:000000000000002c .LBB59
     /tmp/ccivhpoy.s:57     .text:000000000000003c .LBE59
     /tmp/ccivhpoy.s:2761   .debug_loc:0000000000000a16 .LLST4
     /tmp/ccivhpoy.s:68     .text:000000000000004c .LBB61
     /tmp/ccivhpoy.s:78     .text:0000000000000060 .LBE61
     /tmp/ccivhpoy.s:89     .text:0000000000000074 .LBB63
     /tmp/ccivhpoy.s:96     .text:0000000000000080 .LBE63
     /tmp/ccivhpoy.s:2887   .debug_str:0000000000000361 .LASF52
     /tmp/ccivhpoy.s:2919   .debug_str:00000000000004aa .LASF53
     /tmp/ccivhpoy.s:334    .text:0000000000000170 .LVL39
     /tmp/ccivhpoy.s:362    .text:00000000000001a0 .LVL40
     /tmp/ccivhpoy.s:500    .text:000000000000023c .LVL51
     /tmp/ccivhpoy.s:523    .text:0000000000000258 .LVL52
     /tmp/ccivhpoy.s:533    .text:0000000000000264 .LVL53
     /tmp/ccivhpoy.s:602    .text:00000000000002c4 .LVL64
     /tmp/ccivhpoy.s:623    .text:00000000000002e0 .LVL67
     /tmp/ccivhpoy.s:627    .text:00000000000002e4 .LVL68
     /tmp/ccivhpoy.s:633    .text:00000000000002e8 .LVL69
     /tmp/ccivhpoy.s:635    .text:00000000000002ec .LVL70
     /tmp/ccivhpoy.s:638    .text:00000000000002f0 .LVL71
     /tmp/ccivhpoy.s:640    .text:00000000000002f4 .LVL72
     /tmp/ccivhpoy.s:661    .text:000000000000031c .LVL74
     /tmp/ccivhpoy.s:667    .text:0000000000000320 .LVL75
     /tmp/ccivhpoy.s:563    .text:0000000000000288 .LVL57
     /tmp/ccivhpoy.s:572    .text:0000000000000298 .LVL58
     /tmp/ccivhpoy.s:579    .text:00000000000002a0 .LVL59
     /tmp/ccivhpoy.s:581    .text:00000000000002a4 .LVL60
     /tmp/ccivhpoy.s:589    .text:00000000000002b8 .LVL61
     /tmp/ccivhpoy.s:598    .text:00000000000002bc .LVL62
     /tmp/ccivhpoy.s:600    .text:00000000000002c0 .LVL63
     /tmp/ccivhpoy.s:422    .text:00000000000001e0 .LVL44
     /tmp/ccivhpoy.s:431    .text:00000000000001ec .LVL45
GAS LISTING /tmp/ccivhpoy.s 			page 28


     /tmp/ccivhpoy.s:437    .text:00000000000001f4 .LVL46
     /tmp/ccivhpoy.s:440    .text:00000000000001f8 .LVL47
     /tmp/ccivhpoy.s:461    .text:0000000000000214 .LVL48
     /tmp/ccivhpoy.s:552    .text:0000000000000278 .LVL55
     /tmp/ccivhpoy.s:616    .text:00000000000002d8 .LVL66
     /tmp/ccivhpoy.s:654    .text:0000000000000314 .LVL73
     /tmp/ccivhpoy.s:555    .text:000000000000027c .LVL56
     /tmp/ccivhpoy.s:604    .text:00000000000002c8 .LVL65
     /tmp/ccivhpoy.s:542    .text:0000000000000268 .LVL54
     /tmp/ccivhpoy.s:481    .text:0000000000000228 .LVL49
     /tmp/ccivhpoy.s:489    .text:0000000000000230 .LVL50
     /tmp/ccivhpoy.s:380    .text:00000000000001bc .LVL41
     /tmp/ccivhpoy.s:403    .text:00000000000001c4 .LVL43
     /tmp/ccivhpoy.s:398    .text:00000000000001c0 .LVL42
     /tmp/ccivhpoy.s:14     .text:0000000000000000 .LVL0
     /tmp/ccivhpoy.s:42     .text:000000000000002c .LVL1
     /tmp/ccivhpoy.s:65     .text:000000000000004c .LVL4
     /tmp/ccivhpoy.s:106    .text:0000000000000090 .LVL5
     /tmp/ccivhpoy.s:122    .text:0000000000000098 .LVL7
     /tmp/ccivhpoy.s:140    .text:00000000000000ac .LVL12
     /tmp/ccivhpoy.s:145    .text:00000000000000b0 .LVL13
     /tmp/ccivhpoy.s:188    .text:00000000000000f4 .LVL22
     /tmp/ccivhpoy.s:240    .text:0000000000000120 .LVL28
     /tmp/ccivhpoy.s:304    .text:000000000000015c .LVL36
     /tmp/ccivhpoy.s:317    .text:0000000000000168 .LVL37
     /tmp/ccivhpoy.s:322    .text:000000000000016c .LVL38
     /tmp/ccivhpoy.s:55     .text:000000000000003c .LVL2
     /tmp/ccivhpoy.s:138    .text:00000000000000a8 .LVL11
     /tmp/ccivhpoy.s:154    .text:00000000000000c0 .LVL15
     /tmp/ccivhpoy.s:156    .text:00000000000000c4 .LVL16
     /tmp/ccivhpoy.s:172    .text:00000000000000dc .LVL18
     /tmp/ccivhpoy.s:181    .text:00000000000000ec .LVL20
     /tmp/ccivhpoy.s:186    .text:00000000000000f0 .LVL21
     /tmp/ccivhpoy.s:234    .text:000000000000011c .LVL27
     /tmp/ccivhpoy.s:61     .text:0000000000000044 .LVL3
     /tmp/ccivhpoy.s:199    .text:00000000000000fc .LVL23
     /tmp/ccivhpoy.s:151    .text:00000000000000bc .LVL14
     /tmp/ccivhpoy.s:169    .text:00000000000000d8 .LVL17
     /tmp/ccivhpoy.s:174    .text:00000000000000e0 .LVL19
     /tmp/ccivhpoy.s:211    .text:0000000000000108 .LVL24
     /tmp/ccivhpoy.s:292    .text:0000000000000154 .LVL35
     /tmp/ccivhpoy.s:216    .text:000000000000010c .LVL25
     /tmp/ccivhpoy.s:244    .text:0000000000000124 .LVL29
     /tmp/ccivhpoy.s:255    .text:0000000000000130 .LVL30
     /tmp/ccivhpoy.s:277    .text:0000000000000148 .LVL34
     /tmp/ccivhpoy.s:228    .text:0000000000000118 .LVL26
     /tmp/ccivhpoy.s:261    .text:0000000000000138 .LVL31
     /tmp/ccivhpoy.s:270    .text:0000000000000140 .LVL32
     /tmp/ccivhpoy.s:274    .text:0000000000000144 .LVL33
     /tmp/ccivhpoy.s:116    .text:0000000000000094 .LVL6
     /tmp/ccivhpoy.s:126    .text:000000000000009c .LVL8
     /tmp/ccivhpoy.s:130    .text:00000000000000a0 .LVL9
     /tmp/ccivhpoy.s:133    .text:00000000000000a4 .LVL10
     /tmp/ccivhpoy.s:684    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccivhpoy.s:108    .text:0000000000000090 .LBB65
     /tmp/ccivhpoy.s:201    .text:00000000000000fc .LBE65
     /tmp/ccivhpoy.s:205    .text:0000000000000100 .LBB84
GAS LISTING /tmp/ccivhpoy.s 			page 29


     /tmp/ccivhpoy.s:308    .text:000000000000015c .LBE84
     /tmp/ccivhpoy.s:176    .text:00000000000000e0 .LBB73
     /tmp/ccivhpoy.s:183    .text:00000000000000ec .LBE73
     /tmp/ccivhpoy.s:226    .text:0000000000000118 .LBB80
     /tmp/ccivhpoy.s:296    .text:0000000000000154 .LBE80
     /tmp/ccivhpoy.s:390    .text:00000000000001bc .LBE89
     /tmp/ccivhpoy.s:392    .text:00000000000001bc .LBB96
     /tmp/ccivhpoy.s:405    .text:00000000000001c4 .LBE96
     /tmp/ccivhpoy.s:388    .text:00000000000001bc .LBE91
     /tmp/ccivhpoy.s:394    .text:00000000000001bc .LBB94
     /tmp/ccivhpoy.s:400    .text:00000000000001c0 .LBE94

UNDEFINED SYMBOLS
HEAP_END_ADDR
HEAP_START_ADDR

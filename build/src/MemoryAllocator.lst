GAS LISTING /tmp/ccgj8Ntl.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator9mem_allocEm
   9              	_ZN15MemoryAllocator9mem_allocEm:
  10              	.LFB9:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.h"
   2:src/MemoryAllocator.cpp **** 
   3:src/MemoryAllocator.cpp **** MemoryAllocator::FreeSegment* MemoryAllocator::head = nullptr;
   4:src/MemoryAllocator.cpp **** 
   5:src/MemoryAllocator.cpp **** void *MemoryAllocator::mem_alloc(size_t size) {
  12              		.loc 1 5 47
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
   6:src/MemoryAllocator.cpp ****     if(head == nullptr) { // ako prvi put alociramo memoriju, alociracemo head na pocetak mem segme
  21              		.loc 1 6 5
  22              		.loc 1 6 13 is_stmt 0
  23 000c 97070000 		ld	a5,.LANCHOR0
  23      83B70700 
  24              		.loc 1 6 5
  25 0014 638C0702 		beqz	a5,.L16
   7:src/MemoryAllocator.cpp ****         head = (FreeSegment*)HEAP_START_ADDR;
   8:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
   9:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR + 1);
  10:src/MemoryAllocator.cpp ****         head->next = nullptr;
  11:src/MemoryAllocator.cpp ****     }
  12:src/MemoryAllocator.cpp ****     else if(head == (FreeSegment*)HEAP_END_ADDR) { // ako ne postoji slobodan prostor
  26              		.loc 1 12 10 is_stmt 1
  27              		.loc 1 12 21 is_stmt 0
  28 0018 17070000 		la	a4,HEAP_END_ADDR
  28      03370700 
  29 0020 03370700 		ld	a4,0(a4)
  30              		.loc 1 12 10
  31 0024 6384E714 		beq	a5,a4,.L13
  32              	.L3:
  13:src/MemoryAllocator.cpp ****         return nullptr;
  14:src/MemoryAllocator.cpp ****     }
  15:src/MemoryAllocator.cpp **** 
  16:src/MemoryAllocator.cpp ****     size += SegmentOffset; // dodajemo zaglavlje
  33              		.loc 1 16 5 is_stmt 1
  34              		.loc 1 16 10 is_stmt 0
  35 0028 13068500 		addi	a2,a0,8
  36              	.LVL1:
  17:src/MemoryAllocator.cpp ****     size_t numOfBlocksToAllocate = sizeInBlocks(size);
  37              		.loc 1 17 5 is_stmt 1
  38              	.LBB35:
  39              	.LBB36:
GAS LISTING /tmp/ccgj8Ntl.s 			page 2


  40              		.file 2 "src/../h/MemoryAllocator.h"
   1:src/../h/MemoryAllocator.h **** #ifndef PROJECT_BASE_MEMORYALLOCATOR_H
   2:src/../h/MemoryAllocator.h **** #define PROJECT_BASE_MEMORYALLOCATOR_H
   3:src/../h/MemoryAllocator.h **** 
   4:src/../h/MemoryAllocator.h **** #include "../lib/hw.h"
   5:src/../h/MemoryAllocator.h **** 
   6:src/../h/MemoryAllocator.h **** class MemoryAllocator {
   7:src/../h/MemoryAllocator.h **** public:
   8:src/../h/MemoryAllocator.h ****     /*
   9:src/../h/MemoryAllocator.h ****     Alocira (najmanje) size bajtova memorije, zaokruženo i poravnato na blokove veličine MEM_BLOC
  10:src/../h/MemoryAllocator.h ****     Svaki alocirani segment ima zaglavlje sa velicinom tog segmenta(vraca se adresa nakon tog zagla
  11:src/../h/MemoryAllocator.h **** 
  12:src/../h/MemoryAllocator.h ****     Vraća:
  13:src/../h/MemoryAllocator.h ****     pokazivač na alocirani deo memorije u slučaju uspeha, nullptr u slučaju neuspeha
  14:src/../h/MemoryAllocator.h **** 
  15:src/../h/MemoryAllocator.h ****     Radi se po algoritmu first fit(alociramo prvi segment koji je >= size). Ako je preostao prostor
  16:src/../h/MemoryAllocator.h ****     jednog bloka, taj preostali prostor se pridruzuje ovom koji smo sad alocirali(jer nema poente d
  17:src/../h/MemoryAllocator.h ****     */
  18:src/../h/MemoryAllocator.h ****     static void* mem_alloc(size_t size);
  19:src/../h/MemoryAllocator.h ****     /*
  20:src/../h/MemoryAllocator.h ****     Oslobađa prostor prethodno zauzet pomoću mem_alloc.
  21:src/../h/MemoryAllocator.h ****     Vraća 0 u slučaju uspeha, BAD_POINTER  flag ako je dostavljen los pokazivac.
  22:src/../h/MemoryAllocator.h ****     Ako je moguce, spaja dva susedna slobodna segmenta u jedan veci
  23:src/../h/MemoryAllocator.h ****     */
  24:src/../h/MemoryAllocator.h ****     static int mem_free(void* memSegment);
  25:src/../h/MemoryAllocator.h **** 
  26:src/../h/MemoryAllocator.h ****     enum memFreeFlags {
  27:src/../h/MemoryAllocator.h ****         BAD_POINTER = -1 // nije koriscen pokazviac iz mem_alloc
  28:src/../h/MemoryAllocator.h ****     };
  29:src/../h/MemoryAllocator.h **** 
  30:src/../h/MemoryAllocator.h **** private:
  31:src/../h/MemoryAllocator.h ****     MemoryAllocator() {} // da bi se zabranilo pravljenje objekata
  32:src/../h/MemoryAllocator.h **** 
  33:src/../h/MemoryAllocator.h ****     struct FreeSegment { // Jednostruko ulancana lista slobodnih segmenata
  34:src/../h/MemoryAllocator.h ****         void* baseAddr; // pocetna adresa u segmentu
  35:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta
  36:src/../h/MemoryAllocator.h ****         FreeSegment* next; // sledeci element u ulancanoj listi
  37:src/../h/MemoryAllocator.h **** 
  38:src/../h/MemoryAllocator.h ****         // brise element iz ulancane liste koji se nalazi posle elementa prev
  39:src/../h/MemoryAllocator.h ****         static void remove(FreeSegment* prev) {
  40:src/../h/MemoryAllocator.h ****             if(!prev->next) return;
  41:src/../h/MemoryAllocator.h **** 
  42:src/../h/MemoryAllocator.h ****             FreeSegment* curr = prev->next;
  43:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
  44:src/../h/MemoryAllocator.h ****         }
  45:src/../h/MemoryAllocator.h **** 
  46:src/../h/MemoryAllocator.h ****         // dodaje element curr u ulancanu listu nakon elementa prev(samo menja prev->next curr->nex
  47:src/../h/MemoryAllocator.h ****         static void add(FreeSegment* prev, FreeSegment* curr) {
  48:src/../h/MemoryAllocator.h ****             curr->next = prev->next;
  49:src/../h/MemoryAllocator.h ****             prev->next = curr;
  50:src/../h/MemoryAllocator.h ****         }
  51:src/../h/MemoryAllocator.h ****     };
  52:src/../h/MemoryAllocator.h **** 
  53:src/../h/MemoryAllocator.h ****     struct AllocatedSpaceHeader { // Zaglavlje zauzetog segmenta
  54:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta(ukljucujuci i zaglavlje)
  55:src/../h/MemoryAllocator.h ****     };
  56:src/../h/MemoryAllocator.h **** 
GAS LISTING /tmp/ccgj8Ntl.s 			page 3


  57:src/../h/MemoryAllocator.h ****     static const size_t SegmentOffset = sizeof(AllocatedSpaceHeader);
  58:src/../h/MemoryAllocator.h **** 
  59:src/../h/MemoryAllocator.h ****     static FreeSegment* head; // pocetak ulancane liste slobodnih segmenata
  60:src/../h/MemoryAllocator.h **** 
  61:src/../h/MemoryAllocator.h ****     // Vraca minimalan potreban broj blokova za alokaciju memorije velicine size bajtova
  62:src/../h/MemoryAllocator.h ****     static inline size_t sizeInBlocks(size_t size) {
  63:src/../h/MemoryAllocator.h ****         return (size / MEM_BLOCK_SIZE) + (size % MEM_BLOCK_SIZE > 0);
  41              		.loc 2 63 9
  42              		.loc 2 63 22 is_stmt 0
  43 002c 13586600 		srli	a6,a2,6
  44              		.loc 2 63 48
  45 0030 9377F603 		andi	a5,a2,63
  46              		.loc 2 63 65
  47 0034 B337F000 		snez	a5,a5
  48              		.loc 2 63 68
  49 0038 3308F800 		add	a6,a6,a5
  50              	.LVL2:
  51              	.LBE36:
  52              	.LBE35:
  18:src/MemoryAllocator.cpp **** 
  19:src/MemoryAllocator.cpp ****     FreeSegment *curr = head, *prev = nullptr;
  53              		.loc 1 19 5 is_stmt 1
  54              		.loc 1 19 18 is_stmt 0
  55 003c 17050000 		ld	a0,.LANCHOR0
  55      03350500 
  56              	.LVL3:
  57              		.loc 1 19 32
  58 0044 93050000 		li	a1,0
  59 0048 6F00C00A 		j	.L12
  60              	.LVL4:
  61              	.L16:
   7:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
  62              		.loc 1 7 9 is_stmt 1
   7:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
  63              		.loc 1 7 14 is_stmt 0
  64 004c 97060000 		la	a3,HEAP_START_ADDR
  64      83B60600 
  65 0054 83B70600 		ld	a5,0(a3)
  66 0058 17070000 		sd	a5,.LANCHOR0,a4
  66      2330F700 
   8:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR + 1);
  67              		.loc 1 8 9 is_stmt 1
   8:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR + 1);
  68              		.loc 1 8 24 is_stmt 0
  69 0060 23B0F700 		sd	a5,0(a5)
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  70              		.loc 1 9 9 is_stmt 1
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  71              		.loc 1 9 45 is_stmt 0
  72 0064 17070000 		la	a4,HEAP_END_ADDR
  72      03370700 
  73 006c 03370700 		ld	a4,0(a4)
  74 0070 83B60600 		ld	a3,0(a3)
  75 0074 3307D740 		sub	a4,a4,a3
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  76              		.loc 1 9 71
  77 0078 13071700 		addi	a4,a4,1
GAS LISTING /tmp/ccgj8Ntl.s 			page 4


   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
  78              		.loc 1 9 20
  79 007c 23B4E700 		sd	a4,8(a5)
  10:src/MemoryAllocator.cpp ****     }
  80              		.loc 1 10 9 is_stmt 1
  10:src/MemoryAllocator.cpp ****     }
  81              		.loc 1 10 20 is_stmt 0
  82 0080 23B80700 		sd	zero,16(a5)
  83 0084 6FF05FFA 		j	.L3
  84              	.LVL5:
  85              	.L19:
  86              	.LBB37:
  87              	.LBB38:
  88              	.LBB39:
  89              	.LBB40:
  20:src/MemoryAllocator.cpp ****     while(curr) {
  21:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = sizeInBlocks(curr->size);
  22:src/MemoryAllocator.cpp ****         size_t allocatedSize;
  23:src/MemoryAllocator.cpp ****         void* startOfAllocatedSpace = curr->baseAddr;
  24:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
  25:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
  26:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
  90              		.loc 1 26 17 is_stmt 1
  27:src/MemoryAllocator.cpp **** 
  28:src/MemoryAllocator.cpp ****                 if(prev == nullptr) { // ako smo na head pokazivacu
  91              		.loc 1 28 17
  92 0088 638E0500 		beqz	a1,.L17
  29:src/MemoryAllocator.cpp ****                     if(curr->next == nullptr) { // ako ne postoji slobodan prostor nakon alokacije
  30:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
  31:src/MemoryAllocator.cpp ****                     }
  32:src/MemoryAllocator.cpp ****                     else {
  33:src/MemoryAllocator.cpp ****                         head = curr->next;
  34:src/MemoryAllocator.cpp ****                     }
  35:src/MemoryAllocator.cpp ****                 }
  36:src/MemoryAllocator.cpp ****                 else {
  37:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
  93              		.loc 1 37 21
  94              	.LVL6:
  95              	.LBB41:
  96              	.LBB42:
  40:src/../h/MemoryAllocator.h **** 
  97              		.loc 2 40 13
  40:src/../h/MemoryAllocator.h **** 
  98              		.loc 2 40 23 is_stmt 0
  99 008c 03B70501 		ld	a4,16(a1)
 100              	.LVL7:
  40:src/../h/MemoryAllocator.h **** 
 101              		.loc 2 40 13
 102 0090 630A0704 		beqz	a4,.L14
  42:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 103              		.loc 2 42 13 is_stmt 1
 104              	.LVL8:
  43:src/../h/MemoryAllocator.h ****         }
 105              		.loc 2 43 13
  43:src/../h/MemoryAllocator.h ****         }
 106              		.loc 2 43 32 is_stmt 0
 107 0094 03370701 		ld	a4,16(a4)
GAS LISTING /tmp/ccgj8Ntl.s 			page 5


 108              	.LVL9:
  43:src/../h/MemoryAllocator.h ****         }
 109              		.loc 2 43 24
 110 0098 23B8E500 		sd	a4,16(a1)
 111              	.LVL10:
 112              	.LBE42:
 113              	.LBE41:
  26:src/MemoryAllocator.cpp **** 
 114              		.loc 1 26 31
 115 009c 13880700 		mv	a6,a5
 116              	.LVL11:
 117 00a0 6F00800B 		j	.L9
 118              	.LVL12:
 119              	.L17:
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 120              		.loc 1 29 21 is_stmt 1
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 121              		.loc 1 29 30 is_stmt 0
 122 00a4 03370501 		ld	a4,16(a0)
 123              	.LVL13:
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 124              		.loc 1 29 21
 125 00a8 630A0700 		beqz	a4,.L18
  33:src/MemoryAllocator.cpp ****                     }
 126              		.loc 1 33 25 is_stmt 1
  33:src/MemoryAllocator.cpp ****                     }
 127              		.loc 1 33 30 is_stmt 0
 128 00ac 17060000 		sd	a4,.LANCHOR0,a2
 128      2330E600 
 129              	.LVL14:
  26:src/MemoryAllocator.cpp **** 
 130              		.loc 1 26 31
 131 00b4 13880700 		mv	a6,a5
 132              	.LVL15:
 133 00b8 6F00000A 		j	.L9
 134              	.LVL16:
 135              	.L18:
  30:src/MemoryAllocator.cpp ****                     }
 136              		.loc 1 30 25 is_stmt 1
  30:src/MemoryAllocator.cpp ****                     }
 137              		.loc 1 30 30 is_stmt 0
 138 00bc 17070000 		la	a4,HEAP_END_ADDR
 138      03370700 
 139 00c4 03370700 		ld	a4,0(a4)
 140 00c8 17060000 		sd	a4,.LANCHOR0,a2
 140      2330E600 
 141              	.LVL17:
  26:src/MemoryAllocator.cpp **** 
 142              		.loc 1 26 31
 143 00d0 13880700 		mv	a6,a5
 144              	.LVL18:
 145 00d4 6F004008 		j	.L9
 146              	.LVL19:
 147              	.L20:
 148              	.LBB43:
  38:src/MemoryAllocator.cpp ****                 }
  39:src/MemoryAllocator.cpp ****             }
GAS LISTING /tmp/ccgj8Ntl.s 			page 6


  40:src/MemoryAllocator.cpp ****             else {
  41:src/MemoryAllocator.cpp ****                 allocatedSize = blocksInSize(numOfBlocksToAllocate);
  42:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
  43:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
  44:src/MemoryAllocator.cpp **** 
  45:src/MemoryAllocator.cpp ****                 FreeSegment* newSeg = (FreeSegment*)newBaseAddr;
  46:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
  47:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
  48:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
  49:src/MemoryAllocator.cpp **** 
  50:src/MemoryAllocator.cpp ****                 if(!prev) {
  51:src/MemoryAllocator.cpp ****                     head = newSeg;
 149              		.loc 1 51 21 is_stmt 1
 150              		.loc 1 51 26 is_stmt 0
 151 00d8 97070000 		sd	a4,.LANCHOR0,a5
 151      23B0E700 
 152 00e0 6F008007 		j	.L9
 153              	.LVL20:
 154              	.L14:
 155              	.LBE43:
  26:src/MemoryAllocator.cpp **** 
 156              		.loc 1 26 31
 157 00e4 13880700 		mv	a6,a5
 158              	.LVL21:
 159 00e8 6F000007 		j	.L9
 160              	.LVL22:
 161              	.L5:
 162              	.LBE40:
 163              	.LBE39:
 164              	.LBE38:
  52:src/MemoryAllocator.cpp ****                 }
  53:src/MemoryAllocator.cpp ****                 else {
  54:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
  55:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
  56:src/MemoryAllocator.cpp ****                 }
  57:src/MemoryAllocator.cpp ****             }
  58:src/MemoryAllocator.cpp **** 
  59:src/MemoryAllocator.cpp ****             ((AllocatedSpaceHeader*)startOfAllocatedSpace)->size = allocatedSize;
  60:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
  61:src/MemoryAllocator.cpp ****         }
  62:src/MemoryAllocator.cpp **** 
  63:src/MemoryAllocator.cpp ****         prev = curr;
 165              		.loc 1 63 9 is_stmt 1
  64:src/MemoryAllocator.cpp ****         curr = curr->next;
 166              		.loc 1 64 9
  63:src/MemoryAllocator.cpp ****         curr = curr->next;
 167              		.loc 1 63 14 is_stmt 0
 168 00ec 93050500 		mv	a1,a0
 169              		.loc 1 64 14
 170 00f0 03350501 		ld	a0,16(a0)
 171              	.LVL23:
 172              	.L12:
 173              	.LBE37:
  20:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = sizeInBlocks(curr->size);
 174              		.loc 1 20 5 is_stmt 1
  20:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = sizeInBlocks(curr->size);
 175              		.loc 1 20 11
GAS LISTING /tmp/ccgj8Ntl.s 			page 7


 176 00f4 63060506 		beqz	a0,.L1
 177              	.LBB56:
  21:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 178              		.loc 1 21 9
  21:src/MemoryAllocator.cpp ****         size_t allocatedSize;
 179              		.loc 1 21 50 is_stmt 0
 180 00f8 83378500 		ld	a5,8(a0)
 181              	.LVL24:
 182              	.LBB53:
 183              	.LBB54:
 184              		.loc 2 63 9 is_stmt 1
 185              		.loc 2 63 22 is_stmt 0
 186 00fc 93D66700 		srli	a3,a5,6
 187              		.loc 2 63 48
 188 0100 13F7F703 		andi	a4,a5,63
 189              		.loc 2 63 65
 190 0104 3337E000 		snez	a4,a4
 191              		.loc 2 63 68
 192 0108 3387E600 		add	a4,a3,a4
 193              	.LVL25:
 194              	.LBE54:
 195              	.LBE53:
  22:src/MemoryAllocator.cpp ****         void* startOfAllocatedSpace = curr->baseAddr;
 196              		.loc 1 22 9 is_stmt 1
  23:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
 197              		.loc 1 23 9
  23:src/MemoryAllocator.cpp ****         if(curr->size >= size && freeSegSizeInBlocks >= numOfBlocksToAllocate) {
 198              		.loc 1 23 15 is_stmt 0
 199 010c 83360500 		ld	a3,0(a0)
 200              	.LVL26:
  24:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
 201              		.loc 1 24 9 is_stmt 1
 202              	.LBB55:
 203 0110 E3EEC7FC 		bltu	a5,a2,.L5
  24:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
 204              		.loc 1 24 31 is_stmt 0 discriminator 1
 205 0114 E36C07FD 		bgtu	a6,a4,.L5
 206              	.LBB52:
  25:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
 207              		.loc 1 25 13 is_stmt 1
 208              	.LBB51:
 209 0118 E308E8F6 		beq	a6,a4,.L19
 210              	.LBB50:
  41:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
 211              		.loc 1 41 17
 212              	.LVL27:
 213              	.LBB44:
 214              	.LBB45:
  64:src/../h/MemoryAllocator.h ****     }
  65:src/../h/MemoryAllocator.h **** 
  66:src/../h/MemoryAllocator.h ****     // Vraca velicinu numOfBlocks blokova u bajtovima
  67:src/../h/MemoryAllocator.h ****     static inline size_t blocksInSize(size_t numOfBlocks) {
  68:src/../h/MemoryAllocator.h ****         return numOfBlocks * MEM_BLOCK_SIZE;
 215              		.loc 2 68 9
 216              		.loc 2 68 30 is_stmt 0
 217 011c 13186800 		slli	a6,a6,6
 218              	.LVL28:
GAS LISTING /tmp/ccgj8Ntl.s 			page 8


 219              	.LBE45:
 220              	.LBE44:
  42:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 221              		.loc 1 42 17 is_stmt 1
  42:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 222              		.loc 1 42 23 is_stmt 0
 223 0120 33870601 		add	a4,a3,a6
 224              	.LVL29:
  43:src/MemoryAllocator.cpp **** 
 225              		.loc 1 43 17 is_stmt 1
  43:src/MemoryAllocator.cpp **** 
 226              		.loc 1 43 24 is_stmt 0
 227 0124 B3870741 		sub	a5,a5,a6
 228              	.LVL30:
  45:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
 229              		.loc 1 45 17 is_stmt 1
  46:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 230              		.loc 1 46 17
  46:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 231              		.loc 1 46 34 is_stmt 0
 232 0128 2330E700 		sd	a4,0(a4)
 233              	.LVL31:
  47:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 234              		.loc 1 47 17 is_stmt 1
  47:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 235              		.loc 1 47 30 is_stmt 0
 236 012c 2334F700 		sd	a5,8(a4)
  48:src/MemoryAllocator.cpp **** 
 237              		.loc 1 48 17 is_stmt 1
  48:src/MemoryAllocator.cpp **** 
 238              		.loc 1 48 38 is_stmt 0
 239 0130 83370501 		ld	a5,16(a0)
 240              	.LVL32:
  48:src/MemoryAllocator.cpp **** 
 241              		.loc 1 48 30
 242 0134 2338F700 		sd	a5,16(a4)
  50:src/MemoryAllocator.cpp ****                     head = newSeg;
 243              		.loc 1 50 17 is_stmt 1
 244 0138 E38005FA 		beqz	a1,.L20
  54:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
 245              		.loc 1 54 21
 246              	.LVL33:
 247              	.LBB46:
 248              	.LBB47:
  40:src/../h/MemoryAllocator.h **** 
 249              		.loc 2 40 13
  40:src/../h/MemoryAllocator.h **** 
 250              		.loc 2 40 23 is_stmt 0
 251 013c 83B70501 		ld	a5,16(a1)
  40:src/../h/MemoryAllocator.h **** 
 252              		.loc 2 40 13
 253 0140 63860700 		beqz	a5,.L11
  42:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 254              		.loc 2 42 13 is_stmt 1
 255              	.LVL34:
  43:src/../h/MemoryAllocator.h ****         }
 256              		.loc 2 43 13
GAS LISTING /tmp/ccgj8Ntl.s 			page 9


  43:src/../h/MemoryAllocator.h ****         }
 257              		.loc 2 43 32 is_stmt 0
 258 0144 83B70701 		ld	a5,16(a5)
 259              	.LVL35:
  43:src/../h/MemoryAllocator.h ****         }
 260              		.loc 2 43 24
 261 0148 23B8F500 		sd	a5,16(a1)
 262              	.LVL36:
 263              	.L11:
 264              	.LBE47:
 265              	.LBE46:
  55:src/MemoryAllocator.cpp ****                 }
 266              		.loc 1 55 21 is_stmt 1
 267              	.LBB48:
 268              	.LBB49:
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 269              		.loc 2 48 13
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 270              		.loc 2 48 32 is_stmt 0
 271 014c 83B70501 		ld	a5,16(a1)
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 272              		.loc 2 48 24
 273 0150 2338F500 		sd	a5,16(a0)
  49:src/../h/MemoryAllocator.h ****         }
 274              		.loc 2 49 13 is_stmt 1
  49:src/../h/MemoryAllocator.h ****         }
 275              		.loc 2 49 24 is_stmt 0
 276 0154 23B8A500 		sd	a0,16(a1)
 277              	.LVL37:
 278              	.L9:
 279              	.LBE49:
 280              	.LBE48:
 281              	.LBE50:
 282              	.LBE51:
  59:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 283              		.loc 1 59 13 is_stmt 1
  59:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 284              		.loc 1 59 66 is_stmt 0
 285 0158 23B00601 		sd	a6,0(a3)
  60:src/MemoryAllocator.cpp ****         }
 286              		.loc 1 60 13 is_stmt 1
  60:src/MemoryAllocator.cpp ****         }
 287              		.loc 1 60 72 is_stmt 0
 288 015c 13858600 		addi	a0,a3,8
 289              	.LVL38:
 290              	.L1:
 291              	.LBE52:
 292              	.LBE55:
 293              	.LBE56:
  65:src/MemoryAllocator.cpp ****     }
  66:src/MemoryAllocator.cpp **** 
  67:src/MemoryAllocator.cpp ****     return nullptr; // ne postoji dovoljan slobodan prostor
  68:src/MemoryAllocator.cpp **** }
 294              		.loc 1 68 1
 295 0160 03348100 		ld	s0,8(sp)
 296              		.cfi_remember_state
 297              		.cfi_restore 8
GAS LISTING /tmp/ccgj8Ntl.s 			page 10


 298              		.cfi_def_cfa 2, 16
 299 0164 13010101 		addi	sp,sp,16
 300              		.cfi_def_cfa_offset 0
 301 0168 67800000 		jr	ra
 302              	.LVL39:
 303              	.L13:
 304              		.cfi_restore_state
  13:src/MemoryAllocator.cpp ****     }
 305              		.loc 1 13 16
 306 016c 13050000 		li	a0,0
 307              	.LVL40:
 308 0170 6FF01FFF 		j	.L1
 309              		.cfi_endproc
 310              	.LFE9:
 312              		.align	2
 313              		.globl	_ZN15MemoryAllocator8mem_freeEPv
 315              	_ZN15MemoryAllocator8mem_freeEPv:
 316              	.LFB10:
  69:src/MemoryAllocator.cpp **** 
  70:src/MemoryAllocator.cpp **** int MemoryAllocator::mem_free(void *memSegment) {
 317              		.loc 1 70 49 is_stmt 1
 318              		.cfi_startproc
 319              	.LVL41:
 320 0174 130101FF 		addi	sp,sp,-16
 321              		.cfi_def_cfa_offset 16
 322 0178 23348100 		sd	s0,8(sp)
 323              		.cfi_offset 8, -8
 324 017c 13040101 		addi	s0,sp,16
 325              		.cfi_def_cfa 8, 0
  71:src/MemoryAllocator.cpp ****     if(!memSegment || (size_t)memSegment - SegmentOffset < (size_t)HEAP_START_ADDR) return BAD_POIN
 326              		.loc 1 71 5
 327 0180 63000516 		beqz	a0,.L30
 328              		.loc 1 71 42 is_stmt 0 discriminator 2
 329 0184 130785FF 		addi	a4,a0,-8
 330              		.loc 1 71 58 discriminator 2
 331 0188 97070000 		la	a5,HEAP_START_ADDR
 331      83B70700 
 332 0190 83B70700 		ld	a5,0(a5)
 333              		.loc 1 71 20 discriminator 2
 334 0194 636AF714 		bltu	a4,a5,.L31
  72:src/MemoryAllocator.cpp **** 
  73:src/MemoryAllocator.cpp ****     size_t size = *(size_t*)((char*)memSegment - MemoryAllocator::SegmentOffset); // velicina koja 
 335              		.loc 1 73 5 is_stmt 1
 336              		.loc 1 73 12 is_stmt 0
 337 0198 833585FF 		ld	a1,-8(a0)
 338              	.LVL42:
  74:src/MemoryAllocator.cpp ****     memSegment = (void*)((char*)memSegment - MemoryAllocator::SegmentOffset); // pocetak segmenta u
 339              		.loc 1 74 5 is_stmt 1
  75:src/MemoryAllocator.cpp ****     if((char*)memSegment + size - 1 > (char*)HEAP_END_ADDR || memSegment == nullptr
 340              		.loc 1 75 5
 341              		.loc 1 75 33 is_stmt 0
 342 019c 9386F5FF 		addi	a3,a1,-1
 343 01a0 B306D700 		add	a3,a4,a3
 344              		.loc 1 75 39
 345 01a4 17060000 		la	a2,HEAP_END_ADDR
 345      03360600 
 346 01ac 03360600 		ld	a2,0(a2)
GAS LISTING /tmp/ccgj8Ntl.s 			page 11


  76:src/MemoryAllocator.cpp ****         || !isStartOfBlock(memSegment) || size < MEM_BLOCK_SIZE) {
 347              		.loc 1 76 40
 348 01b0 6360D614 		bgtu	a3,a2,.L32
  75:src/MemoryAllocator.cpp ****     if((char*)memSegment + size - 1 > (char*)HEAP_END_ADDR || memSegment == nullptr
 349              		.loc 1 75 60
 350 01b4 63020714 		beqz	a4,.L33
 351              	.LVL43:
 352              	.LBB57:
 353              	.LBB58:
  69:src/../h/MemoryAllocator.h ****     }
  70:src/../h/MemoryAllocator.h **** 
  71:src/../h/MemoryAllocator.h ****     // vraca relativnu adresu u odnosu na pocetak HEAP-a
  72:src/../h/MemoryAllocator.h ****     static inline size_t relativeAddress(void* address) {
  73:src/../h/MemoryAllocator.h ****         return (size_t)address - (size_t)HEAP_START_ADDR;
  74:src/../h/MemoryAllocator.h ****     }
  75:src/../h/MemoryAllocator.h **** 
  76:src/../h/MemoryAllocator.h ****     // vraca true ako je adresa pocetak bloka(relativno u odnosu na pocetak heap-a)
  77:src/../h/MemoryAllocator.h ****     static inline bool isStartOfBlock(void* address) {
  78:src/../h/MemoryAllocator.h ****         return relativeAddress(address) % MEM_BLOCK_SIZE == 0;
 354              		.loc 2 78 9 is_stmt 1
 355              	.LBB59:
 356              	.LBB60:
  73:src/../h/MemoryAllocator.h ****     }
 357              		.loc 2 73 9
  73:src/../h/MemoryAllocator.h ****     }
 358              		.loc 2 73 42 is_stmt 0
 359 01b8 B307F740 		sub	a5,a4,a5
 360              	.LVL44:
 361              	.LBE60:
 362              	.LBE59:
 363              		.loc 2 78 41
 364 01bc 93F7F703 		andi	a5,a5,63
 365              	.LVL45:
 366              	.LBE58:
 367              	.LBE57:
 368              		.loc 1 76 9
 369 01c0 63900714 		bnez	a5,.L34
 370              		.loc 1 76 40 discriminator 3
 371 01c4 9307F003 		li	a5,63
 372 01c8 63F0B714 		bleu	a1,a5,.L35
  77:src/MemoryAllocator.cpp ****         return BAD_POINTER;
  78:src/MemoryAllocator.cpp ****     }
  79:src/MemoryAllocator.cpp **** 
  80:src/MemoryAllocator.cpp ****     if(head == HEAP_END_ADDR) { // ako je memorija puna onda samo oslobadja dati deo
 373              		.loc 1 80 5 is_stmt 1
 374              	.LBB61:
 375              		.loc 1 80 8 is_stmt 0
 376 01cc 97070000 		ld	a5,.LANCHOR0
 376      83B70700 
 377              		.loc 1 80 5
 378 01d4 6300F602 		beq	a2,a5,.L41
 379              	.LBE61:
  81:src/MemoryAllocator.cpp ****         FreeSegment* newFreeSegment = (FreeSegment*)memSegment;
  82:src/MemoryAllocator.cpp ****         newFreeSegment->size = size;
  83:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
  84:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
  85:src/MemoryAllocator.cpp **** 
GAS LISTING /tmp/ccgj8Ntl.s 			page 12


  86:src/MemoryAllocator.cpp ****         head = newFreeSegment;
  87:src/MemoryAllocator.cpp ****         return 0;
  88:src/MemoryAllocator.cpp ****     }
  89:src/MemoryAllocator.cpp **** 
  90:src/MemoryAllocator.cpp ****     FreeSegment* curr = head, *prev = nullptr;
 380              		.loc 1 90 32
 381 01d8 13060000 		li	a2,0
 382              	.L23:
 383              	.LVL46:
  91:src/MemoryAllocator.cpp ****     // Ako nema greske posle while: ((char*)prev->baseAddr + prev->size) <= memSegment < curr->base
  92:src/MemoryAllocator.cpp ****     while(curr != nullptr && (char*)curr->baseAddr < (char*)memSegment) {
 384              		.loc 1 92 5 is_stmt 1
 385              		.loc 1 92 27
 386 01dc 638A0702 		beqz	a5,.L24
 387              		.loc 1 92 43 is_stmt 0 discriminator 1
 388 01e0 83B60700 		ld	a3,0(a5)
 389              		.loc 1 92 27 discriminator 1
 390 01e4 63F6E602 		bgeu	a3,a4,.L24
  93:src/MemoryAllocator.cpp ****         prev = curr;
 391              		.loc 1 93 9 is_stmt 1
 392              	.LVL47:
  94:src/MemoryAllocator.cpp ****         curr = curr->next;
 393              		.loc 1 94 9
  93:src/MemoryAllocator.cpp ****         prev = curr;
 394              		.loc 1 93 14 is_stmt 0
 395 01e8 13860700 		mv	a2,a5
 396              		.loc 1 94 14
 397 01ec 83B70701 		ld	a5,16(a5)
 398              	.LVL48:
  92:src/MemoryAllocator.cpp ****         prev = curr;
 399              		.loc 1 92 5
 400 01f0 6FF0DFFE 		j	.L23
 401              	.LVL49:
 402              	.L41:
 403              	.LBB63:
 404              	.LBB62:
  81:src/MemoryAllocator.cpp ****         newFreeSegment->size = size;
 405              		.loc 1 81 9 is_stmt 1
  82:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
 406              		.loc 1 82 9
  82:src/MemoryAllocator.cpp ****         newFreeSegment->baseAddr = memSegment;
 407              		.loc 1 82 30 is_stmt 0
 408 01f4 2330B500 		sd	a1,0(a0)
  83:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
 409              		.loc 1 83 9 is_stmt 1
  83:src/MemoryAllocator.cpp ****         newFreeSegment->next = nullptr;
 410              		.loc 1 83 34 is_stmt 0
 411 01f8 233CE5FE 		sd	a4,-8(a0)
  84:src/MemoryAllocator.cpp **** 
 412              		.loc 1 84 9 is_stmt 1
  84:src/MemoryAllocator.cpp **** 
 413              		.loc 1 84 30 is_stmt 0
 414 01fc 23340500 		sd	zero,8(a0)
  86:src/MemoryAllocator.cpp ****         return 0;
 415              		.loc 1 86 9 is_stmt 1
  86:src/MemoryAllocator.cpp ****         return 0;
 416              		.loc 1 86 14 is_stmt 0
GAS LISTING /tmp/ccgj8Ntl.s 			page 13


 417 0200 97070000 		sd	a4,.LANCHOR0,a5
 417      23B0E700 
  87:src/MemoryAllocator.cpp ****     }
 418              		.loc 1 87 9 is_stmt 1
  87:src/MemoryAllocator.cpp ****     }
 419              		.loc 1 87 16 is_stmt 0
 420 0208 13050000 		li	a0,0
 421 020c 6F008004 		j	.L22
 422              	.LVL50:
 423              	.L24:
 424              	.LBE62:
 425              	.LBE63:
  95:src/MemoryAllocator.cpp ****     }
  96:src/MemoryAllocator.cpp **** 
  97:src/MemoryAllocator.cpp ****     if(prev == nullptr) {
 426              		.loc 1 97 5 is_stmt 1
 427              	.LBB64:
 428 0210 63080604 		beqz	a2,.L42
 429              	.LBB65:
  98:src/MemoryAllocator.cpp ****         if(curr == nullptr) { // nije se nijednom pozvao mem_alloc
  99:src/MemoryAllocator.cpp ****             return BAD_POINTER;
 100:src/MemoryAllocator.cpp ****         }
 101:src/MemoryAllocator.cpp ****         else {
 102:src/MemoryAllocator.cpp ****             FreeSegment* newFreeSegment = (FreeSegment*)memSegment;
 103:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 104:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 105:src/MemoryAllocator.cpp **** 
 106:src/MemoryAllocator.cpp ****             if((char*)head->baseAddr == ((char*)newFreeSegment->baseAddr + newFreeSegment->size)) {
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 108:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 109:src/MemoryAllocator.cpp ****             }
 110:src/MemoryAllocator.cpp ****             else {
 111:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head;
 112:src/MemoryAllocator.cpp ****             }
 113:src/MemoryAllocator.cpp ****             head = newFreeSegment;
 114:src/MemoryAllocator.cpp **** 
 115:src/MemoryAllocator.cpp ****             return 0;
 116:src/MemoryAllocator.cpp ****         }
 117:src/MemoryAllocator.cpp ****     }
 118:src/MemoryAllocator.cpp ****     else {
 119:src/MemoryAllocator.cpp ****         if((char*)prev->baseAddr + prev->size == (char*)memSegment) { // spajamo prethodni i novi s
 430              		.loc 1 119 9
 431              	.LBB66:
 432              		.loc 1 119 25 is_stmt 0
 433 0214 83360600 		ld	a3,0(a2)
 434              		.loc 1 119 42
 435 0218 03388600 		ld	a6,8(a2)
 436              		.loc 1 119 34
 437 021c B3860601 		add	a3,a3,a6
 438              		.loc 1 119 9
 439 0220 638AE608 		beq	a3,a4,.L43
 440              	.LBB67:
 120:src/MemoryAllocator.cpp ****             prev->size += size;
 121:src/MemoryAllocator.cpp ****         }
 122:src/MemoryAllocator.cpp ****         else {
 123:src/MemoryAllocator.cpp ****             FreeSegment *newFreeSegment = (FreeSegment *) memSegment;
 441              		.loc 1 123 13 is_stmt 1
GAS LISTING /tmp/ccgj8Ntl.s 			page 14


 442              	.LVL51:
 124:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 443              		.loc 1 124 13
 444              		.loc 1 124 34 is_stmt 0
 445 0224 2330B500 		sd	a1,0(a0)
 125:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 446              		.loc 1 125 13 is_stmt 1
 447              		.loc 1 125 38 is_stmt 0
 448 0228 233CE5FE 		sd	a4,-8(a0)
 126:src/MemoryAllocator.cpp **** 
 127:src/MemoryAllocator.cpp ****             FreeSegment::add(prev, newFreeSegment); // ulancavamo prev i newFreeSegment
 449              		.loc 1 127 13 is_stmt 1
 450              	.LVL52:
 451              	.LBB68:
 452              	.LBB69:
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 453              		.loc 2 48 13
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 454              		.loc 2 48 32 is_stmt 0
 455 022c 83360601 		ld	a3,16(a2)
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 456              		.loc 2 48 24
 457 0230 2334D500 		sd	a3,8(a0)
  49:src/../h/MemoryAllocator.h ****         }
 458              		.loc 2 49 13 is_stmt 1
  49:src/../h/MemoryAllocator.h ****         }
 459              		.loc 2 49 24 is_stmt 0
 460 0234 2338E600 		sd	a4,16(a2)
 461              	.LVL53:
 462              	.LBE69:
 463              	.LBE68:
 128:src/MemoryAllocator.cpp ****             prev = newFreeSegment;
 464              		.loc 1 128 13 is_stmt 1
 465              	.L29:
 466              	.LBE67:
 467              	.LBE66:
 129:src/MemoryAllocator.cpp ****         }
 130:src/MemoryAllocator.cpp **** 
 131:src/MemoryAllocator.cpp ****         if(curr && (char*)curr->baseAddr == ((char*)prev->baseAddr + prev->size)) { // ako postoji 
 468              		.loc 1 131 9
 469 0238 6380070E 		beqz	a5,.L38
 470              		.loc 1 131 33 is_stmt 0 discriminator 1
 471 023c 83B50700 		ld	a1,0(a5)
 472              		.loc 1 131 59 discriminator 1
 473 0240 83360700 		ld	a3,0(a4)
 474              		.loc 1 131 76 discriminator 1
 475 0244 03368700 		ld	a2,8(a4)
 476              		.loc 1 131 68 discriminator 1
 477 0248 B386C600 		add	a3,a3,a2
 478              		.loc 1 131 17 discriminator 1
 479 024c 638CD506 		beq	a1,a3,.L44
 480              	.LBE65:
 481              	.LBE64:
 132:src/MemoryAllocator.cpp ****             prev->size += curr->size;
 133:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 134:src/MemoryAllocator.cpp ****         }
 135:src/MemoryAllocator.cpp ****     }
GAS LISTING /tmp/ccgj8Ntl.s 			page 15


 136:src/MemoryAllocator.cpp **** 
 137:src/MemoryAllocator.cpp ****     return 0;
 482              		.loc 1 137 12
 483 0250 13050000 		li	a0,0
 484              	.LVL54:
 485              	.L22:
 138:src/MemoryAllocator.cpp **** }
 486              		.loc 1 138 1
 487 0254 03348100 		ld	s0,8(sp)
 488              		.cfi_remember_state
 489              		.cfi_restore 8
 490              		.cfi_def_cfa 2, 16
 491 0258 13010101 		addi	sp,sp,16
 492              		.cfi_def_cfa_offset 0
 493 025c 67800000 		jr	ra
 494              	.LVL55:
 495              	.L42:
 496              		.cfi_restore_state
  98:src/MemoryAllocator.cpp ****             return BAD_POINTER;
 497              		.loc 1 98 9 is_stmt 1
 498              	.LBB76:
 499              	.LBB71:
 500 0260 6388070A 		beqz	a5,.L37
 501              	.LBB72:
 102:src/MemoryAllocator.cpp ****             newFreeSegment->size = size;
 502              		.loc 1 102 13
 503              	.LVL56:
 103:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 504              		.loc 1 103 13
 103:src/MemoryAllocator.cpp ****             newFreeSegment->baseAddr = memSegment;
 505              		.loc 1 103 34 is_stmt 0
 506 0264 2330B500 		sd	a1,0(a0)
 104:src/MemoryAllocator.cpp **** 
 507              		.loc 1 104 13 is_stmt 1
 104:src/MemoryAllocator.cpp **** 
 508              		.loc 1 104 38 is_stmt 0
 509 0268 233CE5FE 		sd	a4,-8(a0)
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 510              		.loc 1 106 13 is_stmt 1
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 511              		.loc 1 106 16 is_stmt 0
 512 026c 97070000 		ld	a5,.LANCHOR0
 512      83B70700 
 513              	.LVL57:
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 514              		.loc 1 106 29
 515 0274 03B60700 		ld	a2,0(a5)
 516              	.LVL58:
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 517              		.loc 1 106 74
 518 0278 B306B700 		add	a3,a4,a1
 106:src/MemoryAllocator.cpp ****                 newFreeSegment->size += head->size;
 519              		.loc 1 106 13
 520 027c 630CD600 		beq	a2,a3,.L45
 111:src/MemoryAllocator.cpp ****             }
 521              		.loc 1 111 17 is_stmt 1
 111:src/MemoryAllocator.cpp ****             }
GAS LISTING /tmp/ccgj8Ntl.s 			page 16


 522              		.loc 1 111 38 is_stmt 0
 523 0280 2334F500 		sd	a5,8(a0)
 524              	.LVL59:
 525              	.L27:
 113:src/MemoryAllocator.cpp **** 
 526              		.loc 1 113 13 is_stmt 1
 113:src/MemoryAllocator.cpp **** 
 527              		.loc 1 113 18 is_stmt 0
 528 0284 97070000 		sd	a4,.LANCHOR0,a5
 528      23B0E700 
 115:src/MemoryAllocator.cpp ****         }
 529              		.loc 1 115 13 is_stmt 1
 115:src/MemoryAllocator.cpp ****         }
 530              		.loc 1 115 20 is_stmt 0
 531 028c 13050000 		li	a0,0
 532 0290 6FF05FFC 		j	.L22
 533              	.LVL60:
 534              	.L45:
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 535              		.loc 1 107 17 is_stmt 1
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 536              		.loc 1 107 47 is_stmt 0
 537 0294 83B78700 		ld	a5,8(a5)
 107:src/MemoryAllocator.cpp ****                 newFreeSegment->next = head->next;
 538              		.loc 1 107 38
 539 0298 B385B700 		add	a1,a5,a1
 540              	.LVL61:
 541 029c 2330B500 		sd	a1,0(a0)
 542              	.LVL62:
 108:src/MemoryAllocator.cpp ****             }
 543              		.loc 1 108 17 is_stmt 1
 108:src/MemoryAllocator.cpp ****             }
 544              		.loc 1 108 46 is_stmt 0
 545 02a0 97070000 		ld	a5,.LANCHOR0
 545      83B70700 
 546 02a8 83B70701 		ld	a5,16(a5)
 108:src/MemoryAllocator.cpp ****             }
 547              		.loc 1 108 38
 548 02ac 2334F500 		sd	a5,8(a0)
 549 02b0 6FF05FFD 		j	.L27
 550              	.LVL63:
 551              	.L43:
 552              	.LBE72:
 553              	.LBE71:
 554              	.LBB73:
 555              	.LBB70:
 120:src/MemoryAllocator.cpp ****         }
 556              		.loc 1 120 13 is_stmt 1
 120:src/MemoryAllocator.cpp ****         }
 557              		.loc 1 120 24 is_stmt 0
 558 02b4 B305B800 		add	a1,a6,a1
 559              	.LVL64:
 560 02b8 2334B600 		sd	a1,8(a2)
 561              	.LVL65:
 562 02bc 13070600 		mv	a4,a2
 563              	.LVL66:
 564 02c0 6FF09FF7 		j	.L29
GAS LISTING /tmp/ccgj8Ntl.s 			page 17


 565              	.LVL67:
 566              	.L44:
 567              	.LBE70:
 132:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 568              		.loc 1 132 13 is_stmt 1
 132:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 569              		.loc 1 132 33 is_stmt 0
 570 02c4 83B68700 		ld	a3,8(a5)
 132:src/MemoryAllocator.cpp ****             prev->next = curr->next;
 571              		.loc 1 132 24
 572 02c8 3306D600 		add	a2,a2,a3
 573 02cc 2334C700 		sd	a2,8(a4)
 133:src/MemoryAllocator.cpp ****         }
 574              		.loc 1 133 13 is_stmt 1
 133:src/MemoryAllocator.cpp ****         }
 575              		.loc 1 133 32 is_stmt 0
 576 02d0 83B70701 		ld	a5,16(a5)
 577              	.LVL68:
 133:src/MemoryAllocator.cpp ****         }
 578              		.loc 1 133 24
 579 02d4 2338F700 		sd	a5,16(a4)
 580              	.LBE73:
 581              	.LBE76:
 137:src/MemoryAllocator.cpp **** }
 582              		.loc 1 137 12
 583 02d8 13050000 		li	a0,0
 584              	.LVL69:
 585              	.LBB77:
 586              	.LBB74:
 587 02dc 6FF09FF7 		j	.L22
 588              	.LVL70:
 589              	.L30:
 590              	.LBE74:
 591              	.LBE77:
  71:src/MemoryAllocator.cpp **** 
 592              		.loc 1 71 92
 593 02e0 1305F0FF 		li	a0,-1
 594              	.LVL71:
 595 02e4 6FF01FF7 		j	.L22
 596              	.LVL72:
 597              	.L31:
 598 02e8 1305F0FF 		li	a0,-1
 599              	.LVL73:
 600 02ec 6FF09FF6 		j	.L22
 601              	.LVL74:
 602              	.L32:
  77:src/MemoryAllocator.cpp ****     }
 603              		.loc 1 77 16
 604 02f0 1305F0FF 		li	a0,-1
 605 02f4 6FF01FF6 		j	.L22
 606              	.L33:
 607 02f8 1305F0FF 		li	a0,-1
 608 02fc 6FF09FF5 		j	.L22
 609              	.L34:
 610 0300 1305F0FF 		li	a0,-1
 611 0304 6FF01FF5 		j	.L22
 612              	.L35:
GAS LISTING /tmp/ccgj8Ntl.s 			page 18


 613 0308 1305F0FF 		li	a0,-1
 614 030c 6FF09FF4 		j	.L22
 615              	.LVL75:
 616              	.L37:
 617              	.LBB78:
 618              	.LBB75:
  99:src/MemoryAllocator.cpp ****         }
 619              		.loc 1 99 20
 620 0310 1305F0FF 		li	a0,-1
 621 0314 6FF01FF4 		j	.L22
 622              	.LVL76:
 623              	.L38:
 624              	.LBE75:
 625              	.LBE78:
 137:src/MemoryAllocator.cpp **** }
 626              		.loc 1 137 12
 627 0318 13050000 		li	a0,0
 628              	.LVL77:
 629 031c 6FF09FF3 		j	.L22
 630              		.cfi_endproc
 631              	.LFE10:
 633              		.globl	_ZN15MemoryAllocator4headE
 634              		.bss
 635              		.align	3
 636              		.set	.LANCHOR0,. + 0
 639              	_ZN15MemoryAllocator4headE:
 640 0000 00000000 		.zero	8
 640      00000000 
 641              		.text
 642              	.Letext0:
 643              		.file 3 "src/../h/../lib/hw.h"
GAS LISTING /tmp/ccgj8Ntl.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccgj8Ntl.s:9      .text:0000000000000000 _ZN15MemoryAllocator9mem_allocEm
     /tmp/ccgj8Ntl.s:13     .text:0000000000000000 .L0 
     /tmp/ccgj8Ntl.s:15     .text:0000000000000000 .L0 
     /tmp/ccgj8Ntl.s:16     .text:0000000000000004 .L0 
     /tmp/ccgj8Ntl.s:18     .text:0000000000000008 .L0 
     /tmp/ccgj8Ntl.s:20     .text:000000000000000c .L0 
     /tmp/ccgj8Ntl.s:22     .text:000000000000000c .L0 
     /tmp/ccgj8Ntl.s:23     .text:000000000000000c .L0 
     /tmp/ccgj8Ntl.s:25     .text:0000000000000014 .L0 
     /tmp/ccgj8Ntl.s:27     .text:0000000000000018 .L0 
     /tmp/ccgj8Ntl.s:28     .text:0000000000000018 .L0 
     /tmp/ccgj8Ntl.s:31     .text:0000000000000024 .L0 
     /tmp/ccgj8Ntl.s:34     .text:0000000000000028 .L0 
     /tmp/ccgj8Ntl.s:35     .text:0000000000000028 .L0 
     /tmp/ccgj8Ntl.s:41     .text:000000000000002c .L0 
     /tmp/ccgj8Ntl.s:42     .text:000000000000002c .L0 
     /tmp/ccgj8Ntl.s:43     .text:000000000000002c .L0 
     /tmp/ccgj8Ntl.s:45     .text:0000000000000030 .L0 
     /tmp/ccgj8Ntl.s:47     .text:0000000000000034 .L0 
     /tmp/ccgj8Ntl.s:49     .text:0000000000000038 .L0 
     /tmp/ccgj8Ntl.s:54     .text:000000000000003c .L0 
     /tmp/ccgj8Ntl.s:55     .text:000000000000003c .L0 
     /tmp/ccgj8Ntl.s:58     .text:0000000000000044 .L0 
     /tmp/ccgj8Ntl.s:63     .text:000000000000004c .L0 
     /tmp/ccgj8Ntl.s:64     .text:000000000000004c .L0 
     /tmp/ccgj8Ntl.s:68     .text:0000000000000060 .L0 
     /tmp/ccgj8Ntl.s:69     .text:0000000000000060 .L0 
     /tmp/ccgj8Ntl.s:71     .text:0000000000000064 .L0 
     /tmp/ccgj8Ntl.s:72     .text:0000000000000064 .L0 
     /tmp/ccgj8Ntl.s:77     .text:0000000000000078 .L0 
     /tmp/ccgj8Ntl.s:79     .text:000000000000007c .L0 
     /tmp/ccgj8Ntl.s:81     .text:0000000000000080 .L0 
     /tmp/ccgj8Ntl.s:82     .text:0000000000000080 .L0 
     /tmp/ccgj8Ntl.s:91     .text:0000000000000088 .L0 
     /tmp/ccgj8Ntl.s:92     .text:0000000000000088 .L0 
     /tmp/ccgj8Ntl.s:97     .text:000000000000008c .L0 
     /tmp/ccgj8Ntl.s:98     .text:000000000000008c .L0 
     /tmp/ccgj8Ntl.s:99     .text:000000000000008c .L0 
     /tmp/ccgj8Ntl.s:102    .text:0000000000000090 .L0 
     /tmp/ccgj8Ntl.s:105    .text:0000000000000094 .L0 
     /tmp/ccgj8Ntl.s:106    .text:0000000000000094 .L0 
     /tmp/ccgj8Ntl.s:107    .text:0000000000000094 .L0 
     /tmp/ccgj8Ntl.s:110    .text:0000000000000098 .L0 
     /tmp/ccgj8Ntl.s:115    .text:000000000000009c .L0 
     /tmp/ccgj8Ntl.s:121    .text:00000000000000a4 .L0 
     /tmp/ccgj8Ntl.s:122    .text:00000000000000a4 .L0 
     /tmp/ccgj8Ntl.s:125    .text:00000000000000a8 .L0 
     /tmp/ccgj8Ntl.s:127    .text:00000000000000ac .L0 
     /tmp/ccgj8Ntl.s:128    .text:00000000000000ac .L0 
     /tmp/ccgj8Ntl.s:131    .text:00000000000000b4 .L0 
     /tmp/ccgj8Ntl.s:137    .text:00000000000000bc .L0 
     /tmp/ccgj8Ntl.s:138    .text:00000000000000bc .L0 
     /tmp/ccgj8Ntl.s:143    .text:00000000000000d0 .L0 
     /tmp/ccgj8Ntl.s:150    .text:00000000000000d8 .L0 
     /tmp/ccgj8Ntl.s:151    .text:00000000000000d8 .L0 
GAS LISTING /tmp/ccgj8Ntl.s 			page 20


     /tmp/ccgj8Ntl.s:157    .text:00000000000000e4 .L0 
     /tmp/ccgj8Ntl.s:166    .text:00000000000000ec .L0 
     /tmp/ccgj8Ntl.s:167    .text:00000000000000ec .L0 
     /tmp/ccgj8Ntl.s:168    .text:00000000000000ec .L0 
     /tmp/ccgj8Ntl.s:170    .text:00000000000000f0 .L0 
     /tmp/ccgj8Ntl.s:175    .text:00000000000000f4 .L0 
     /tmp/ccgj8Ntl.s:176    .text:00000000000000f4 .L0 
     /tmp/ccgj8Ntl.s:179    .text:00000000000000f8 .L0 
     /tmp/ccgj8Ntl.s:180    .text:00000000000000f8 .L0 
     /tmp/ccgj8Ntl.s:185    .text:00000000000000fc .L0 
     /tmp/ccgj8Ntl.s:186    .text:00000000000000fc .L0 
     /tmp/ccgj8Ntl.s:188    .text:0000000000000100 .L0 
     /tmp/ccgj8Ntl.s:190    .text:0000000000000104 .L0 
     /tmp/ccgj8Ntl.s:192    .text:0000000000000108 .L0 
     /tmp/ccgj8Ntl.s:197    .text:000000000000010c .L0 
     /tmp/ccgj8Ntl.s:198    .text:000000000000010c .L0 
     /tmp/ccgj8Ntl.s:199    .text:000000000000010c .L0 
     /tmp/ccgj8Ntl.s:203    .text:0000000000000110 .L0 
     /tmp/ccgj8Ntl.s:205    .text:0000000000000114 .L0 
     /tmp/ccgj8Ntl.s:209    .text:0000000000000118 .L0 
     /tmp/ccgj8Ntl.s:215    .text:000000000000011c .L0 
     /tmp/ccgj8Ntl.s:216    .text:000000000000011c .L0 
     /tmp/ccgj8Ntl.s:217    .text:000000000000011c .L0 
     /tmp/ccgj8Ntl.s:222    .text:0000000000000120 .L0 
     /tmp/ccgj8Ntl.s:223    .text:0000000000000120 .L0 
     /tmp/ccgj8Ntl.s:226    .text:0000000000000124 .L0 
     /tmp/ccgj8Ntl.s:227    .text:0000000000000124 .L0 
     /tmp/ccgj8Ntl.s:230    .text:0000000000000128 .L0 
     /tmp/ccgj8Ntl.s:231    .text:0000000000000128 .L0 
     /tmp/ccgj8Ntl.s:232    .text:0000000000000128 .L0 
     /tmp/ccgj8Ntl.s:235    .text:000000000000012c .L0 
     /tmp/ccgj8Ntl.s:236    .text:000000000000012c .L0 
     /tmp/ccgj8Ntl.s:238    .text:0000000000000130 .L0 
     /tmp/ccgj8Ntl.s:239    .text:0000000000000130 .L0 
     /tmp/ccgj8Ntl.s:242    .text:0000000000000134 .L0 
     /tmp/ccgj8Ntl.s:244    .text:0000000000000138 .L0 
     /tmp/ccgj8Ntl.s:249    .text:000000000000013c .L0 
     /tmp/ccgj8Ntl.s:250    .text:000000000000013c .L0 
     /tmp/ccgj8Ntl.s:251    .text:000000000000013c .L0 
     /tmp/ccgj8Ntl.s:253    .text:0000000000000140 .L0 
     /tmp/ccgj8Ntl.s:256    .text:0000000000000144 .L0 
     /tmp/ccgj8Ntl.s:257    .text:0000000000000144 .L0 
     /tmp/ccgj8Ntl.s:258    .text:0000000000000144 .L0 
     /tmp/ccgj8Ntl.s:261    .text:0000000000000148 .L0 
     /tmp/ccgj8Ntl.s:269    .text:000000000000014c .L0 
     /tmp/ccgj8Ntl.s:270    .text:000000000000014c .L0 
     /tmp/ccgj8Ntl.s:271    .text:000000000000014c .L0 
     /tmp/ccgj8Ntl.s:273    .text:0000000000000150 .L0 
     /tmp/ccgj8Ntl.s:275    .text:0000000000000154 .L0 
     /tmp/ccgj8Ntl.s:276    .text:0000000000000154 .L0 
     /tmp/ccgj8Ntl.s:284    .text:0000000000000158 .L0 
     /tmp/ccgj8Ntl.s:285    .text:0000000000000158 .L0 
     /tmp/ccgj8Ntl.s:287    .text:000000000000015c .L0 
     /tmp/ccgj8Ntl.s:288    .text:000000000000015c .L0 
     /tmp/ccgj8Ntl.s:295    .text:0000000000000160 .L0 
     /tmp/ccgj8Ntl.s:296    .text:0000000000000164 .L0 
     /tmp/ccgj8Ntl.s:297    .text:0000000000000164 .L0 
GAS LISTING /tmp/ccgj8Ntl.s 			page 21


     /tmp/ccgj8Ntl.s:298    .text:0000000000000164 .L0 
     /tmp/ccgj8Ntl.s:300    .text:0000000000000168 .L0 
     /tmp/ccgj8Ntl.s:304    .text:000000000000016c .L0 
     /tmp/ccgj8Ntl.s:306    .text:000000000000016c .L0 
     /tmp/ccgj8Ntl.s:309    .text:0000000000000174 .L0 
     /tmp/ccgj8Ntl.s:315    .text:0000000000000174 _ZN15MemoryAllocator8mem_freeEPv
     /tmp/ccgj8Ntl.s:318    .text:0000000000000174 .L0 
     /tmp/ccgj8Ntl.s:320    .text:0000000000000174 .L0 
     /tmp/ccgj8Ntl.s:321    .text:0000000000000178 .L0 
     /tmp/ccgj8Ntl.s:323    .text:000000000000017c .L0 
     /tmp/ccgj8Ntl.s:325    .text:0000000000000180 .L0 
     /tmp/ccgj8Ntl.s:327    .text:0000000000000180 .L0 
     /tmp/ccgj8Ntl.s:329    .text:0000000000000184 .L0 
     /tmp/ccgj8Ntl.s:331    .text:0000000000000188 .L0 
     /tmp/ccgj8Ntl.s:334    .text:0000000000000194 .L0 
     /tmp/ccgj8Ntl.s:336    .text:0000000000000198 .L0 
     /tmp/ccgj8Ntl.s:337    .text:0000000000000198 .L0 
     /tmp/ccgj8Ntl.s:340    .text:000000000000019c .L0 
     /tmp/ccgj8Ntl.s:341    .text:000000000000019c .L0 
     /tmp/ccgj8Ntl.s:342    .text:000000000000019c .L0 
     /tmp/ccgj8Ntl.s:345    .text:00000000000001a4 .L0 
     /tmp/ccgj8Ntl.s:348    .text:00000000000001b0 .L0 
     /tmp/ccgj8Ntl.s:350    .text:00000000000001b4 .L0 
     /tmp/ccgj8Ntl.s:357    .text:00000000000001b8 .L0 
     /tmp/ccgj8Ntl.s:358    .text:00000000000001b8 .L0 
     /tmp/ccgj8Ntl.s:359    .text:00000000000001b8 .L0 
     /tmp/ccgj8Ntl.s:364    .text:00000000000001bc .L0 
     /tmp/ccgj8Ntl.s:369    .text:00000000000001c0 .L0 
     /tmp/ccgj8Ntl.s:371    .text:00000000000001c4 .L0 
     /tmp/ccgj8Ntl.s:375    .text:00000000000001cc .L0 
     /tmp/ccgj8Ntl.s:376    .text:00000000000001cc .L0 
     /tmp/ccgj8Ntl.s:378    .text:00000000000001d4 .L0 
     /tmp/ccgj8Ntl.s:381    .text:00000000000001d8 .L0 
     /tmp/ccgj8Ntl.s:385    .text:00000000000001dc .L0 
     /tmp/ccgj8Ntl.s:386    .text:00000000000001dc .L0 
     /tmp/ccgj8Ntl.s:388    .text:00000000000001e0 .L0 
     /tmp/ccgj8Ntl.s:390    .text:00000000000001e4 .L0 
     /tmp/ccgj8Ntl.s:393    .text:00000000000001e8 .L0 
     /tmp/ccgj8Ntl.s:394    .text:00000000000001e8 .L0 
     /tmp/ccgj8Ntl.s:395    .text:00000000000001e8 .L0 
     /tmp/ccgj8Ntl.s:397    .text:00000000000001ec .L0 
     /tmp/ccgj8Ntl.s:400    .text:00000000000001f0 .L0 
     /tmp/ccgj8Ntl.s:406    .text:00000000000001f4 .L0 
     /tmp/ccgj8Ntl.s:407    .text:00000000000001f4 .L0 
     /tmp/ccgj8Ntl.s:408    .text:00000000000001f4 .L0 
     /tmp/ccgj8Ntl.s:410    .text:00000000000001f8 .L0 
     /tmp/ccgj8Ntl.s:411    .text:00000000000001f8 .L0 
     /tmp/ccgj8Ntl.s:413    .text:00000000000001fc .L0 
     /tmp/ccgj8Ntl.s:414    .text:00000000000001fc .L0 
     /tmp/ccgj8Ntl.s:416    .text:0000000000000200 .L0 
     /tmp/ccgj8Ntl.s:417    .text:0000000000000200 .L0 
     /tmp/ccgj8Ntl.s:419    .text:0000000000000208 .L0 
     /tmp/ccgj8Ntl.s:420    .text:0000000000000208 .L0 
     /tmp/ccgj8Ntl.s:428    .text:0000000000000210 .L0 
     /tmp/ccgj8Ntl.s:432    .text:0000000000000214 .L0 
     /tmp/ccgj8Ntl.s:433    .text:0000000000000214 .L0 
     /tmp/ccgj8Ntl.s:435    .text:0000000000000218 .L0 
GAS LISTING /tmp/ccgj8Ntl.s 			page 22


     /tmp/ccgj8Ntl.s:437    .text:000000000000021c .L0 
     /tmp/ccgj8Ntl.s:439    .text:0000000000000220 .L0 
     /tmp/ccgj8Ntl.s:443    .text:0000000000000224 .L0 
     /tmp/ccgj8Ntl.s:444    .text:0000000000000224 .L0 
     /tmp/ccgj8Ntl.s:445    .text:0000000000000224 .L0 
     /tmp/ccgj8Ntl.s:447    .text:0000000000000228 .L0 
     /tmp/ccgj8Ntl.s:448    .text:0000000000000228 .L0 
     /tmp/ccgj8Ntl.s:453    .text:000000000000022c .L0 
     /tmp/ccgj8Ntl.s:454    .text:000000000000022c .L0 
     /tmp/ccgj8Ntl.s:455    .text:000000000000022c .L0 
     /tmp/ccgj8Ntl.s:457    .text:0000000000000230 .L0 
     /tmp/ccgj8Ntl.s:459    .text:0000000000000234 .L0 
     /tmp/ccgj8Ntl.s:460    .text:0000000000000234 .L0 
     /tmp/ccgj8Ntl.s:468    .text:0000000000000238 .L0 
     /tmp/ccgj8Ntl.s:469    .text:0000000000000238 .L0 
     /tmp/ccgj8Ntl.s:471    .text:000000000000023c .L0 
     /tmp/ccgj8Ntl.s:473    .text:0000000000000240 .L0 
     /tmp/ccgj8Ntl.s:475    .text:0000000000000244 .L0 
     /tmp/ccgj8Ntl.s:477    .text:0000000000000248 .L0 
     /tmp/ccgj8Ntl.s:479    .text:000000000000024c .L0 
     /tmp/ccgj8Ntl.s:483    .text:0000000000000250 .L0 
     /tmp/ccgj8Ntl.s:487    .text:0000000000000254 .L0 
     /tmp/ccgj8Ntl.s:488    .text:0000000000000258 .L0 
     /tmp/ccgj8Ntl.s:489    .text:0000000000000258 .L0 
     /tmp/ccgj8Ntl.s:490    .text:0000000000000258 .L0 
     /tmp/ccgj8Ntl.s:492    .text:000000000000025c .L0 
     /tmp/ccgj8Ntl.s:496    .text:0000000000000260 .L0 
     /tmp/ccgj8Ntl.s:500    .text:0000000000000260 .L0 
     /tmp/ccgj8Ntl.s:504    .text:0000000000000264 .L0 
     /tmp/ccgj8Ntl.s:505    .text:0000000000000264 .L0 
     /tmp/ccgj8Ntl.s:506    .text:0000000000000264 .L0 
     /tmp/ccgj8Ntl.s:508    .text:0000000000000268 .L0 
     /tmp/ccgj8Ntl.s:509    .text:0000000000000268 .L0 
     /tmp/ccgj8Ntl.s:511    .text:000000000000026c .L0 
     /tmp/ccgj8Ntl.s:512    .text:000000000000026c .L0 
     /tmp/ccgj8Ntl.s:515    .text:0000000000000274 .L0 
     /tmp/ccgj8Ntl.s:518    .text:0000000000000278 .L0 
     /tmp/ccgj8Ntl.s:520    .text:000000000000027c .L0 
     /tmp/ccgj8Ntl.s:522    .text:0000000000000280 .L0 
     /tmp/ccgj8Ntl.s:523    .text:0000000000000280 .L0 
     /tmp/ccgj8Ntl.s:527    .text:0000000000000284 .L0 
     /tmp/ccgj8Ntl.s:528    .text:0000000000000284 .L0 
     /tmp/ccgj8Ntl.s:530    .text:000000000000028c .L0 
     /tmp/ccgj8Ntl.s:531    .text:000000000000028c .L0 
     /tmp/ccgj8Ntl.s:536    .text:0000000000000294 .L0 
     /tmp/ccgj8Ntl.s:537    .text:0000000000000294 .L0 
     /tmp/ccgj8Ntl.s:539    .text:0000000000000298 .L0 
     /tmp/ccgj8Ntl.s:544    .text:00000000000002a0 .L0 
     /tmp/ccgj8Ntl.s:545    .text:00000000000002a0 .L0 
     /tmp/ccgj8Ntl.s:548    .text:00000000000002ac .L0 
     /tmp/ccgj8Ntl.s:557    .text:00000000000002b4 .L0 
     /tmp/ccgj8Ntl.s:558    .text:00000000000002b4 .L0 
     /tmp/ccgj8Ntl.s:569    .text:00000000000002c4 .L0 
     /tmp/ccgj8Ntl.s:570    .text:00000000000002c4 .L0 
     /tmp/ccgj8Ntl.s:572    .text:00000000000002c8 .L0 
     /tmp/ccgj8Ntl.s:575    .text:00000000000002d0 .L0 
     /tmp/ccgj8Ntl.s:576    .text:00000000000002d0 .L0 
GAS LISTING /tmp/ccgj8Ntl.s 			page 23


     /tmp/ccgj8Ntl.s:579    .text:00000000000002d4 .L0 
     /tmp/ccgj8Ntl.s:583    .text:00000000000002d8 .L0 
     /tmp/ccgj8Ntl.s:593    .text:00000000000002e0 .L0 
     /tmp/ccgj8Ntl.s:604    .text:00000000000002f0 .L0 
     /tmp/ccgj8Ntl.s:620    .text:0000000000000310 .L0 
     /tmp/ccgj8Ntl.s:627    .text:0000000000000318 .L0 
     /tmp/ccgj8Ntl.s:630    .text:0000000000000320 .L0 
     /tmp/ccgj8Ntl.s:639    .bss:0000000000000000 _ZN15MemoryAllocator4headE
     /tmp/ccgj8Ntl.s:636    .bss:0000000000000000 .LANCHOR0
     /tmp/ccgj8Ntl.s:644    .text:0000000000000320 .L0 
     /tmp/ccgj8Ntl.s:23     .text:000000000000000c .L0 
     /tmp/ccgj8Ntl.s:28     .text:0000000000000018 .L0 
     /tmp/ccgj8Ntl.s:55     .text:000000000000003c .L0 
     /tmp/ccgj8Ntl.s:64     .text:000000000000004c .L0 
     /tmp/ccgj8Ntl.s:66     .text:0000000000000058 .L0 
     /tmp/ccgj8Ntl.s:72     .text:0000000000000064 .L0 
     /tmp/ccgj8Ntl.s:128    .text:00000000000000ac .L0 
     /tmp/ccgj8Ntl.s:138    .text:00000000000000bc .L0 
     /tmp/ccgj8Ntl.s:140    .text:00000000000000c8 .L0 
     /tmp/ccgj8Ntl.s:151    .text:00000000000000d8 .L0 
     /tmp/ccgj8Ntl.s:331    .text:0000000000000188 .L0 
     /tmp/ccgj8Ntl.s:345    .text:00000000000001a4 .L0 
     /tmp/ccgj8Ntl.s:376    .text:00000000000001cc .L0 
     /tmp/ccgj8Ntl.s:417    .text:0000000000000200 .L0 
     /tmp/ccgj8Ntl.s:512    .text:000000000000026c .L0 
     /tmp/ccgj8Ntl.s:528    .text:0000000000000284 .L0 
     /tmp/ccgj8Ntl.s:545    .text:00000000000002a0 .L0 
     /tmp/ccgj8Ntl.s:61     .text:000000000000004c .L16
     /tmp/ccgj8Ntl.s:303    .text:000000000000016c .L13
     /tmp/ccgj8Ntl.s:172    .text:00000000000000f4 .L12
     /tmp/ccgj8Ntl.s:32     .text:0000000000000028 .L3
     /tmp/ccgj8Ntl.s:119    .text:00000000000000a4 .L17
     /tmp/ccgj8Ntl.s:154    .text:00000000000000e4 .L14
     /tmp/ccgj8Ntl.s:278    .text:0000000000000158 .L9
     /tmp/ccgj8Ntl.s:135    .text:00000000000000bc .L18
     /tmp/ccgj8Ntl.s:290    .text:0000000000000160 .L1
     /tmp/ccgj8Ntl.s:161    .text:00000000000000ec .L5
     /tmp/ccgj8Ntl.s:85     .text:0000000000000088 .L19
     /tmp/ccgj8Ntl.s:147    .text:00000000000000d8 .L20
     /tmp/ccgj8Ntl.s:263    .text:000000000000014c .L11
     /tmp/ccgj8Ntl.s:589    .text:00000000000002e0 .L30
     /tmp/ccgj8Ntl.s:597    .text:00000000000002e8 .L31
     /tmp/ccgj8Ntl.s:602    .text:00000000000002f0 .L32
     /tmp/ccgj8Ntl.s:606    .text:00000000000002f8 .L33
     /tmp/ccgj8Ntl.s:609    .text:0000000000000300 .L34
     /tmp/ccgj8Ntl.s:612    .text:0000000000000308 .L35
     /tmp/ccgj8Ntl.s:402    .text:00000000000001f4 .L41
     /tmp/ccgj8Ntl.s:423    .text:0000000000000210 .L24
     /tmp/ccgj8Ntl.s:382    .text:00000000000001dc .L23
     /tmp/ccgj8Ntl.s:485    .text:0000000000000254 .L22
     /tmp/ccgj8Ntl.s:495    .text:0000000000000260 .L42
     /tmp/ccgj8Ntl.s:551    .text:00000000000002b4 .L43
     /tmp/ccgj8Ntl.s:623    .text:0000000000000318 .L38
     /tmp/ccgj8Ntl.s:566    .text:00000000000002c4 .L44
     /tmp/ccgj8Ntl.s:616    .text:0000000000000310 .L37
     /tmp/ccgj8Ntl.s:534    .text:0000000000000294 .L45
     /tmp/ccgj8Ntl.s:525    .text:0000000000000284 .L27
GAS LISTING /tmp/ccgj8Ntl.s 			page 24


     /tmp/ccgj8Ntl.s:465    .text:0000000000000238 .L29
     /tmp/ccgj8Ntl.s:1327   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccgj8Ntl.s:2755   .debug_str:000000000000008d .LASF52
     /tmp/ccgj8Ntl.s:2819   .debug_str:0000000000000353 .LASF53
     /tmp/ccgj8Ntl.s:2843   .debug_str:000000000000046b .LASF54
     /tmp/ccgj8Ntl.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccgj8Ntl.s:642    .text:0000000000000320 .Letext0
     /tmp/ccgj8Ntl.s:2731   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccgj8Ntl.s:2801   .debug_str:00000000000002b7 .LASF0
     /tmp/ccgj8Ntl.s:2781   .debug_str:0000000000000210 .LASF1
     /tmp/ccgj8Ntl.s:2771   .debug_str:00000000000001cc .LASF2
     /tmp/ccgj8Ntl.s:2749   .debug_str:0000000000000073 .LASF4
     /tmp/ccgj8Ntl.s:2777   .debug_str:00000000000001f2 .LASF3
     /tmp/ccgj8Ntl.s:2739   .debug_str:0000000000000039 .LASF5
     /tmp/ccgj8Ntl.s:2733   .debug_str:0000000000000000 .LASF6
     /tmp/ccgj8Ntl.s:2763   .debug_str:000000000000017a .LASF7
     /tmp/ccgj8Ntl.s:2811   .debug_str:00000000000002fc .LASF8
     /tmp/ccgj8Ntl.s:2747   .debug_str:0000000000000065 .LASF9
     /tmp/ccgj8Ntl.s:2853   .debug_str:00000000000004a7 .LASF10
     /tmp/ccgj8Ntl.s:2767   .debug_str:000000000000019c .LASF11
     /tmp/ccgj8Ntl.s:2839   .debug_str:0000000000000451 .LASF12
     /tmp/ccgj8Ntl.s:2821   .debug_str:000000000000036b .LASF13
     /tmp/ccgj8Ntl.s:2783   .debug_str:0000000000000223 .LASF14
     /tmp/ccgj8Ntl.s:2757   .debug_str:000000000000012f .LASF15
     /tmp/ccgj8Ntl.s:2815   .debug_str:0000000000000334 .LASF16
     /tmp/ccgj8Ntl.s:2737   .debug_str:0000000000000029 .LASF26
     /tmp/ccgj8Ntl.s:2809   .debug_str:00000000000002ef .LASF55
     /tmp/ccgj8Ntl.s:2845   .debug_str:0000000000000489 .LASF56
     /tmp/ccgj8Ntl.s:2779   .debug_str:0000000000000204 .LASF20
     /tmp/ccgj8Ntl.s:2817   .debug_str:000000000000034a .LASF17
     /tmp/ccgj8Ntl.s:2849   .debug_str:000000000000049d .LASF18
     /tmp/ccgj8Ntl.s:2741   .debug_str:0000000000000040 .LASF19
     /tmp/ccgj8Ntl.s:2787   .debug_str:0000000000000244 .LASF34
     /tmp/ccgj8Ntl.s:2827   .debug_str:00000000000003ad .LASF36
     /tmp/ccgj8Ntl.s:2837   .debug_str:0000000000000423 .LASF57
     /tmp/ccgj8Ntl.s:2785   .debug_str:000000000000022f .LASF21
     /tmp/ccgj8Ntl.s:2841   .debug_str:0000000000000461 .LASF22
     /tmp/ccgj8Ntl.s:2833   .debug_str:00000000000003f6 .LASF24
     /tmp/ccgj8Ntl.s:2823   .debug_str:000000000000037b .LASF23
     /tmp/ccgj8Ntl.s:2769   .debug_str:00000000000001ab .LASF25
     /tmp/ccgj8Ntl.s:2793   .debug_str:0000000000000286 .LASF28
     /tmp/ccgj8Ntl.s:2829   .debug_str:00000000000003db .LASF58
     /tmp/ccgj8Ntl.s:2795   .debug_str:000000000000029f .LASF59
     /tmp/ccgj8Ntl.s:2831   .debug_str:00000000000003e9 .LASF27
     /tmp/ccgj8Ntl.s:2791   .debug_str:0000000000000261 .LASF29
     /tmp/ccgj8Ntl.s:2773   .debug_str:00000000000001da .LASF30
     /tmp/ccgj8Ntl.s:2761   .debug_str:0000000000000155 .LASF31
     /tmp/ccgj8Ntl.s:2759   .debug_str:0000000000000145 .LASF32
     /tmp/ccgj8Ntl.s:2825   .debug_str:0000000000000384 .LASF33
     /tmp/ccgj8Ntl.s:2803   .debug_str:00000000000002c4 .LASF35
     /tmp/ccgj8Ntl.s:2813   .debug_str:000000000000030c .LASF37
     /tmp/ccgj8Ntl.s:2751   .debug_str:000000000000007a .LASF38
     /tmp/ccgj8Ntl.s:2743   .debug_str:0000000000000045 .LASF60
     /tmp/ccgj8Ntl.s:316    .text:0000000000000174 .LFB10
     /tmp/ccgj8Ntl.s:631    .text:0000000000000320 .LFE10
     /tmp/ccgj8Ntl.s:2775   .debug_str:00000000000001e7 .LASF42
     /tmp/ccgj8Ntl.s:1962   .debug_loc:0000000000000000 .LLST19
GAS LISTING /tmp/ccgj8Ntl.s 			page 25


     /tmp/ccgj8Ntl.s:2038   .debug_loc:000000000000011c .LLST20
     /tmp/ccgj8Ntl.s:2745   .debug_str:0000000000000060 .LASF39
     /tmp/ccgj8Ntl.s:2071   .debug_loc:00000000000001b3 .LLST21
     /tmp/ccgj8Ntl.s:2851   .debug_str:00000000000004a2 .LASF40
     /tmp/ccgj8Ntl.s:2103   .debug_loc:0000000000000249 .LLST22
     /tmp/ccgj8Ntl.s:404    .text:00000000000001f4 .LBB62
     /tmp/ccgj8Ntl.s:424    .text:0000000000000210 .LBE62
     /tmp/ccgj8Ntl.s:2765   .debug_str:000000000000018d .LASF41
     /tmp/ccgj8Ntl.s:2146   .debug_loc:0000000000000317 .LLST25
     /tmp/ccgj8Ntl.s:501    .text:0000000000000264 .LBB72
     /tmp/ccgj8Ntl.s:552    .text:00000000000002b4 .LBE72
     /tmp/ccgj8Ntl.s:2153   .debug_loc:000000000000033a .LLST29
     /tmp/ccgj8Ntl.s:440    .text:0000000000000224 .LBB67
     /tmp/ccgj8Ntl.s:466    .text:0000000000000238 .LBE67
     /tmp/ccgj8Ntl.s:2160   .debug_loc:000000000000035d .LLST26
     /tmp/ccgj8Ntl.s:451    .text:000000000000022c .LBB68
     /tmp/ccgj8Ntl.s:463    .text:0000000000000238 .LBE68
     /tmp/ccgj8Ntl.s:2167   .debug_loc:0000000000000380 .LLST27
     /tmp/ccgj8Ntl.s:2174   .debug_loc:00000000000003a3 .LLST28
     /tmp/ccgj8Ntl.s:352    .text:00000000000001b8 .LBB57
     /tmp/ccgj8Ntl.s:367    .text:00000000000001c0 .LBE57
     /tmp/ccgj8Ntl.s:2181   .debug_loc:00000000000003c6 .LLST23
     /tmp/ccgj8Ntl.s:355    .text:00000000000001b8 .LBB59
     /tmp/ccgj8Ntl.s:362    .text:00000000000001bc .LBE59
     /tmp/ccgj8Ntl.s:2188   .debug_loc:00000000000003e9 .LLST24
     /tmp/ccgj8Ntl.s:10     .text:0000000000000000 .LFB9
     /tmp/ccgj8Ntl.s:310    .text:0000000000000174 .LFE9
     /tmp/ccgj8Ntl.s:2195   .debug_loc:000000000000040c .LLST0
     /tmp/ccgj8Ntl.s:2789   .debug_str:000000000000024b .LASF43
     /tmp/ccgj8Ntl.s:2260   .debug_loc:00000000000004ff .LLST1
     /tmp/ccgj8Ntl.s:2417   .debug_loc:000000000000066c .LLST2
     /tmp/ccgj8Ntl.s:2437   .debug_loc:00000000000006c9 .LLST3
     /tmp/ccgj8Ntl.s:2717   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccgj8Ntl.s:2807   .debug_str:00000000000002db .LASF44
     /tmp/ccgj8Ntl.s:2457   .debug_loc:0000000000000726 .LLST5
     /tmp/ccgj8Ntl.s:2753   .debug_str:000000000000007f .LASF45
     /tmp/ccgj8Ntl.s:2558   .debug_loc:000000000000081f .LLST6
     /tmp/ccgj8Ntl.s:2735   .debug_str:0000000000000013 .LASF46
     /tmp/ccgj8Ntl.s:2577   .debug_loc:000000000000087b .LLST7
     /tmp/ccgj8Ntl.s:2797   .debug_str:00000000000002a4 .LASF47
     /tmp/ccgj8Ntl.s:2588   .debug_loc:00000000000008b1 .LLST10
     /tmp/ccgj8Ntl.s:2847   .debug_str:0000000000000495 .LASF48
     /tmp/ccgj8Ntl.s:2599   .debug_loc:00000000000008e7 .LLST11
     /tmp/ccgj8Ntl.s:2799   .debug_str:00000000000002b0 .LASF49
     /tmp/ccgj8Ntl.s:2616   .debug_loc:0000000000000932 .LLST12
     /tmp/ccgj8Ntl.s:213    .text:000000000000011c .LBB44
     /tmp/ccgj8Ntl.s:220    .text:0000000000000120 .LBE44
     /tmp/ccgj8Ntl.s:2627   .debug_loc:0000000000000968 .LLST13
     /tmp/ccgj8Ntl.s:247    .text:000000000000013c .LBB46
     /tmp/ccgj8Ntl.s:265    .text:000000000000014c .LBE46
     /tmp/ccgj8Ntl.s:2634   .debug_loc:000000000000098b .LLST14
     /tmp/ccgj8Ntl.s:2641   .debug_loc:00000000000009ae .LLST15
     /tmp/ccgj8Ntl.s:267    .text:000000000000014c .LBB48
     /tmp/ccgj8Ntl.s:280    .text:0000000000000158 .LBE48
     /tmp/ccgj8Ntl.s:2653   .debug_loc:00000000000009e5 .LLST16
     /tmp/ccgj8Ntl.s:2660   .debug_loc:0000000000000a08 .LLST17
     /tmp/ccgj8Ntl.s:95     .text:000000000000008c .LBB41
GAS LISTING /tmp/ccgj8Ntl.s 			page 26


     /tmp/ccgj8Ntl.s:113    .text:000000000000009c .LBE41
     /tmp/ccgj8Ntl.s:2667   .debug_loc:0000000000000a2b .LLST8
     /tmp/ccgj8Ntl.s:2678   .debug_loc:0000000000000a61 .LLST9
     /tmp/ccgj8Ntl.s:182    .text:00000000000000fc .LBB53
     /tmp/ccgj8Ntl.s:195    .text:000000000000010c .LBE53
     /tmp/ccgj8Ntl.s:2690   .debug_loc:0000000000000a98 .LLST18
     /tmp/ccgj8Ntl.s:38     .text:000000000000002c .LBB35
     /tmp/ccgj8Ntl.s:52     .text:000000000000003c .LBE35
     /tmp/ccgj8Ntl.s:2697   .debug_loc:0000000000000abb .LLST4
     /tmp/ccgj8Ntl.s:2805   .debug_str:00000000000002d3 .LASF50
     /tmp/ccgj8Ntl.s:2835   .debug_str:0000000000000417 .LASF51
     /tmp/ccgj8Ntl.s:319    .text:0000000000000174 .LVL41
     /tmp/ccgj8Ntl.s:338    .text:000000000000019c .LVL42
     /tmp/ccgj8Ntl.s:461    .text:0000000000000238 .LVL53
     /tmp/ccgj8Ntl.s:484    .text:0000000000000254 .LVL54
     /tmp/ccgj8Ntl.s:494    .text:0000000000000260 .LVL55
     /tmp/ccgj8Ntl.s:563    .text:00000000000002c0 .LVL66
     /tmp/ccgj8Ntl.s:584    .text:00000000000002dc .LVL69
     /tmp/ccgj8Ntl.s:588    .text:00000000000002e0 .LVL70
     /tmp/ccgj8Ntl.s:594    .text:00000000000002e4 .LVL71
     /tmp/ccgj8Ntl.s:596    .text:00000000000002e8 .LVL72
     /tmp/ccgj8Ntl.s:599    .text:00000000000002ec .LVL73
     /tmp/ccgj8Ntl.s:601    .text:00000000000002f0 .LVL74
     /tmp/ccgj8Ntl.s:622    .text:0000000000000318 .LVL76
     /tmp/ccgj8Ntl.s:628    .text:000000000000031c .LVL77
     /tmp/ccgj8Ntl.s:524    .text:0000000000000284 .LVL59
     /tmp/ccgj8Ntl.s:533    .text:0000000000000294 .LVL60
     /tmp/ccgj8Ntl.s:540    .text:000000000000029c .LVL61
     /tmp/ccgj8Ntl.s:542    .text:00000000000002a0 .LVL62
     /tmp/ccgj8Ntl.s:550    .text:00000000000002b4 .LVL63
     /tmp/ccgj8Ntl.s:559    .text:00000000000002b8 .LVL64
     /tmp/ccgj8Ntl.s:561    .text:00000000000002bc .LVL65
     /tmp/ccgj8Ntl.s:383    .text:00000000000001dc .LVL46
     /tmp/ccgj8Ntl.s:392    .text:00000000000001e8 .LVL47
     /tmp/ccgj8Ntl.s:398    .text:00000000000001f0 .LVL48
     /tmp/ccgj8Ntl.s:401    .text:00000000000001f4 .LVL49
     /tmp/ccgj8Ntl.s:422    .text:0000000000000210 .LVL50
     /tmp/ccgj8Ntl.s:513    .text:0000000000000274 .LVL57
     /tmp/ccgj8Ntl.s:577    .text:00000000000002d4 .LVL68
     /tmp/ccgj8Ntl.s:615    .text:0000000000000310 .LVL75
     /tmp/ccgj8Ntl.s:516    .text:0000000000000278 .LVL58
     /tmp/ccgj8Ntl.s:565    .text:00000000000002c4 .LVL67
     /tmp/ccgj8Ntl.s:503    .text:0000000000000264 .LVL56
     /tmp/ccgj8Ntl.s:442    .text:0000000000000224 .LVL51
     /tmp/ccgj8Ntl.s:450    .text:000000000000022c .LVL52
     /tmp/ccgj8Ntl.s:351    .text:00000000000001b8 .LVL43
     /tmp/ccgj8Ntl.s:365    .text:00000000000001c0 .LVL45
     /tmp/ccgj8Ntl.s:360    .text:00000000000001bc .LVL44
     /tmp/ccgj8Ntl.s:14     .text:0000000000000000 .LVL0
     /tmp/ccgj8Ntl.s:36     .text:000000000000002c .LVL1
     /tmp/ccgj8Ntl.s:60     .text:000000000000004c .LVL4
     /tmp/ccgj8Ntl.s:84     .text:0000000000000088 .LVL5
     /tmp/ccgj8Ntl.s:129    .text:00000000000000b4 .LVL14
     /tmp/ccgj8Ntl.s:134    .text:00000000000000bc .LVL16
     /tmp/ccgj8Ntl.s:141    .text:00000000000000d0 .LVL17
     /tmp/ccgj8Ntl.s:146    .text:00000000000000d8 .LVL19
     /tmp/ccgj8Ntl.s:277    .text:0000000000000158 .LVL37
GAS LISTING /tmp/ccgj8Ntl.s 			page 27


     /tmp/ccgj8Ntl.s:289    .text:0000000000000160 .LVL38
     /tmp/ccgj8Ntl.s:302    .text:000000000000016c .LVL39
     /tmp/ccgj8Ntl.s:307    .text:0000000000000170 .LVL40
     /tmp/ccgj8Ntl.s:50     .text:000000000000003c .LVL2
     /tmp/ccgj8Ntl.s:116    .text:00000000000000a0 .LVL11
     /tmp/ccgj8Ntl.s:118    .text:00000000000000a4 .LVL12
     /tmp/ccgj8Ntl.s:132    .text:00000000000000b8 .LVL15
     /tmp/ccgj8Ntl.s:144    .text:00000000000000d4 .LVL18
     /tmp/ccgj8Ntl.s:153    .text:00000000000000e4 .LVL20
     /tmp/ccgj8Ntl.s:158    .text:00000000000000e8 .LVL21
     /tmp/ccgj8Ntl.s:160    .text:00000000000000ec .LVL22
     /tmp/ccgj8Ntl.s:218    .text:0000000000000120 .LVL28
     /tmp/ccgj8Ntl.s:56     .text:0000000000000044 .LVL3
     /tmp/ccgj8Ntl.s:171    .text:00000000000000f4 .LVL23
     /tmp/ccgj8Ntl.s:100    .text:0000000000000090 .LVL7
     /tmp/ccgj8Ntl.s:123    .text:00000000000000a8 .LVL13
     /tmp/ccgj8Ntl.s:193    .text:000000000000010c .LVL25
     /tmp/ccgj8Ntl.s:224    .text:0000000000000124 .LVL29
     /tmp/ccgj8Ntl.s:228    .text:0000000000000128 .LVL30
     /tmp/ccgj8Ntl.s:233    .text:000000000000012c .LVL31
     /tmp/ccgj8Ntl.s:200    .text:0000000000000110 .LVL26
     /tmp/ccgj8Ntl.s:240    .text:0000000000000134 .LVL32
     /tmp/ccgj8Ntl.s:262    .text:000000000000014c .LVL36
     /tmp/ccgj8Ntl.s:212    .text:000000000000011c .LVL27
     /tmp/ccgj8Ntl.s:246    .text:000000000000013c .LVL33
     /tmp/ccgj8Ntl.s:255    .text:0000000000000144 .LVL34
     /tmp/ccgj8Ntl.s:259    .text:0000000000000148 .LVL35
     /tmp/ccgj8Ntl.s:94     .text:000000000000008c .LVL6
     /tmp/ccgj8Ntl.s:104    .text:0000000000000094 .LVL8
     /tmp/ccgj8Ntl.s:108    .text:0000000000000098 .LVL9
     /tmp/ccgj8Ntl.s:111    .text:000000000000009c .LVL10
     /tmp/ccgj8Ntl.s:181    .text:00000000000000fc .LVL24
     /tmp/ccgj8Ntl.s:645    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccgj8Ntl.s:86     .text:0000000000000088 .LBB37
     /tmp/ccgj8Ntl.s:173    .text:00000000000000f4 .LBE37
     /tmp/ccgj8Ntl.s:177    .text:00000000000000f8 .LBB56
     /tmp/ccgj8Ntl.s:293    .text:0000000000000160 .LBE56
     /tmp/ccgj8Ntl.s:148    .text:00000000000000d8 .LBB43
     /tmp/ccgj8Ntl.s:155    .text:00000000000000e4 .LBE43
     /tmp/ccgj8Ntl.s:210    .text:000000000000011c .LBB50
     /tmp/ccgj8Ntl.s:281    .text:0000000000000158 .LBE50

UNDEFINED SYMBOLS
HEAP_END_ADDR
HEAP_START_ADDR

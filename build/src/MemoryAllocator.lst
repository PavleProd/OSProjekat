GAS LISTING /tmp/ccFr2uVD.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator9mem_allocEm
   9              	_ZN15MemoryAllocator9mem_allocEm:
  10              	.LFB9:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.h"
   2:src/MemoryAllocator.cpp **** 
   3:src/MemoryAllocator.cpp **** MemoryAllocator::FreeSegment* MemoryAllocator::head = nullptr;
   4:src/MemoryAllocator.cpp **** 
   5:src/MemoryAllocator.cpp **** void *MemoryAllocator::mem_alloc(size_t size) {
  12              		.loc 1 5 47
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
   6:src/MemoryAllocator.cpp ****     if(head == nullptr) { // ako prvi put alociramo memoriju, alociracemo head na pocetak mem segme
  21              		.loc 1 6 5
  22              		.loc 1 6 13 is_stmt 0
  23 000c 97070000 		ld	a5,.LANCHOR0
  23      83B70700 
  24              		.loc 1 6 5
  25 0014 63800706 		beqz	a5,.L16
   7:src/MemoryAllocator.cpp ****         head = (FreeSegment*)HEAP_START_ADDR;
   8:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
   9:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR + 1);
  10:src/MemoryAllocator.cpp ****         head->next = nullptr;
  11:src/MemoryAllocator.cpp ****     }
  12:src/MemoryAllocator.cpp ****     else if(head == (FreeSegment*)HEAP_END_ADDR) { // ako ne postoji slobodan prostor
  26              		.loc 1 12 10 is_stmt 1
  27              		.loc 1 12 21 is_stmt 0
  28 0018 17070000 		la	a4,HEAP_END_ADDR
  28      03370700 
  29 0020 03370700 		ld	a4,0(a4)
  30              		.loc 1 12 10
  31 0024 6382E714 		beq	a5,a4,.L13
  32              	.L3:
  13:src/MemoryAllocator.cpp ****         return nullptr;
  14:src/MemoryAllocator.cpp ****     }
  15:src/MemoryAllocator.cpp **** 
  16:src/MemoryAllocator.cpp ****     size += SegmentOffset; // dodajemo zaglavlje
  33              		.loc 1 16 5 is_stmt 1
  34              		.loc 1 16 10 is_stmt 0
  35 0028 13058500 		addi	a0,a0,8
  36              	.LVL1:
  17:src/MemoryAllocator.cpp ****     size_t numOfBlocksToAllocate = sizeInBlocks(size);
  37              		.loc 1 17 5 is_stmt 1
  38              	.LBB19:
  39              	.LBB20:
GAS LISTING /tmp/ccFr2uVD.s 			page 2


  40              		.file 2 "src/../h/MemoryAllocator.h"
   1:src/../h/MemoryAllocator.h **** #ifndef PROJECT_BASE_MEMORYALLOCATOR_H
   2:src/../h/MemoryAllocator.h **** #define PROJECT_BASE_MEMORYALLOCATOR_H
   3:src/../h/MemoryAllocator.h **** 
   4:src/../h/MemoryAllocator.h **** #include "../lib/hw.h"
   5:src/../h/MemoryAllocator.h **** 
   6:src/../h/MemoryAllocator.h **** class MemoryAllocator {
   7:src/../h/MemoryAllocator.h **** public:
   8:src/../h/MemoryAllocator.h ****     /*
   9:src/../h/MemoryAllocator.h ****     Alocira (najmanje) size bajtova memorije, zaokruženo i poravnato na blokove veličine MEM_BLOC
  10:src/../h/MemoryAllocator.h ****     Svaki alocirani segment ima zaglavlje sa velicinom tog segmenta(vraca se adresa nakon tog zagla
  11:src/../h/MemoryAllocator.h **** 
  12:src/../h/MemoryAllocator.h ****     Vraća:
  13:src/../h/MemoryAllocator.h ****     pokazivač na alocirani deo memorije u slučaju uspeha, nullptr u slučaju neuspeha
  14:src/../h/MemoryAllocator.h **** 
  15:src/../h/MemoryAllocator.h ****     Radi se po algoritmu first fit(alociramo prvi segment koji je >= size). Ako je preostao prostor
  16:src/../h/MemoryAllocator.h ****     jednog bloka, taj preostali prostor se pridruzuje ovom koji smo sad alocirali(jer nema poente d
  17:src/../h/MemoryAllocator.h ****     */
  18:src/../h/MemoryAllocator.h ****     static void* mem_alloc(size_t size);
  19:src/../h/MemoryAllocator.h ****     /*
  20:src/../h/MemoryAllocator.h ****     Oslobađa prostor prethodno zauzet pomoću mem_alloc.
  21:src/../h/MemoryAllocator.h ****     Vraća 0 u slučaju uspeha, negativnu vrednost u slučaju greške
  22:src/../h/MemoryAllocator.h **** 
  23:src/../h/MemoryAllocator.h ****     */
  24:src/../h/MemoryAllocator.h ****     static int mem_free(void* memSegment);
  25:src/../h/MemoryAllocator.h **** 
  26:src/../h/MemoryAllocator.h ****     enum memFreeFlags {
  27:src/../h/MemoryAllocator.h ****         BAD_POINTER = -1 // nije koriscen pokazviac iz mem_alloc
  28:src/../h/MemoryAllocator.h ****     };
  29:src/../h/MemoryAllocator.h **** 
  30:src/../h/MemoryAllocator.h **** private:
  31:src/../h/MemoryAllocator.h ****     MemoryAllocator() {} // da bi se zabranilo pravljenje objekata
  32:src/../h/MemoryAllocator.h **** 
  33:src/../h/MemoryAllocator.h ****     struct FreeSegment { // Jednostruko ulancana lista slobodnih segmenata
  34:src/../h/MemoryAllocator.h ****         void* baseAddr; // pocetna adresa u segmentu
  35:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta
  36:src/../h/MemoryAllocator.h ****         FreeSegment* next; // sledeci element u ulancanoj listi
  37:src/../h/MemoryAllocator.h **** 
  38:src/../h/MemoryAllocator.h ****         // brise element iz ulancane liste koji se nalazi posle elementa prev
  39:src/../h/MemoryAllocator.h ****         static void remove(FreeSegment* prev) {
  40:src/../h/MemoryAllocator.h ****             if(!prev->next) return;
  41:src/../h/MemoryAllocator.h **** 
  42:src/../h/MemoryAllocator.h ****             FreeSegment* curr = prev->next;
  43:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
  44:src/../h/MemoryAllocator.h ****         }
  45:src/../h/MemoryAllocator.h **** 
  46:src/../h/MemoryAllocator.h ****         // dodaje element curr u ulancanu listu nakon elementa prev(samo ulancava)
  47:src/../h/MemoryAllocator.h ****         static void add(FreeSegment* prev, FreeSegment* curr) {
  48:src/../h/MemoryAllocator.h ****             curr->next = prev->next;
  49:src/../h/MemoryAllocator.h ****             prev->next = curr;
  50:src/../h/MemoryAllocator.h ****         }
  51:src/../h/MemoryAllocator.h ****     };
  52:src/../h/MemoryAllocator.h **** 
  53:src/../h/MemoryAllocator.h ****     struct AllocatedSpaceHeader { // Zaglavlje zauzetog segmenta
  54:src/../h/MemoryAllocator.h ****         size_t size; // velicina segmenta(ukljucujuci i zaglavlje)
  55:src/../h/MemoryAllocator.h ****     };
  56:src/../h/MemoryAllocator.h **** 
GAS LISTING /tmp/ccFr2uVD.s 			page 3


  57:src/../h/MemoryAllocator.h ****     static const size_t SegmentOffset = sizeof(AllocatedSpaceHeader);
  58:src/../h/MemoryAllocator.h **** 
  59:src/../h/MemoryAllocator.h ****     static FreeSegment* head; // pocetak ulancane liste slobodnih segmenata
  60:src/../h/MemoryAllocator.h **** 
  61:src/../h/MemoryAllocator.h ****     // Vraca minimalan potreban broj blokova za alokaciju memorije velicine size bajtova
  62:src/../h/MemoryAllocator.h ****     static inline size_t sizeInBlocks(size_t size) {
  63:src/../h/MemoryAllocator.h ****         return (size / MEM_BLOCK_SIZE) + (size % MEM_BLOCK_SIZE > 0);
  41              		.loc 2 63 9
  42              		.loc 2 63 22 is_stmt 0
  43 002c 13566500 		srli	a2,a0,6
  44              		.loc 2 63 48
  45 0030 1375F503 		andi	a0,a0,63
  46              	.LVL2:
  47              		.loc 2 63 65
  48 0034 3335A000 		snez	a0,a0
  49              		.loc 2 63 68
  50 0038 3306A600 		add	a2,a2,a0
  51              	.LVL3:
  52              	.LBE20:
  53              	.LBE19:
  18:src/MemoryAllocator.cpp **** 
  19:src/MemoryAllocator.cpp ****     FreeSegment *curr = head, *prev = nullptr;
  54              		.loc 1 19 5 is_stmt 1
  55              		.loc 1 19 18 is_stmt 0
  56 003c 17050000 		ld	a0,.LANCHOR0
  56      03350500 
  57              	.LVL4:
  58              		.loc 1 19 32
  59 0044 93050000 		li	a1,0
  60              	.LVL5:
  61              	.L12:
  20:src/MemoryAllocator.cpp ****     while(curr) {
  62              		.loc 1 20 5 is_stmt 1
  63              		.loc 1 20 11
  64 0048 6308050A 		beqz	a0,.L1
  65              	.LBB21:
  21:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = sizeInBlocks(curr->size);
  66              		.loc 1 21 9
  67              		.loc 1 21 50 is_stmt 0
  68 004c 83368500 		ld	a3,8(a0)
  69              	.LVL6:
  70              	.LBB22:
  71              	.LBB23:
  72              		.loc 2 63 9 is_stmt 1
  73              		.loc 2 63 22 is_stmt 0
  74 0050 93D76600 		srli	a5,a3,6
  75              		.loc 2 63 48
  76 0054 13F7F603 		andi	a4,a3,63
  77              		.loc 2 63 65
  78 0058 3337E000 		snez	a4,a4
  79              		.loc 2 63 68
  80 005c B387E700 		add	a5,a5,a4
  81              	.LVL7:
  82              	.LBE23:
  83              	.LBE22:
  22:src/MemoryAllocator.cpp ****         size_t allocatedSize = 0;
  84              		.loc 1 22 9 is_stmt 1
GAS LISTING /tmp/ccFr2uVD.s 			page 4


  23:src/MemoryAllocator.cpp ****         void* startOfAllocatedSpace = curr->baseAddr;
  85              		.loc 1 23 9
  86              		.loc 1 23 15 is_stmt 0
  87 0060 03370500 		ld	a4,0(a0)
  88              	.LVL8:
  24:src/MemoryAllocator.cpp ****         if(freeSegSizeInBlocks >= numOfBlocksToAllocate) {
  89              		.loc 1 24 9 is_stmt 1
  90              	.LBB24:
  91 0064 63F6C704 		bleu	a2,a5,.L17
  92              	.LBE24:
  25:src/MemoryAllocator.cpp ****             if(freeSegSizeInBlocks == numOfBlocksToAllocate) { // ako ce preostali slobodan segment
  26:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
  27:src/MemoryAllocator.cpp **** 
  28:src/MemoryAllocator.cpp ****                 if(prev == nullptr) { // ako smo na head pokazivacu
  29:src/MemoryAllocator.cpp ****                     if(curr->next == nullptr) { // ako ne postoji slobodan prostor nakon alokacije
  30:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
  31:src/MemoryAllocator.cpp ****                     }
  32:src/MemoryAllocator.cpp ****                     else {
  33:src/MemoryAllocator.cpp ****                         head = curr->next;
  34:src/MemoryAllocator.cpp ****                     }
  35:src/MemoryAllocator.cpp ****                 }
  36:src/MemoryAllocator.cpp ****                 else {
  37:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
  38:src/MemoryAllocator.cpp ****                 }
  39:src/MemoryAllocator.cpp ****             }
  40:src/MemoryAllocator.cpp ****             else {
  41:src/MemoryAllocator.cpp ****                 allocatedSize = blocksInSize(numOfBlocksToAllocate);
  42:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
  43:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
  44:src/MemoryAllocator.cpp **** 
  45:src/MemoryAllocator.cpp ****                 FreeSegment* newSeg = (FreeSegment*)newBaseAddr;
  46:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
  47:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
  48:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
  49:src/MemoryAllocator.cpp **** 
  50:src/MemoryAllocator.cpp ****                 if(!prev) {
  51:src/MemoryAllocator.cpp ****                     head = newSeg;
  52:src/MemoryAllocator.cpp ****                 }
  53:src/MemoryAllocator.cpp ****                 else {
  54:src/MemoryAllocator.cpp ****                     FreeSegment::remove(prev);
  55:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
  56:src/MemoryAllocator.cpp ****                 }
  57:src/MemoryAllocator.cpp ****             }
  58:src/MemoryAllocator.cpp **** 
  59:src/MemoryAllocator.cpp ****             ((AllocatedSpaceHeader*)startOfAllocatedSpace)->size = allocatedSize;
  60:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
  61:src/MemoryAllocator.cpp ****         }
  62:src/MemoryAllocator.cpp **** 
  63:src/MemoryAllocator.cpp ****         prev = curr;
  93              		.loc 1 63 9
  94              	.LVL9:
  64:src/MemoryAllocator.cpp ****         curr = curr->next;
  95              		.loc 1 64 9
  63:src/MemoryAllocator.cpp ****         curr = curr->next;
  96              		.loc 1 63 14 is_stmt 0
  97 0068 93050500 		mv	a1,a0
  98              		.loc 1 64 14
GAS LISTING /tmp/ccFr2uVD.s 			page 5


  99 006c 03350501 		ld	a0,16(a0)
 100              	.LVL10:
 101              	.LBE21:
  20:src/MemoryAllocator.cpp ****         size_t freeSegSizeInBlocks = sizeInBlocks(curr->size);
 102              		.loc 1 20 5
 103 0070 6FF09FFD 		j	.L12
 104              	.LVL11:
 105              	.L16:
   7:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
 106              		.loc 1 7 9 is_stmt 1
   7:src/MemoryAllocator.cpp ****         head->baseAddr = (void*)HEAP_START_ADDR;
 107              		.loc 1 7 14 is_stmt 0
 108 0074 97060000 		la	a3,HEAP_START_ADDR
 108      83B60600 
 109 007c 83B70600 		ld	a5,0(a3)
 110 0080 17070000 		sd	a5,.LANCHOR0,a4
 110      2330F700 
   8:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR + 1);
 111              		.loc 1 8 9 is_stmt 1
   8:src/MemoryAllocator.cpp ****         head->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR + 1);
 112              		.loc 1 8 24 is_stmt 0
 113 0088 23B0F700 		sd	a5,0(a5)
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
 114              		.loc 1 9 9 is_stmt 1
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
 115              		.loc 1 9 45 is_stmt 0
 116 008c 17070000 		la	a4,HEAP_END_ADDR
 116      03370700 
 117 0094 03370700 		ld	a4,0(a4)
 118 0098 83B60600 		ld	a3,0(a3)
 119 009c 3307D740 		sub	a4,a4,a3
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
 120              		.loc 1 9 71
 121 00a0 13071700 		addi	a4,a4,1
   9:src/MemoryAllocator.cpp ****         head->next = nullptr;
 122              		.loc 1 9 20
 123 00a4 23B4E700 		sd	a4,8(a5)
  10:src/MemoryAllocator.cpp ****     }
 124              		.loc 1 10 9 is_stmt 1
  10:src/MemoryAllocator.cpp ****     }
 125              		.loc 1 10 20 is_stmt 0
 126 00a8 23B80700 		sd	zero,16(a5)
 127 00ac 6FF0DFF7 		j	.L3
 128              	.LVL12:
 129              	.L17:
 130              	.LBB41:
 131              	.LBB39:
 132              	.LBB25:
  25:src/MemoryAllocator.cpp ****                 allocatedSize = curr->size;
 133              		.loc 1 25 13 is_stmt 1
 134              	.LBB26:
 135 00b0 630AF604 		beq	a2,a5,.L18
 136              	.LBB27:
  41:src/MemoryAllocator.cpp ****                 void* newBaseAddr = ((char*)startOfAllocatedSpace + allocatedSize);
 137              		.loc 1 41 17
 138              	.LVL13:
 139              	.LBB28:
GAS LISTING /tmp/ccFr2uVD.s 			page 6


 140              	.LBB29:
  64:src/../h/MemoryAllocator.h ****     }
  65:src/../h/MemoryAllocator.h **** 
  66:src/../h/MemoryAllocator.h ****     // Vraca velicinu numOfBlocks blokova u bajtovima
  67:src/../h/MemoryAllocator.h ****     static inline size_t blocksInSize(size_t numOfBlocks) {
  68:src/../h/MemoryAllocator.h ****         return numOfBlocks * MEM_BLOCK_SIZE;
 141              		.loc 2 68 9
 142              		.loc 2 68 30 is_stmt 0
 143 00b4 13166600 		slli	a2,a2,6
 144              	.LVL14:
 145              	.LBE29:
 146              	.LBE28:
  42:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 147              		.loc 1 42 17 is_stmt 1
  42:src/MemoryAllocator.cpp ****                 size_t newSize = curr->size - allocatedSize;
 148              		.loc 1 42 23 is_stmt 0
 149 00b8 B307C700 		add	a5,a4,a2
 150              	.LVL15:
  43:src/MemoryAllocator.cpp **** 
 151              		.loc 1 43 17 is_stmt 1
  43:src/MemoryAllocator.cpp **** 
 152              		.loc 1 43 24 is_stmt 0
 153 00bc B386C640 		sub	a3,a3,a2
 154              	.LVL16:
  45:src/MemoryAllocator.cpp ****                 newSeg->baseAddr = newBaseAddr;
 155              		.loc 1 45 17 is_stmt 1
  46:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 156              		.loc 1 46 17
  46:src/MemoryAllocator.cpp ****                 newSeg->size = newSize;
 157              		.loc 1 46 34 is_stmt 0
 158 00c0 23B0F700 		sd	a5,0(a5)
 159              	.LVL17:
  47:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 160              		.loc 1 47 17 is_stmt 1
  47:src/MemoryAllocator.cpp ****                 newSeg->next = curr->next;
 161              		.loc 1 47 30 is_stmt 0
 162 00c4 23B4D700 		sd	a3,8(a5)
  48:src/MemoryAllocator.cpp **** 
 163              		.loc 1 48 17 is_stmt 1
  48:src/MemoryAllocator.cpp **** 
 164              		.loc 1 48 38 is_stmt 0
 165 00c8 83360501 		ld	a3,16(a0)
 166              	.LVL18:
  48:src/MemoryAllocator.cpp **** 
 167              		.loc 1 48 30
 168 00cc 23B8D700 		sd	a3,16(a5)
  50:src/MemoryAllocator.cpp ****                     head = newSeg;
 169              		.loc 1 50 17 is_stmt 1
 170 00d0 63820508 		beqz	a1,.L19
  54:src/MemoryAllocator.cpp ****                     FreeSegment::add(prev, curr);
 171              		.loc 1 54 21
 172              	.LVL19:
 173              	.LBB30:
 174              	.LBB31:
  40:src/../h/MemoryAllocator.h **** 
 175              		.loc 2 40 13
  40:src/../h/MemoryAllocator.h **** 
GAS LISTING /tmp/ccFr2uVD.s 			page 7


 176              		.loc 2 40 23 is_stmt 0
 177 00d4 83B70501 		ld	a5,16(a1)
 178              	.LVL20:
  40:src/../h/MemoryAllocator.h **** 
 179              		.loc 2 40 13
 180 00d8 63860700 		beqz	a5,.L11
  42:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 181              		.loc 2 42 13 is_stmt 1
 182              	.LVL21:
  43:src/../h/MemoryAllocator.h ****         }
 183              		.loc 2 43 13
  43:src/../h/MemoryAllocator.h ****         }
 184              		.loc 2 43 32 is_stmt 0
 185 00dc 83B70701 		ld	a5,16(a5)
 186              	.LVL22:
  43:src/../h/MemoryAllocator.h ****         }
 187              		.loc 2 43 24
 188 00e0 23B8F500 		sd	a5,16(a1)
 189              	.LVL23:
 190              	.L11:
 191              	.LBE31:
 192              	.LBE30:
  55:src/MemoryAllocator.cpp ****                 }
 193              		.loc 1 55 21 is_stmt 1
 194              	.LBB32:
 195              	.LBB33:
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 196              		.loc 2 48 13
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 197              		.loc 2 48 32 is_stmt 0
 198 00e4 83B70501 		ld	a5,16(a1)
  48:src/../h/MemoryAllocator.h ****             prev->next = curr;
 199              		.loc 2 48 24
 200 00e8 2338F500 		sd	a5,16(a0)
  49:src/../h/MemoryAllocator.h ****         }
 201              		.loc 2 49 13 is_stmt 1
  49:src/../h/MemoryAllocator.h ****         }
 202              		.loc 2 49 24 is_stmt 0
 203 00ec 23B8A500 		sd	a0,16(a1)
 204              	.LVL24:
 205              	.L9:
 206              	.LBE33:
 207              	.LBE32:
 208              	.LBE27:
 209              	.LBE26:
  59:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 210              		.loc 1 59 13 is_stmt 1
  59:src/MemoryAllocator.cpp ****             return (void*)((char*)startOfAllocatedSpace + SegmentOffset);
 211              		.loc 1 59 66 is_stmt 0
 212 00f0 2330C700 		sd	a2,0(a4)
  60:src/MemoryAllocator.cpp ****         }
 213              		.loc 1 60 13 is_stmt 1
  60:src/MemoryAllocator.cpp ****         }
 214              		.loc 1 60 72 is_stmt 0
 215 00f4 13058700 		addi	a0,a4,8
 216              	.LVL25:
 217              	.L1:
GAS LISTING /tmp/ccFr2uVD.s 			page 8


 218              	.LBE25:
 219              	.LBE39:
 220              	.LBE41:
  65:src/MemoryAllocator.cpp ****     }
  66:src/MemoryAllocator.cpp **** 
  67:src/MemoryAllocator.cpp ****     return nullptr; // ne postoji dovoljan slobodan prostor
  68:src/MemoryAllocator.cpp **** }
 221              		.loc 1 68 1
 222 00f8 03348100 		ld	s0,8(sp)
 223              		.cfi_remember_state
 224              		.cfi_restore 8
 225              		.cfi_def_cfa 2, 16
 226 00fc 13010101 		addi	sp,sp,16
 227              		.cfi_def_cfa_offset 0
 228 0100 67800000 		jr	ra
 229              	.LVL26:
 230              	.L18:
 231              		.cfi_restore_state
 232              	.LBB42:
 233              	.LBB40:
 234              	.LBB38:
 235              	.LBB37:
  26:src/MemoryAllocator.cpp **** 
 236              		.loc 1 26 17 is_stmt 1
  28:src/MemoryAllocator.cpp ****                     if(curr->next == nullptr) { // ako ne postoji slobodan prostor nakon alokacije
 237              		.loc 1 28 17
 238 0104 638E0500 		beqz	a1,.L20
  37:src/MemoryAllocator.cpp ****                 }
 239              		.loc 1 37 21
 240              	.LVL27:
 241              	.LBB34:
 242              	.LBB35:
  40:src/../h/MemoryAllocator.h **** 
 243              		.loc 2 40 13
  40:src/../h/MemoryAllocator.h **** 
 244              		.loc 2 40 23 is_stmt 0
 245 0108 83B70501 		ld	a5,16(a1)
 246              	.LVL28:
  40:src/../h/MemoryAllocator.h **** 
 247              		.loc 2 40 13
 248 010c 638A0704 		beqz	a5,.L14
  42:src/../h/MemoryAllocator.h ****             prev->next = curr->next;
 249              		.loc 2 42 13 is_stmt 1
 250              	.LVL29:
  43:src/../h/MemoryAllocator.h ****         }
 251              		.loc 2 43 13
  43:src/../h/MemoryAllocator.h ****         }
 252              		.loc 2 43 32 is_stmt 0
 253 0110 83B70701 		ld	a5,16(a5)
 254              	.LVL30:
  43:src/../h/MemoryAllocator.h ****         }
 255              		.loc 2 43 24
 256 0114 23B8F500 		sd	a5,16(a1)
 257              	.LVL31:
 258              	.LBE35:
 259              	.LBE34:
  26:src/MemoryAllocator.cpp **** 
GAS LISTING /tmp/ccFr2uVD.s 			page 9


 260              		.loc 1 26 31
 261 0118 13860600 		mv	a2,a3
 262              	.LVL32:
 263 011c 6FF05FFD 		j	.L9
 264              	.LVL33:
 265              	.L20:
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 266              		.loc 1 29 21 is_stmt 1
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 267              		.loc 1 29 30 is_stmt 0
 268 0120 83370501 		ld	a5,16(a0)
 269              	.LVL34:
  29:src/MemoryAllocator.cpp ****                         head = (FreeSegment*)HEAP_END_ADDR;
 270              		.loc 1 29 21
 271 0124 638A0700 		beqz	a5,.L21
  33:src/MemoryAllocator.cpp ****                     }
 272              		.loc 1 33 25 is_stmt 1
  33:src/MemoryAllocator.cpp ****                     }
 273              		.loc 1 33 30 is_stmt 0
 274 0128 17060000 		sd	a5,.LANCHOR0,a2
 274      2330F600 
 275              	.LVL35:
  26:src/MemoryAllocator.cpp **** 
 276              		.loc 1 26 31
 277 0130 13860600 		mv	a2,a3
 278 0134 6FF0DFFB 		j	.L9
 279              	.LVL36:
 280              	.L21:
  30:src/MemoryAllocator.cpp ****                     }
 281              		.loc 1 30 25 is_stmt 1
  30:src/MemoryAllocator.cpp ****                     }
 282              		.loc 1 30 30 is_stmt 0
 283 0138 97070000 		la	a5,HEAP_END_ADDR
 283      83B70700 
 284 0140 83B70700 		ld	a5,0(a5)
 285 0144 17060000 		sd	a5,.LANCHOR0,a2
 285      2330F600 
 286              	.LVL37:
  26:src/MemoryAllocator.cpp **** 
 287              		.loc 1 26 31
 288 014c 13860600 		mv	a2,a3
 289 0150 6FF01FFA 		j	.L9
 290              	.LVL38:
 291              	.L19:
 292              	.LBB36:
  51:src/MemoryAllocator.cpp ****                 }
 293              		.loc 1 51 21 is_stmt 1
  51:src/MemoryAllocator.cpp ****                 }
 294              		.loc 1 51 26 is_stmt 0
 295 0154 97060000 		sd	a5,.LANCHOR0,a3
 295      23B0F600 
 296 015c 6FF05FF9 		j	.L9
 297              	.LVL39:
 298              	.L14:
 299              	.LBE36:
  26:src/MemoryAllocator.cpp **** 
 300              		.loc 1 26 31
GAS LISTING /tmp/ccFr2uVD.s 			page 10


 301 0160 13860600 		mv	a2,a3
 302              	.LVL40:
 303 0164 6FF0DFF8 		j	.L9
 304              	.LVL41:
 305              	.L13:
 306              	.LBE37:
 307              	.LBE38:
 308              	.LBE40:
 309              	.LBE42:
  13:src/MemoryAllocator.cpp ****     }
 310              		.loc 1 13 16
 311 0168 13050000 		li	a0,0
 312              	.LVL42:
 313 016c 6FF0DFF8 		j	.L1
 314              		.cfi_endproc
 315              	.LFE9:
 317              		.globl	_ZN15MemoryAllocator4headE
 318              		.bss
 319              		.align	3
 320              		.set	.LANCHOR0,. + 0
 323              	_ZN15MemoryAllocator4headE:
 324 0000 00000000 		.zero	8
 324      00000000 
 325              		.text
 326              	.Letext0:
 327              		.file 3 "src/../h/../lib/hw.h"
GAS LISTING /tmp/ccFr2uVD.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccFr2uVD.s:9      .text:0000000000000000 _ZN15MemoryAllocator9mem_allocEm
     /tmp/ccFr2uVD.s:13     .text:0000000000000000 .L0 
     /tmp/ccFr2uVD.s:15     .text:0000000000000000 .L0 
     /tmp/ccFr2uVD.s:16     .text:0000000000000004 .L0 
     /tmp/ccFr2uVD.s:18     .text:0000000000000008 .L0 
     /tmp/ccFr2uVD.s:20     .text:000000000000000c .L0 
     /tmp/ccFr2uVD.s:22     .text:000000000000000c .L0 
     /tmp/ccFr2uVD.s:23     .text:000000000000000c .L0 
     /tmp/ccFr2uVD.s:25     .text:0000000000000014 .L0 
     /tmp/ccFr2uVD.s:27     .text:0000000000000018 .L0 
     /tmp/ccFr2uVD.s:28     .text:0000000000000018 .L0 
     /tmp/ccFr2uVD.s:31     .text:0000000000000024 .L0 
     /tmp/ccFr2uVD.s:34     .text:0000000000000028 .L0 
     /tmp/ccFr2uVD.s:35     .text:0000000000000028 .L0 
     /tmp/ccFr2uVD.s:41     .text:000000000000002c .L0 
     /tmp/ccFr2uVD.s:42     .text:000000000000002c .L0 
     /tmp/ccFr2uVD.s:43     .text:000000000000002c .L0 
     /tmp/ccFr2uVD.s:45     .text:0000000000000030 .L0 
     /tmp/ccFr2uVD.s:48     .text:0000000000000034 .L0 
     /tmp/ccFr2uVD.s:50     .text:0000000000000038 .L0 
     /tmp/ccFr2uVD.s:55     .text:000000000000003c .L0 
     /tmp/ccFr2uVD.s:56     .text:000000000000003c .L0 
     /tmp/ccFr2uVD.s:59     .text:0000000000000044 .L0 
     /tmp/ccFr2uVD.s:63     .text:0000000000000048 .L0 
     /tmp/ccFr2uVD.s:64     .text:0000000000000048 .L0 
     /tmp/ccFr2uVD.s:67     .text:000000000000004c .L0 
     /tmp/ccFr2uVD.s:68     .text:000000000000004c .L0 
     /tmp/ccFr2uVD.s:73     .text:0000000000000050 .L0 
     /tmp/ccFr2uVD.s:74     .text:0000000000000050 .L0 
     /tmp/ccFr2uVD.s:76     .text:0000000000000054 .L0 
     /tmp/ccFr2uVD.s:78     .text:0000000000000058 .L0 
     /tmp/ccFr2uVD.s:80     .text:000000000000005c .L0 
     /tmp/ccFr2uVD.s:85     .text:0000000000000060 .L0 
     /tmp/ccFr2uVD.s:86     .text:0000000000000060 .L0 
     /tmp/ccFr2uVD.s:87     .text:0000000000000060 .L0 
     /tmp/ccFr2uVD.s:91     .text:0000000000000064 .L0 
     /tmp/ccFr2uVD.s:95     .text:0000000000000068 .L0 
     /tmp/ccFr2uVD.s:96     .text:0000000000000068 .L0 
     /tmp/ccFr2uVD.s:97     .text:0000000000000068 .L0 
     /tmp/ccFr2uVD.s:99     .text:000000000000006c .L0 
     /tmp/ccFr2uVD.s:103    .text:0000000000000070 .L0 
     /tmp/ccFr2uVD.s:107    .text:0000000000000074 .L0 
     /tmp/ccFr2uVD.s:108    .text:0000000000000074 .L0 
     /tmp/ccFr2uVD.s:112    .text:0000000000000088 .L0 
     /tmp/ccFr2uVD.s:113    .text:0000000000000088 .L0 
     /tmp/ccFr2uVD.s:115    .text:000000000000008c .L0 
     /tmp/ccFr2uVD.s:116    .text:000000000000008c .L0 
     /tmp/ccFr2uVD.s:121    .text:00000000000000a0 .L0 
     /tmp/ccFr2uVD.s:123    .text:00000000000000a4 .L0 
     /tmp/ccFr2uVD.s:125    .text:00000000000000a8 .L0 
     /tmp/ccFr2uVD.s:126    .text:00000000000000a8 .L0 
     /tmp/ccFr2uVD.s:135    .text:00000000000000b0 .L0 
     /tmp/ccFr2uVD.s:141    .text:00000000000000b4 .L0 
     /tmp/ccFr2uVD.s:142    .text:00000000000000b4 .L0 
     /tmp/ccFr2uVD.s:143    .text:00000000000000b4 .L0 
GAS LISTING /tmp/ccFr2uVD.s 			page 12


     /tmp/ccFr2uVD.s:148    .text:00000000000000b8 .L0 
     /tmp/ccFr2uVD.s:149    .text:00000000000000b8 .L0 
     /tmp/ccFr2uVD.s:152    .text:00000000000000bc .L0 
     /tmp/ccFr2uVD.s:153    .text:00000000000000bc .L0 
     /tmp/ccFr2uVD.s:156    .text:00000000000000c0 .L0 
     /tmp/ccFr2uVD.s:157    .text:00000000000000c0 .L0 
     /tmp/ccFr2uVD.s:158    .text:00000000000000c0 .L0 
     /tmp/ccFr2uVD.s:161    .text:00000000000000c4 .L0 
     /tmp/ccFr2uVD.s:162    .text:00000000000000c4 .L0 
     /tmp/ccFr2uVD.s:164    .text:00000000000000c8 .L0 
     /tmp/ccFr2uVD.s:165    .text:00000000000000c8 .L0 
     /tmp/ccFr2uVD.s:168    .text:00000000000000cc .L0 
     /tmp/ccFr2uVD.s:170    .text:00000000000000d0 .L0 
     /tmp/ccFr2uVD.s:175    .text:00000000000000d4 .L0 
     /tmp/ccFr2uVD.s:176    .text:00000000000000d4 .L0 
     /tmp/ccFr2uVD.s:177    .text:00000000000000d4 .L0 
     /tmp/ccFr2uVD.s:180    .text:00000000000000d8 .L0 
     /tmp/ccFr2uVD.s:183    .text:00000000000000dc .L0 
     /tmp/ccFr2uVD.s:184    .text:00000000000000dc .L0 
     /tmp/ccFr2uVD.s:185    .text:00000000000000dc .L0 
     /tmp/ccFr2uVD.s:188    .text:00000000000000e0 .L0 
     /tmp/ccFr2uVD.s:196    .text:00000000000000e4 .L0 
     /tmp/ccFr2uVD.s:197    .text:00000000000000e4 .L0 
     /tmp/ccFr2uVD.s:198    .text:00000000000000e4 .L0 
     /tmp/ccFr2uVD.s:200    .text:00000000000000e8 .L0 
     /tmp/ccFr2uVD.s:202    .text:00000000000000ec .L0 
     /tmp/ccFr2uVD.s:203    .text:00000000000000ec .L0 
     /tmp/ccFr2uVD.s:211    .text:00000000000000f0 .L0 
     /tmp/ccFr2uVD.s:212    .text:00000000000000f0 .L0 
     /tmp/ccFr2uVD.s:214    .text:00000000000000f4 .L0 
     /tmp/ccFr2uVD.s:215    .text:00000000000000f4 .L0 
     /tmp/ccFr2uVD.s:222    .text:00000000000000f8 .L0 
     /tmp/ccFr2uVD.s:223    .text:00000000000000fc .L0 
     /tmp/ccFr2uVD.s:224    .text:00000000000000fc .L0 
     /tmp/ccFr2uVD.s:225    .text:00000000000000fc .L0 
     /tmp/ccFr2uVD.s:227    .text:0000000000000100 .L0 
     /tmp/ccFr2uVD.s:231    .text:0000000000000104 .L0 
     /tmp/ccFr2uVD.s:237    .text:0000000000000104 .L0 
     /tmp/ccFr2uVD.s:238    .text:0000000000000104 .L0 
     /tmp/ccFr2uVD.s:243    .text:0000000000000108 .L0 
     /tmp/ccFr2uVD.s:244    .text:0000000000000108 .L0 
     /tmp/ccFr2uVD.s:245    .text:0000000000000108 .L0 
     /tmp/ccFr2uVD.s:248    .text:000000000000010c .L0 
     /tmp/ccFr2uVD.s:251    .text:0000000000000110 .L0 
     /tmp/ccFr2uVD.s:252    .text:0000000000000110 .L0 
     /tmp/ccFr2uVD.s:253    .text:0000000000000110 .L0 
     /tmp/ccFr2uVD.s:256    .text:0000000000000114 .L0 
     /tmp/ccFr2uVD.s:261    .text:0000000000000118 .L0 
     /tmp/ccFr2uVD.s:267    .text:0000000000000120 .L0 
     /tmp/ccFr2uVD.s:268    .text:0000000000000120 .L0 
     /tmp/ccFr2uVD.s:271    .text:0000000000000124 .L0 
     /tmp/ccFr2uVD.s:273    .text:0000000000000128 .L0 
     /tmp/ccFr2uVD.s:274    .text:0000000000000128 .L0 
     /tmp/ccFr2uVD.s:277    .text:0000000000000130 .L0 
     /tmp/ccFr2uVD.s:282    .text:0000000000000138 .L0 
     /tmp/ccFr2uVD.s:283    .text:0000000000000138 .L0 
     /tmp/ccFr2uVD.s:288    .text:000000000000014c .L0 
GAS LISTING /tmp/ccFr2uVD.s 			page 13


     /tmp/ccFr2uVD.s:294    .text:0000000000000154 .L0 
     /tmp/ccFr2uVD.s:295    .text:0000000000000154 .L0 
     /tmp/ccFr2uVD.s:301    .text:0000000000000160 .L0 
     /tmp/ccFr2uVD.s:311    .text:0000000000000168 .L0 
     /tmp/ccFr2uVD.s:314    .text:0000000000000170 .L0 
     /tmp/ccFr2uVD.s:323    .bss:0000000000000000 _ZN15MemoryAllocator4headE
     /tmp/ccFr2uVD.s:320    .bss:0000000000000000 .LANCHOR0
     /tmp/ccFr2uVD.s:328    .text:0000000000000170 .L0 
     /tmp/ccFr2uVD.s:23     .text:000000000000000c .L0 
     /tmp/ccFr2uVD.s:28     .text:0000000000000018 .L0 
     /tmp/ccFr2uVD.s:56     .text:000000000000003c .L0 
     /tmp/ccFr2uVD.s:108    .text:0000000000000074 .L0 
     /tmp/ccFr2uVD.s:110    .text:0000000000000080 .L0 
     /tmp/ccFr2uVD.s:116    .text:000000000000008c .L0 
     /tmp/ccFr2uVD.s:274    .text:0000000000000128 .L0 
     /tmp/ccFr2uVD.s:283    .text:0000000000000138 .L0 
     /tmp/ccFr2uVD.s:285    .text:0000000000000144 .L0 
     /tmp/ccFr2uVD.s:295    .text:0000000000000154 .L0 
     /tmp/ccFr2uVD.s:105    .text:0000000000000074 .L16
     /tmp/ccFr2uVD.s:305    .text:0000000000000168 .L13
     /tmp/ccFr2uVD.s:217    .text:00000000000000f8 .L1
     /tmp/ccFr2uVD.s:129    .text:00000000000000b0 .L17
     /tmp/ccFr2uVD.s:61     .text:0000000000000048 .L12
     /tmp/ccFr2uVD.s:32     .text:0000000000000028 .L3
     /tmp/ccFr2uVD.s:230    .text:0000000000000104 .L18
     /tmp/ccFr2uVD.s:291    .text:0000000000000154 .L19
     /tmp/ccFr2uVD.s:190    .text:00000000000000e4 .L11
     /tmp/ccFr2uVD.s:265    .text:0000000000000120 .L20
     /tmp/ccFr2uVD.s:298    .text:0000000000000160 .L14
     /tmp/ccFr2uVD.s:205    .text:00000000000000f0 .L9
     /tmp/ccFr2uVD.s:280    .text:0000000000000138 .L21
     /tmp/ccFr2uVD.s:864    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccFr2uVD.s:2026   .debug_str:000000000000008d .LASF49
     /tmp/ccFr2uVD.s:2082   .debug_str:0000000000000324 .LASF50
     /tmp/ccFr2uVD.s:2104   .debug_str:0000000000000432 .LASF51
     /tmp/ccFr2uVD.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccFr2uVD.s:326    .text:0000000000000170 .Letext0
     /tmp/ccFr2uVD.s:2002   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccFr2uVD.s:2068   .debug_str:000000000000029d .LASF0
     /tmp/ccFr2uVD.s:2048   .debug_str:00000000000001f6 .LASF1
     /tmp/ccFr2uVD.s:2040   .debug_str:00000000000001bd .LASF2
     /tmp/ccFr2uVD.s:2020   .debug_str:0000000000000073 .LASF4
     /tmp/ccFr2uVD.s:2044   .debug_str:00000000000001d8 .LASF3
     /tmp/ccFr2uVD.s:2010   .debug_str:0000000000000039 .LASF5
     /tmp/ccFr2uVD.s:2004   .debug_str:0000000000000000 .LASF6
     /tmp/ccFr2uVD.s:2034   .debug_str:000000000000017a .LASF7
     /tmp/ccFr2uVD.s:2074   .debug_str:00000000000002cd .LASF8
     /tmp/ccFr2uVD.s:2018   .debug_str:0000000000000065 .LASF9
     /tmp/ccFr2uVD.s:2114   .debug_str:000000000000046c .LASF10
     /tmp/ccFr2uVD.s:2036   .debug_str:000000000000018d .LASF11
     /tmp/ccFr2uVD.s:2102   .debug_str:0000000000000422 .LASF12
     /tmp/ccFr2uVD.s:2084   .debug_str:000000000000033c .LASF13
     /tmp/ccFr2uVD.s:2050   .debug_str:0000000000000209 .LASF14
     /tmp/ccFr2uVD.s:2028   .debug_str:000000000000012f .LASF15
     /tmp/ccFr2uVD.s:2078   .debug_str:0000000000000305 .LASF16
     /tmp/ccFr2uVD.s:2008   .debug_str:0000000000000029 .LASF26
     /tmp/ccFr2uVD.s:2046   .debug_str:00000000000001ea .LASF20
GAS LISTING /tmp/ccFr2uVD.s 			page 14


     /tmp/ccFr2uVD.s:2080   .debug_str:000000000000031b .LASF17
     /tmp/ccFr2uVD.s:2110   .debug_str:0000000000000462 .LASF18
     /tmp/ccFr2uVD.s:2012   .debug_str:0000000000000040 .LASF19
     /tmp/ccFr2uVD.s:2054   .debug_str:000000000000022a .LASF34
     /tmp/ccFr2uVD.s:2090   .debug_str:000000000000037e .LASF36
     /tmp/ccFr2uVD.s:2100   .debug_str:00000000000003f4 .LASF52
     /tmp/ccFr2uVD.s:2052   .debug_str:0000000000000215 .LASF21
     /tmp/ccFr2uVD.s:2106   .debug_str:0000000000000450 .LASF22
     /tmp/ccFr2uVD.s:2096   .debug_str:00000000000003c7 .LASF24
     /tmp/ccFr2uVD.s:2086   .debug_str:000000000000034c .LASF23
     /tmp/ccFr2uVD.s:2038   .debug_str:000000000000019c .LASF25
     /tmp/ccFr2uVD.s:2060   .debug_str:000000000000026c .LASF28
     /tmp/ccFr2uVD.s:2092   .debug_str:00000000000003ac .LASF53
     /tmp/ccFr2uVD.s:2062   .debug_str:0000000000000285 .LASF54
     /tmp/ccFr2uVD.s:2094   .debug_str:00000000000003ba .LASF27
     /tmp/ccFr2uVD.s:2058   .debug_str:0000000000000247 .LASF29
     /tmp/ccFr2uVD.s:2042   .debug_str:00000000000001cb .LASF30
     /tmp/ccFr2uVD.s:2032   .debug_str:0000000000000155 .LASF31
     /tmp/ccFr2uVD.s:2030   .debug_str:0000000000000145 .LASF32
     /tmp/ccFr2uVD.s:2088   .debug_str:0000000000000355 .LASF33
     /tmp/ccFr2uVD.s:2070   .debug_str:00000000000002aa .LASF35
     /tmp/ccFr2uVD.s:2076   .debug_str:00000000000002dd .LASF37
     /tmp/ccFr2uVD.s:2022   .debug_str:000000000000007a .LASF38
     /tmp/ccFr2uVD.s:2014   .debug_str:0000000000000045 .LASF55
     /tmp/ccFr2uVD.s:10     .text:0000000000000000 .LFB9
     /tmp/ccFr2uVD.s:315    .text:0000000000000170 .LFE9
     /tmp/ccFr2uVD.s:1433   .debug_loc:0000000000000000 .LLST0
     /tmp/ccFr2uVD.s:2056   .debug_str:0000000000000231 .LASF39
     /tmp/ccFr2uVD.s:1486   .debug_loc:00000000000000ba .LLST1
     /tmp/ccFr2uVD.s:2016   .debug_str:0000000000000060 .LASF40
     /tmp/ccFr2uVD.s:1623   .debug_loc:00000000000001f5 .LLST2
     /tmp/ccFr2uVD.s:2112   .debug_str:0000000000000467 .LASF41
     /tmp/ccFr2uVD.s:1647   .debug_loc:0000000000000265 .LLST3
     /tmp/ccFr2uVD.s:1986   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccFr2uVD.s:2072   .debug_str:00000000000002b9 .LASF42
     /tmp/ccFr2uVD.s:1675   .debug_loc:00000000000002e8 .LLST5
     /tmp/ccFr2uVD.s:2024   .debug_str:000000000000007f .LASF43
     /tmp/ccFr2uVD.s:1776   .debug_loc:00000000000003e1 .LLST6
     /tmp/ccFr2uVD.s:2006   .debug_str:0000000000000013 .LASF44
     /tmp/ccFr2uVD.s:1805   .debug_loc:0000000000000465 .LLST7
     /tmp/ccFr2uVD.s:2064   .debug_str:000000000000028a .LASF45
     /tmp/ccFr2uVD.s:1820   .debug_loc:00000000000004ae .LLST9
     /tmp/ccFr2uVD.s:2108   .debug_str:000000000000045a .LASF46
     /tmp/ccFr2uVD.s:1840   .debug_loc:00000000000004fc .LLST10
     /tmp/ccFr2uVD.s:2066   .debug_str:0000000000000296 .LASF47
     /tmp/ccFr2uVD.s:1867   .debug_loc:0000000000000560 .LLST11
     /tmp/ccFr2uVD.s:139    .text:00000000000000b4 .LBB28
     /tmp/ccFr2uVD.s:146    .text:00000000000000b8 .LBE28
     /tmp/ccFr2uVD.s:1887   .debug_loc:00000000000005ae .LLST12
     /tmp/ccFr2uVD.s:173    .text:00000000000000d4 .LBB30
     /tmp/ccFr2uVD.s:192    .text:00000000000000e4 .LBE30
     /tmp/ccFr2uVD.s:1894   .debug_loc:00000000000005d1 .LLST13
     /tmp/ccFr2uVD.s:1901   .debug_loc:00000000000005f4 .LLST14
     /tmp/ccFr2uVD.s:194    .text:00000000000000e4 .LBB32
     /tmp/ccFr2uVD.s:207    .text:00000000000000f0 .LBE32
     /tmp/ccFr2uVD.s:1913   .debug_loc:000000000000062b .LLST15
     /tmp/ccFr2uVD.s:1920   .debug_loc:000000000000064e .LLST16
GAS LISTING /tmp/ccFr2uVD.s 			page 15


     /tmp/ccFr2uVD.s:70     .text:0000000000000050 .LBB22
     /tmp/ccFr2uVD.s:83     .text:0000000000000060 .LBE22
     /tmp/ccFr2uVD.s:1927   .debug_loc:0000000000000671 .LLST8
     /tmp/ccFr2uVD.s:241    .text:0000000000000108 .LBB34
     /tmp/ccFr2uVD.s:259    .text:0000000000000118 .LBE34
     /tmp/ccFr2uVD.s:1934   .debug_loc:0000000000000694 .LLST17
     /tmp/ccFr2uVD.s:1945   .debug_loc:00000000000006ca .LLST18
     /tmp/ccFr2uVD.s:38     .text:000000000000002c .LBB19
     /tmp/ccFr2uVD.s:53     .text:000000000000003c .LBE19
     /tmp/ccFr2uVD.s:1957   .debug_loc:0000000000000701 .LLST4
     /tmp/ccFr2uVD.s:2098   .debug_str:00000000000003e8 .LASF48
     /tmp/ccFr2uVD.s:14     .text:0000000000000000 .LVL0
     /tmp/ccFr2uVD.s:36     .text:000000000000002c .LVL1
     /tmp/ccFr2uVD.s:46     .text:0000000000000034 .LVL2
     /tmp/ccFr2uVD.s:104    .text:0000000000000074 .LVL11
     /tmp/ccFr2uVD.s:128    .text:00000000000000b0 .LVL12
     /tmp/ccFr2uVD.s:216    .text:00000000000000f8 .LVL25
     /tmp/ccFr2uVD.s:229    .text:0000000000000104 .LVL26
     /tmp/ccFr2uVD.s:304    .text:0000000000000168 .LVL41
     /tmp/ccFr2uVD.s:312    .text:000000000000016c .LVL42
     /tmp/ccFr2uVD.s:51     .text:000000000000003c .LVL3
     /tmp/ccFr2uVD.s:144    .text:00000000000000b8 .LVL14
     /tmp/ccFr2uVD.s:262    .text:000000000000011c .LVL32
     /tmp/ccFr2uVD.s:264    .text:0000000000000120 .LVL33
     /tmp/ccFr2uVD.s:275    .text:0000000000000130 .LVL35
     /tmp/ccFr2uVD.s:279    .text:0000000000000138 .LVL36
     /tmp/ccFr2uVD.s:286    .text:000000000000014c .LVL37
     /tmp/ccFr2uVD.s:297    .text:0000000000000160 .LVL39
     /tmp/ccFr2uVD.s:302    .text:0000000000000164 .LVL40
     /tmp/ccFr2uVD.s:57     .text:0000000000000044 .LVL4
     /tmp/ccFr2uVD.s:94     .text:0000000000000068 .LVL9
     /tmp/ccFr2uVD.s:100    .text:0000000000000070 .LVL10
     /tmp/ccFr2uVD.s:60     .text:0000000000000048 .LVL5
     /tmp/ccFr2uVD.s:81     .text:0000000000000060 .LVL7
     /tmp/ccFr2uVD.s:150    .text:00000000000000bc .LVL15
     /tmp/ccFr2uVD.s:154    .text:00000000000000c0 .LVL16
     /tmp/ccFr2uVD.s:159    .text:00000000000000c4 .LVL17
     /tmp/ccFr2uVD.s:246    .text:000000000000010c .LVL28
     /tmp/ccFr2uVD.s:269    .text:0000000000000124 .LVL34
     /tmp/ccFr2uVD.s:290    .text:0000000000000154 .LVL38
     /tmp/ccFr2uVD.s:88     .text:0000000000000064 .LVL8
     /tmp/ccFr2uVD.s:178    .text:00000000000000d8 .LVL20
     /tmp/ccFr2uVD.s:204    .text:00000000000000f0 .LVL24
     /tmp/ccFr2uVD.s:166    .text:00000000000000cc .LVL18
     /tmp/ccFr2uVD.s:189    .text:00000000000000e4 .LVL23
     /tmp/ccFr2uVD.s:138    .text:00000000000000b4 .LVL13
     /tmp/ccFr2uVD.s:172    .text:00000000000000d4 .LVL19
     /tmp/ccFr2uVD.s:182    .text:00000000000000dc .LVL21
     /tmp/ccFr2uVD.s:186    .text:00000000000000e0 .LVL22
     /tmp/ccFr2uVD.s:69     .text:0000000000000050 .LVL6
     /tmp/ccFr2uVD.s:240    .text:0000000000000108 .LVL27
     /tmp/ccFr2uVD.s:250    .text:0000000000000110 .LVL29
     /tmp/ccFr2uVD.s:254    .text:0000000000000114 .LVL30
     /tmp/ccFr2uVD.s:257    .text:0000000000000118 .LVL31
     /tmp/ccFr2uVD.s:329    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccFr2uVD.s:65     .text:000000000000004c .LBB21
     /tmp/ccFr2uVD.s:101    .text:0000000000000070 .LBE21
GAS LISTING /tmp/ccFr2uVD.s 			page 16


     /tmp/ccFr2uVD.s:130    .text:00000000000000b0 .LBB41
     /tmp/ccFr2uVD.s:220    .text:00000000000000f8 .LBE41
     /tmp/ccFr2uVD.s:232    .text:0000000000000104 .LBB42
     /tmp/ccFr2uVD.s:309    .text:0000000000000168 .LBE42
     /tmp/ccFr2uVD.s:136    .text:00000000000000b4 .LBB27
     /tmp/ccFr2uVD.s:208    .text:00000000000000f0 .LBE27
     /tmp/ccFr2uVD.s:292    .text:0000000000000154 .LBB36
     /tmp/ccFr2uVD.s:299    .text:0000000000000160 .LBE36

UNDEFINED SYMBOLS
HEAP_END_ADDR
HEAP_START_ADDR
